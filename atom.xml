<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>微波炉 de Blogs</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://weibolu.online/"/>
  <updated>2019-09-11T04:20:41.995Z</updated>
  <id>https://weibolu.online/</id>
  
  <author>
    <name>微波炉</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>字符串处理5 —— 回文树</title>
    <link href="https://weibolu.online/2019/09/11/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%865%20%E2%80%94%E2%80%94%20%E5%9B%9E%E6%96%87%E6%A0%91/"/>
    <id>https://weibolu.online/2019/09/11/字符串处理5 —— 回文树/</id>
    <published>2019-09-11T02:46:28.000Z</published>
    <updated>2019-09-11T04:20:41.995Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h2><p>回文树，也称为回文自动机，主要用于处理回文字符串类型问题。</p><p>时间复杂度达到O(n*(字符类型总数))，也是十分优秀。</p><a id="more"></a><h2 id="传送门"><a href="#传送门" class="headerlink" title="传送门"></a>传送门</h2><p><a href="https://blog.csdn.net/u013368721/article/details/42100363?readlog" target="_blank" rel="noopener">模板讲解1</a></p><p><a href="https://blog.csdn.net/lwfcgz/article/details/48739051" target="_blank" rel="noopener">模板讲解2</a></p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p>和AC自动机类似利用失配后的查询，可以快速找到下一个回文字符串。</p><p>严格的说回文树并不是一颗树，它其实是两颗树，有着两个树根，分别是空串和-1，这样在其两边拓展字符时就可以表示a、 aa两种，完美的解决了奇数和偶数回文串问题。</p><p>树中每个节点是一个回文子串，节点有两条指向边，一条指向在原回文串基础上向两边拓展相同字符，产生新的回文串，另一点边指向原回文串的最长回文后缀子串（即失配后的查询串）。</p><p>构造时将字符一个一个加入树中，常见的操作时在树上进行dfs，从而来统计某种特征。</p><h3 id="可以解决的问题有："><a href="#可以解决的问题有：" class="headerlink" title="可以解决的问题有："></a>可以解决的问题有：</h3><p>1.求串S前缀0~i内本质不同回文串的个数（两个串长度不同或者长度相同且至少有一个字符不同便是本质不同）</p><p>2.求串S内每一个本质不同回文串出现的次数</p><p>3.求串S内回文串的个数（其实就是1和2结合起来）</p><p>4.求以下标i结尾的回文串的个数</p><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">100005</span> ;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">26</span> ;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Palindromic_Tree</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> next[MAXN][N] ;<span class="comment">///next指针，next指针和字典树类似，指向的串为当前串两端加上同一个字符构成</span></span><br><span class="line">    <span class="keyword">int</span> fail[MAXN] ;<span class="comment">///fail指针，失配后跳转到fail指针指向的节点</span></span><br><span class="line">    <span class="keyword">int</span> cnt[MAXN] ; <span class="comment">///cnt[i]表示节点i表示的本质不同的串的个数（建树时求出的不是完全的，最后count()函数跑一遍以后才是正确的）</span></span><br><span class="line">    <span class="keyword">int</span> num[MAXN] ;<span class="comment">///表示以节点i表示的最长回文串的最右端点为回文串结尾的回文串个数。</span></span><br><span class="line">    <span class="keyword">int</span> len[MAXN] ;<span class="comment">///len[i]表示节点i表示的回文串的长度</span></span><br><span class="line">    <span class="keyword">int</span> S[MAXN] ;<span class="comment">///存放添加的字符</span></span><br><span class="line">    <span class="keyword">int</span> last ;<span class="comment">///指向上一个字符所在的节点，方便下一次add</span></span><br><span class="line">    <span class="keyword">int</span> n ;<span class="comment">///字符数组指针</span></span><br><span class="line">    <span class="keyword">int</span> p ;<span class="comment">///节点指针</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">newnode</span> <span class="params">( <span class="keyword">int</span> l )</span> </span>&#123;<span class="comment">//新建节点</span></span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; N ; ++ i ) next[p][i] = <span class="number">0</span> ;</span><br><span class="line">        cnt[p] = <span class="number">0</span> ;</span><br><span class="line">        num[p] = <span class="number">0</span> ;</span><br><span class="line">        len[p] = l ;</span><br><span class="line">        <span class="keyword">return</span> p ++ ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span> <span class="params">()</span> </span>&#123;<span class="comment">//初始化</span></span><br><span class="line">        p = <span class="number">0</span> ;</span><br><span class="line">        newnode (  <span class="number">0</span> ) ;</span><br><span class="line">        newnode ( <span class="number">-1</span> ) ;</span><br><span class="line">        last = <span class="number">0</span> ;</span><br><span class="line">        n = <span class="number">0</span> ;</span><br><span class="line">        S[n] = <span class="number">-1</span> ;<span class="comment">///开头放一个字符集中没有的字符，减少特判</span></span><br><span class="line">        fail[<span class="number">0</span>] = <span class="number">1</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get_fail</span> <span class="params">( <span class="keyword">int</span> x )</span> </span>&#123;<span class="comment">///和KMP一样，失配后找一个尽量最长的</span></span><br><span class="line">        <span class="keyword">while</span> ( S[n - len[x] - <span class="number">1</span>] != S[n] ) x = fail[x] ;</span><br><span class="line">        <span class="keyword">return</span> x ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span> <span class="params">( <span class="keyword">int</span> c )</span> </span>&#123;</span><br><span class="line">        c -= <span class="string">'a'</span> ;</span><br><span class="line">        S[++ n] = c ;</span><br><span class="line">        <span class="keyword">int</span> cur = get_fail ( last ) ;<span class="comment">///通过上一个回文串找这个回文串的匹配位置</span></span><br><span class="line">        <span class="keyword">if</span> ( !next[cur][c] ) &#123;<span class="comment">///如果这个回文串没有出现过，说明出现了一个新的本质不同的回文串</span></span><br><span class="line">            <span class="keyword">int</span> now = newnode ( len[cur] + <span class="number">2</span> ) ;<span class="comment">///新建节点</span></span><br><span class="line">            fail[now] = next[get_fail ( fail[cur] )][c] ;<span class="comment">///和AC自动机一样建立fail指针，以便失配后跳转</span></span><br><span class="line">            next[cur][c] = now ;</span><br><span class="line">            num[now] = num[fail[now]] + <span class="number">1</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        last = next[cur][c] ;</span><br><span class="line">        cnt[last] ++ ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">count</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = p - <span class="number">1</span> ; i &gt;= <span class="number">0</span> ; -- i ) cnt[fail[i]] += cnt[i] ;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125; ;</span><br></pre></td></tr></table></figure><h2 id="板子题"><a href="#板子题" class="headerlink" title="板子题"></a>板子题</h2><h3 id="计蒜客"><a href="#计蒜客" class="headerlink" title="计蒜客"></a><a href="https://nanti.jisuanke.com/t/41389" target="_blank" rel="noopener">计蒜客</a></h3><p>要求统计所有回文子串中不同字符的数量之和，建树后利用dfs统计即可。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">300005</span> ;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">26</span> ;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Palindromic_Tree</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> next[MAXN][N] ;<span class="comment">//next指针，next指针和字典树类似，指向的串为当前串两端加上同一个字符构成</span></span><br><span class="line"><span class="keyword">int</span> fail[MAXN] ;<span class="comment">//fail指针，失配后跳转到fail指针指向的节点</span></span><br><span class="line"><span class="keyword">int</span> cnt[MAXN] ;</span><br><span class="line"><span class="keyword">int</span> num[MAXN] ;</span><br><span class="line"><span class="keyword">int</span> len[MAXN] ;<span class="comment">//len[i]表示节点i表示的回文串的长度</span></span><br><span class="line"><span class="keyword">int</span> S[MAXN] ;<span class="comment">//存放添加的字符</span></span><br><span class="line"><span class="keyword">int</span> last ;<span class="comment">//指向上一个字符所在的节点，方便下一次add</span></span><br><span class="line"><span class="keyword">int</span> n ;<span class="comment">//字符数组指针</span></span><br><span class="line"><span class="keyword">int</span> p ;<span class="comment">//节点指针</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">newnode</span> <span class="params">( <span class="keyword">int</span> l )</span> </span>&#123;<span class="comment">//新建节点</span></span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; N ; ++ i ) next[p][i] = <span class="number">0</span> ;</span><br><span class="line">cnt[p] = <span class="number">0</span> ;</span><br><span class="line">num[p] = <span class="number">0</span> ;</span><br><span class="line">len[p] = l ;</span><br><span class="line"><span class="keyword">return</span> p ++ ;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span> <span class="params">()</span> </span>&#123;<span class="comment">//初始化</span></span><br><span class="line">p = <span class="number">0</span> ;</span><br><span class="line">newnode (  <span class="number">0</span> ) ;</span><br><span class="line">newnode ( <span class="number">-1</span> ) ;</span><br><span class="line">last = <span class="number">0</span> ;</span><br><span class="line">n = <span class="number">0</span> ;</span><br><span class="line">S[n] = <span class="number">-1</span> ;<span class="comment">//开头放一个字符集中没有的字符，减少特判</span></span><br><span class="line">fail[<span class="number">0</span>] = <span class="number">1</span> ;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_fail</span> <span class="params">( <span class="keyword">int</span> x )</span> </span>&#123;<span class="comment">//和KMP一样，失配后找一个尽量最长的</span></span><br><span class="line"><span class="keyword">while</span> ( S[n - len[x] - <span class="number">1</span>] != S[n] ) x = fail[x] ;</span><br><span class="line"><span class="keyword">return</span> x ;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span> <span class="params">( <span class="keyword">int</span> c )</span> </span>&#123;</span><br><span class="line">c -= <span class="string">'a'</span> ;</span><br><span class="line">S[++ n] = c ;</span><br><span class="line"><span class="keyword">int</span> cur = get_fail ( last ) ;<span class="comment">//通过上一个回文串找这个回文串的匹配位置</span></span><br><span class="line"><span class="keyword">if</span> ( !next[cur][c] ) &#123;<span class="comment">//如果这个回文串没有出现过，说明出现了一个新的本质不同的回文串</span></span><br><span class="line"><span class="keyword">int</span> now = newnode ( len[cur] + <span class="number">2</span> ) ;<span class="comment">//新建节点</span></span><br><span class="line">fail[now] = next[get_fail ( fail[cur] )][c] ;<span class="comment">//和AC自动机一样建立fail指针，以便失配后跳转</span></span><br><span class="line">next[cur][c] = now ;</span><br><span class="line">num[now] = num[fail[now]] + <span class="number">1</span> ;</span><br><span class="line">&#125;</span><br><span class="line">last = next[cur][c] ;</span><br><span class="line">cnt[last] ++ ;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">count</span> <span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = p - <span class="number">1</span> ; i &gt;= <span class="number">0</span> ; -- i ) cnt[fail[i]] += cnt[i] ;</span><br><span class="line"><span class="comment">//父亲累加儿子的cnt，因为如果fail[v]=u，则u一定是v的子回文串！</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;Pali;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[MAXN];</span><br><span class="line"><span class="keyword">int</span> vis[<span class="number">30</span>];</span><br><span class="line">ll ans = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++) <span class="keyword">if</span>(Pali.next[a][i])&#123;</span><br><span class="line">        vis[i] ++;</span><br><span class="line">        <span class="keyword">if</span>(vis[i] == <span class="number">1</span>) num++;</span><br><span class="line">        <span class="keyword">int</span> son = Pali.next[a][i];</span><br><span class="line">        ans += Pali.cnt[son] * num;</span><br><span class="line">        dfs(son, num);</span><br><span class="line">        vis[i]--;</span><br><span class="line">        <span class="keyword">if</span>(vis[i] == <span class="number">0</span>) num--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</span><br><span class="line">    Pali.init();</span><br><span class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span> vis);</span><br><span class="line">    <span class="keyword">int</span> len = <span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        Pali.add(s[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    Pali.count();</span><br><span class="line">    dfs(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    dfs(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Hint&quot;&gt;&lt;a href=&quot;#Hint&quot; class=&quot;headerlink&quot; title=&quot;Hint&quot;&gt;&lt;/a&gt;Hint&lt;/h2&gt;&lt;p&gt;回文树，也称为回文自动机，主要用于处理回文字符串类型问题。&lt;/p&gt;
&lt;p&gt;时间复杂度达到O(n*(字符类型总数))，也是十分优秀。&lt;/p&gt;
    
    </summary>
    
      <category term="字符串处理" scheme="https://weibolu.online/categories/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86/"/>
    
    
      <category term="ACM模板" scheme="https://weibolu.online/tags/ACM%E6%A8%A1%E6%9D%BF/"/>
    
      <category term="字符串处理" scheme="https://weibolu.online/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>字符串处理4 —— 马拉车算法</title>
    <link href="https://weibolu.online/2019/09/08/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%864%20%E2%80%94%E2%80%94%20%E9%A9%AC%E6%8B%89%E8%BD%A6%E7%AE%97%E6%B3%95/"/>
    <id>https://weibolu.online/2019/09/08/字符串处理4 —— 马拉车算法/</id>
    <published>2019-09-08T02:46:28.000Z</published>
    <updated>2019-09-08T13:16:23.897Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h2><p>马拉车（Manacher）算法，用来求字符串中以各字符为中心的最长回文串的长度。</p><p>时间复杂度十分优秀，为O(n)。</p><a id="more"></a><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> ans[maxn];            <span class="comment">//存下各点的最长回文串</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ma</span><span class="params">(<span class="built_in">string</span> ss)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    s.push_back(<span class="string">'$'</span>);</span><br><span class="line">    s.push_back(<span class="string">'#'</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ss.size(); i++) &#123;</span><br><span class="line">        s.push_back(ss[i]);</span><br><span class="line">        s.push_back(<span class="string">'#'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    s.push_back(<span class="string">'@'</span>);</span><br><span class="line">    <span class="keyword">int</span> maxr = <span class="number">0</span>, flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.size(); i++) &#123;</span><br><span class="line">        ans[i] = maxr &gt; i ? min(ans[<span class="number">2</span>*flag-i], maxr-i) : <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(s[i+ans[i]] == s[i-ans[i]]) ans[i]++;</span><br><span class="line">        <span class="keyword">if</span>(i + ans[i] &gt; maxr) &#123;</span><br><span class="line">            maxr = i+ans[i];</span><br><span class="line">            flag = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h2><p>算法思想主要是判断回文区域覆盖的最右侧范围，看看当前要判断的中心是否在这个范围内，然后映射到大中心点的左侧，因为这个子串已经算过，可以借助这个映射的子串判断当前要找的最大回文子串。</p><p>比较巧妙的是，它在字符之间加入特殊字符‘#’，这样就解决了偶串的问题。同时在开头加上特殊字符‘$‘，防止子串越界。</p><h2 id="传送门"><a href="#传送门" class="headerlink" title="传送门"></a>传送门</h2><p><a href="https://mp.weixin.qq.com/s?__biz=MzIzMTE1ODkyNQ==&amp;mid=2649410225&amp;idx=1&amp;sn=ed045e8edc3c49a436a328e5f0f37a55&amp;chksm=f0b60f53c7c18645b4c04a69ad314723cce94ed56994d6f963c2275a2db8d85f973f15f508e4&amp;mpshare=1&amp;scene=23&amp;srcid=1001JCsBlpxgUWjgixasChNQ#rd" target="_blank" rel="noopener">漫画风十分详细</a></p><p><a href="https://blog.csdn.net/bestsort/article/details/81637464" target="_blank" rel="noopener">图解十分强大</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Hint&quot;&gt;&lt;a href=&quot;#Hint&quot; class=&quot;headerlink&quot; title=&quot;Hint&quot;&gt;&lt;/a&gt;Hint&lt;/h2&gt;&lt;p&gt;马拉车（Manacher）算法，用来求字符串中以各字符为中心的最长回文串的长度。&lt;/p&gt;
&lt;p&gt;时间复杂度十分优秀，为O(n)。&lt;/p&gt;
    
    </summary>
    
      <category term="字符串处理" scheme="https://weibolu.online/categories/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86/"/>
    
    
      <category term="ACM模板" scheme="https://weibolu.online/tags/ACM%E6%A8%A1%E6%9D%BF/"/>
    
      <category term="字符串处理" scheme="https://weibolu.online/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>名人名言留言板</title>
    <link href="https://weibolu.online/2019/08/28/%E5%90%8D%E4%BA%BA%E5%90%8D%E8%A8%80%E7%95%99%E8%A8%80%E6%9D%BF/"/>
    <id>https://weibolu.online/2019/08/28/名人名言留言板/</id>
    <published>2019-08-28T14:44:07.000Z</published>
    <updated>2019-09-08T13:25:20.253Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h2><p>没事来这里发两句牢骚，说不定将来就成名人名言了呢φ(*￣0￣)</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Hint&quot;&gt;&lt;a href=&quot;#Hint&quot; class=&quot;headerlink&quot; title=&quot;Hint&quot;&gt;&lt;/a&gt;Hint&lt;/h2&gt;&lt;p&gt;没事来这里发两句牢骚，说不定将来就成名人名言了呢φ(*￣0￣)&lt;/p&gt;
    
    </summary>
    
      <category term="Life" scheme="https://weibolu.online/categories/Life/"/>
    
    
      <category term="Life" scheme="https://weibolu.online/tags/Life/"/>
    
  </entry>
  
  <entry>
    <title>2019hdu多校 —— 7th</title>
    <link href="https://weibolu.online/2019/08/13/2019hdu%E5%A4%9A%E6%A0%A1%20%E2%80%94%E2%80%94%207th/"/>
    <id>https://weibolu.online/2019/08/13/2019hdu多校 —— 7th/</id>
    <published>2019-08-13T06:44:07.000Z</published>
    <updated>2019-09-08T13:20:19.883Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h2><p> 暑假多校的第7场多校，依旧是很难，在此记录下可以做的题目的解法。</p><a id="more"></a><h2 id="A-A-B-C"><a href="#A-A-B-C" class="headerlink" title="A :    A+B = C"></a>A :    A+B = C</h2><p>Given a,b,c , find an arbitrary set of x,y,z such that a⋅10x+b⋅10y=c⋅10z and 0≤x,y,z≤$10^6$</p><h3 id="解"><a href="#解" class="headerlink" title="解"></a>解</h3><p>这道题有两种解法，比较容易想到的是去除掉a、b、c尾部的零，然后就只有4种情况了：</p><p>$$<br>\begin{cases}<br>c以a结尾&amp; \<br>c以b结尾&amp; \<br>c以a+b结尾&amp; \<br>a+b末尾为0&amp;<br>\end{cases}<br>$$</p><p>分类讨论即可，很好处理。</p><p>另一种方法就不太容易想到了，将a、b、c尾部补零知道他们长度一致，此时也只剩下四种情况了：<br>$$<br>\begin{cases}<br>a+b=c \<br>a+b=c<em>10 \<br>a</em>10+b=c<em>10 \<br>a+b</em>10=c*10<br>\end{cases}<br>$$</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Hint&quot;&gt;&lt;a href=&quot;#Hint&quot; class=&quot;headerlink&quot; title=&quot;Hint&quot;&gt;&lt;/a&gt;Hint&lt;/h2&gt;&lt;p&gt; 暑假多校的第7场多校，依旧是很难，在此记录下可以做的题目的解法。&lt;/p&gt;
    
    </summary>
    
      <category term="多校训练" scheme="https://weibolu.online/categories/%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83/"/>
    
    
      <category term="多校训练" scheme="https://weibolu.online/tags/%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83/"/>
    
  </entry>
  
  <entry>
    <title>基础算法3 —— 日期推测星期数</title>
    <link href="https://weibolu.online/2019/08/04/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%953%20%E2%80%94%E2%80%94%20%E6%97%A5%E6%9C%9F%E6%8E%A8%E6%B5%8B%E6%98%9F%E6%9C%9F%E6%95%B0/"/>
    <id>https://weibolu.online/2019/08/04/基础算法3 —— 日期推测星期数/</id>
    <published>2019-08-04T00:31:03.000Z</published>
    <updated>2019-08-12T03:02:10.563Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h2><p>蔡勒公式，一个神奇的公式，可以通过日期的具体年月日推测出这天为星期几。</p><a id="more"></a><p>给定日期为yy-mm-dd<br>其中月份若为1月或2月，要记作上一年的13月和14月。</p><p>则其对应星期数为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">int</span> c = yy/<span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> d = yy%<span class="number">100</span>;</span><br><span class="line">week = (c/<span class="number">4</span>) - <span class="number">2</span> * c + (d+d/<span class="number">4</span>) + (<span class="number">13</span> * (mm+<span class="number">1</span>)/<span class="number">5</span>) + dd - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(week &lt; <span class="number">0</span>) week = (week + (-week/<span class="number">7</span>+<span class="number">1</span>) * <span class="number">7</span>)%<span class="number">7</span>;</span><br><span class="line"><span class="keyword">else</span> week %= <span class="number">7</span>;</span><br></pre></td></tr></table></figure><p>注意week可能为负值，这样最终得到的week为0就为周日，为1就为周一，依此类推。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Hint&quot;&gt;&lt;a href=&quot;#Hint&quot; class=&quot;headerlink&quot; title=&quot;Hint&quot;&gt;&lt;/a&gt;Hint&lt;/h2&gt;&lt;p&gt;蔡勒公式，一个神奇的公式，可以通过日期的具体年月日推测出这天为星期几。&lt;/p&gt;
    
    </summary>
    
      <category term="ACM基础算法" scheme="https://weibolu.online/categories/ACM%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="ACM模板" scheme="https://weibolu.online/tags/ACM%E6%A8%A1%E6%9D%BF/"/>
    
  </entry>
  
  <entry>
    <title>图论2 —— 最短路问题</title>
    <link href="https://weibolu.online/2019/07/23/%E5%9B%BE%E8%AE%BA2%20%E2%80%94%E2%80%94%20%E6%9C%80%E7%9F%AD%E8%B7%AF%E9%97%AE%E9%A2%98/"/>
    <id>https://weibolu.online/2019/07/23/图论2 —— 最短路问题/</id>
    <published>2019-07-23T06:12:25.000Z</published>
    <updated>2019-09-04T01:46:23.689Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h2><p>在此记录图论中最短路问题的几种不同解法<br>ps: 本篇博客仅记录算法思想，模板仅供参考。</p><a id="more"></a><h2 id="Dijkstra算法"><a href="#Dijkstra算法" class="headerlink" title="Dijkstra算法"></a>Dijkstra算法</h2><p>求一个图中两个点之间最短距离的最快的一种方法，要求不能有负边。</p><h3 id="原始版本"><a href="#原始版本" class="headerlink" title="原始版本"></a>原始版本</h3><p>时间复杂度：O(n^2)<br>记录所有点到起点的最短路径，每次从未松驰过的点取出距离起点最短的点（此处可以用优先队列优化），并用它来更新到未松驰过的点的距离，进行n-1次松驰后即可求得其余顶点到起点的最短距离，可以用邻接矩阵或者邻接链表实现。</p><h4 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> mapa[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> book[manx], dis[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(book, <span class="number">0</span>, <span class="keyword">sizeof</span> book);</span><br><span class="line">    book[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        dis[i] = mapa[<span class="number">1</span>][i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> min = inf, u;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">2</span>; j &lt;= n; j++) <span class="keyword">if</span>(book[j] == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(dis[j] &lt; min) &#123;</span><br><span class="line">                min = dis[j]; u = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        book[u] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) <span class="keyword">if</span>(book[j] == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(dis[j] &gt; dis[u] + mapa[u][j]) &#123;</span><br><span class="line">                dis[j] = dis[u] + mapa[u][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="堆优化版本"><a href="#堆优化版本" class="headerlink" title="堆优化版本"></a>堆优化版本</h3><p>时间复杂度O(mlogn)<br>利用堆来取出每次距离起点最近的顶点，通过优先队列来实现。</p><h3 id="斐波那契堆优化"><a href="#斐波那契堆优化" class="headerlink" title="斐波那契堆优化"></a>斐波那契堆优化</h3><p>时间复杂度O(m+nlogn)<br>虽然时间复杂度很好看，但很难实现，一般也不会用到。</p><h2 id="Floyd算法"><a href="#Floyd算法" class="headerlink" title="Floyd算法"></a>Floyd算法</h2><p>时间复杂度高达O(n^3)，优点是可以求出图中所有点对的最短路。<br>利用每个点来对每个点对进行松驰。</p><h3 id="模板-1"><a href="#模板-1" class="headerlink" title="模板"></a>模板</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; k++) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(i == k) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i == j || k == j) <span class="keyword">continue</span>;</span><br><span class="line">            dis[i][j] = min(dis[i][j], dis[i][k]+dis[k][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Bellman-ford算法"><a href="#Bellman-ford算法" class="headerlink" title="Bellman-ford算法"></a>Bellman-ford算法</h2><p>时间复杂度为O(mn)，可以找出负环。</p><p>记录所有顶点到达起点的距离，并进行n-1次遍历，对于图中的每条边，如果起点距离加边权小于终点距离，则进行更新。在n-1次遍历后，如果还可以优化，说明存在负环，并且可以找出负环。</p><h3 id="模板-2"><a href="#模板-2" class="headerlink" title="模板"></a>模板</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> st, en, val;</span><br><span class="line">&#125;edges[maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dis[maxn];</span><br><span class="line"><span class="keyword">int</span> st;             <span class="comment">//起点</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span>* Bellman-ford()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dis, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dis);</span><br><span class="line">    dis[st] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(dis[edges[j].st] + edges[j].val &lt; dis[edges[j].en]) &#123;</span><br><span class="line">                dis[edges[j].en] = dis[edges[j].st] + edges[j].val;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SPFA算法"><a href="#SPFA算法" class="headerlink" title="SPFA算法"></a>SPFA算法</h2><p>国人发明出来的一种计算单源最短路的方法，算是BF算法的一种简化版本，代码量较小，时间复杂度为O(km) k一般&lt;=2，最坏情况下达到O(mn),可以用来判断负环。</p><p>思路与dijkstra类似，通过队列实现，每次将从队列中取出一个点，并判断能否优化其它点，如果能优化就将这个点加入队列，注意另外开数组保存节点是否在队列中。同时在记录每个点进入队列的次数，如果大于n次，则说明有负环。</p><h3 id="模板-3"><a href="#模板-3" class="headerlink" title="模板"></a>模板</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> from, to, cost;</span><br><span class="line">    edge()&#123;&#125;</span><br><span class="line">    edge(<span class="keyword">int</span> _from, <span class="keyword">int</span> _to, <span class="keyword">int</span> _cost)&#123;</span><br><span class="line">        from = _from;</span><br><span class="line">        to = _to;</span><br><span class="line">        cost = _cost;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;edge&gt; edges;</span><br><span class="line"><span class="keyword">int</span> rank[maxn], dis[maxn];</span><br><span class="line"><span class="keyword">bool</span> inque[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span></span>&#123;</span><br><span class="line">    edges.push_back(edge(u, v, w));</span><br><span class="line">    <span class="keyword">int</span> m = edges.size();</span><br><span class="line">    G[u].push_back(m<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">spfa</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        dis[i] = INF;</span><br><span class="line">        rank[i] = <span class="number">0</span>;</span><br><span class="line">        inque[i] = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    dis[s] = <span class="number">0</span>;</span><br><span class="line">    rank[s] = <span class="number">1</span>;</span><br><span class="line">    inque[s] = <span class="literal">true</span>;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; que;</span><br><span class="line">    que.push(s);</span><br><span class="line">    <span class="keyword">while</span>(!que.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> u = que.front();</span><br><span class="line">        inque[u] = <span class="literal">false</span>;</span><br><span class="line">        que.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="keyword">int</span>)G[u].size(); i++) &#123;</span><br><span class="line">            edge e = edges[G[u][i]];</span><br><span class="line">            <span class="keyword">if</span>(dis[e.to] &gt; dis[u] + e.cost) &#123;</span><br><span class="line">                dis[e.to] = dis[u] + e.cost;</span><br><span class="line">                <span class="keyword">if</span>(!inque[e.to]) &#123;</span><br><span class="line">                    que.push(e.to);</span><br><span class="line">                    inque[e.to] = <span class="literal">true</span>;</span><br><span class="line">                    rank[e.to]++;</span><br><span class="line">                    <span class="keyword">if</span>(rank[e.to] &gt;= n) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Hint&quot;&gt;&lt;a href=&quot;#Hint&quot; class=&quot;headerlink&quot; title=&quot;Hint&quot;&gt;&lt;/a&gt;Hint&lt;/h2&gt;&lt;p&gt;在此记录图论中最短路问题的几种不同解法&lt;br&gt;ps: 本篇博客仅记录算法思想，模板仅供参考。&lt;/p&gt;
    
    </summary>
    
      <category term="基础图论" scheme="https://weibolu.online/categories/%E5%9F%BA%E7%A1%80%E5%9B%BE%E8%AE%BA/"/>
    
    
      <category term="ACM模板" scheme="https://weibolu.online/tags/ACM%E6%A8%A1%E6%9D%BF/"/>
    
      <category term="基础图论" scheme="https://weibolu.online/tags/%E5%9F%BA%E7%A1%80%E5%9B%BE%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>图论3 —— 最大流问题</title>
    <link href="https://weibolu.online/2019/07/23/%E5%9B%BE%E8%AE%BA3%20%E2%80%94%E2%80%94%20%E6%9C%80%E5%A4%A7%E6%B5%81%E9%97%AE%E9%A2%98/"/>
    <id>https://weibolu.online/2019/07/23/图论3 —— 最大流问题/</id>
    <published>2019-07-23T06:12:25.000Z</published>
    <updated>2019-08-12T03:30:13.992Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="基础图论" scheme="https://weibolu.online/categories/%E5%9F%BA%E7%A1%80%E5%9B%BE%E8%AE%BA/"/>
    
    
      <category term="ACM模板" scheme="https://weibolu.online/tags/ACM%E6%A8%A1%E6%9D%BF/"/>
    
      <category term="基础图论" scheme="https://weibolu.online/tags/%E5%9F%BA%E7%A1%80%E5%9B%BE%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>数论7 —— 快速质因数分解</title>
    <link href="https://weibolu.online/2019/07/21/%E6%95%B0%E8%AE%BA7%20%E2%80%94%E2%80%94%20%E5%BF%AB%E9%80%9F%E8%B4%A8%E5%9B%A0%E6%95%B0%E5%88%86%E8%A7%A3/"/>
    <id>https://weibolu.online/2019/07/21/数论7 —— 快速质因数分解/</id>
    <published>2019-07-21T02:29:25.000Z</published>
    <updated>2019-08-12T03:27:35.095Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h2><p>这一篇要说的就是这个神奇的算法Pollard rho质因数分解<br>一般来说质因数分解用的都是O(n^1/2)的算法，但这个神奇的算法的时间复杂度可以达到O(n^1/4)，这就意味着它可以对一个1e18的数据进行质因数分解，目前学到的算法很少能达到这个时间复杂度，令人惊叹┑(￣Д ￣)┍</p><a id="more"></a><h2 id="算法原理"><a href="#算法原理" class="headerlink" title="算法原理"></a>算法原理</h2><p>首先判断这个数是不是质数，是的话就没有分解的必要了，这里用到的是Miller-Rabin算法，其时间复杂度为O(slog3n)</p><h3 id="Miller-Rabin模板"><a href="#Miller-Rabin模板" class="headerlink" title="Miller-Rabin模板"></a>Miller-Rabin模板</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">65</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> n, x[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">multi</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a, <span class="keyword">long</span> <span class="keyword">long</span> b, <span class="keyword">long</span> <span class="keyword">long</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(b) &#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1L</span>L) ans = (ans+a)%p;</span><br><span class="line">        a = (a+a)%p;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">qpow</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a, <span class="keyword">long</span> <span class="keyword">long</span> b, <span class="keyword">long</span> <span class="keyword">long</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b) &#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1L</span>L) ans = multi(ans, a, p);</span><br><span class="line">        a = multi(a, a, p);</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Miller_Rabin</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">2</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">int</span> s = <span class="number">20</span>, i, t = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> u = n<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(!(u &amp; <span class="number">1</span>)) &#123;</span><br><span class="line">        t++;</span><br><span class="line">        u &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(s--) &#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> a = rand()%(n<span class="number">-2</span>)+<span class="number">2</span>;</span><br><span class="line">        x[<span class="number">0</span>] = qpow(a, u, n);</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= t; i++) &#123;</span><br><span class="line">            x[i] = multi(x[i<span class="number">-1</span>], x[i<span class="number">-1</span>], n);</span><br><span class="line">            <span class="keyword">if</span>(x[i] == <span class="number">1</span> &amp;&amp; x[i<span class="number">-1</span>] != <span class="number">1</span> &amp;&amp; x[i<span class="number">-1</span>] != n<span class="number">-1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(x[t] != <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后这一步就很迷了，我们任取一个数它是n的质因数的概率很低，但是如果我们任取两个数x1和x2，他们差值是n的因数的概率却很大的提高了，这也就是所谓生日悖论（30个人中有两个人的生日在同一天的几率高达50%，60个人中更是高达99%，是不是很神奇(￣︶￣*))）这也就是这个算法的核心思想，通过随机出x1，并由x1产生x2，判断gcd(|x1-x2|, n)是否为1，如果为1就成功找到一个因子，接下来分解|x1-x2|和n/|x1-x2|即可，否则就更换x2知道出现循环，表示x1选择有误，更换x1。</p><h2 id="kuang-bin模板"><a href="#kuang-bin模板" class="headerlink" title="kuang_bin模板"></a>kuang_bin模板</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//****************************************************************</span></span><br><span class="line"><span class="comment">// Miller_Rabin 算法进行素数测试</span></span><br><span class="line"><span class="comment">//速度快，而且可以判断 &lt;2^63的数</span></span><br><span class="line"><span class="comment">//****************************************************************</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> S=<span class="number">20</span>;<span class="comment">//随机算法判定次数，S越大，判错概率越小</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//计算 (a*b)%c.   a,b都是long long的数，直接相乘可能溢出的</span></span><br><span class="line"><span class="comment">//  a,b,c &lt;2^63</span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">mult_mod</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a,<span class="keyword">long</span> <span class="keyword">long</span> b,<span class="keyword">long</span> <span class="keyword">long</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    a%=c;</span><br><span class="line">    b%=c;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ret=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>)&#123;ret+=a;ret%=c;&#125;</span><br><span class="line">        a&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(a&gt;=c)a%=c;</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//计算  x^n %c</span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">pow_mod</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x,<span class="keyword">long</span> <span class="keyword">long</span> n,<span class="keyword">long</span> <span class="keyword">long</span> mod)</span><span class="comment">//x^n%c</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>)<span class="keyword">return</span> x%mod;</span><br><span class="line">    x%=mod;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> tmp=x;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ret=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(n&amp;<span class="number">1</span>) ret=mult_mod(ret,tmp,mod);</span><br><span class="line">        tmp=mult_mod(tmp,tmp,mod);</span><br><span class="line">        n&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//以a为基,n-1=x*2^t      a^(n-1)=1(mod n)  验证n是不是合数</span></span><br><span class="line"><span class="comment">//一定是合数返回true,不一定返回false</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a,<span class="keyword">long</span> <span class="keyword">long</span> n,<span class="keyword">long</span> <span class="keyword">long</span> x,<span class="keyword">long</span> <span class="keyword">long</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ret=pow_mod(a,x,n);</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> last=ret;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=t;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ret=mult_mod(ret,ret,n);</span><br><span class="line">        <span class="keyword">if</span>(ret==<span class="number">1</span>&amp;&amp;last!=<span class="number">1</span>&amp;&amp;last!=n<span class="number">-1</span>) <span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//合数</span></span><br><span class="line">        last=ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ret!=<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Miller_Rabin()算法素数判定</span></span><br><span class="line"><span class="comment">//是素数返回true.(可能是伪素数，但概率极小)</span></span><br><span class="line"><span class="comment">//合数返回false;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Miller_Rabin</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;<span class="number">2</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">2</span>)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span>((n&amp;<span class="number">1</span>)==<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//偶数</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> x=n<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>((x&amp;<span class="number">1</span>)==<span class="number">0</span>)&#123;x&gt;&gt;=<span class="number">1</span>;t++;&#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;S;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> a=rand()%(n<span class="number">-1</span>)+<span class="number">1</span>;<span class="comment">//rand()需要stdlib.h头文件</span></span><br><span class="line">        <span class="keyword">if</span>(check(a,n,x,t))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//合数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//************************************************</span></span><br><span class="line"><span class="comment">//pollard_rho 算法进行质因数分解</span></span><br><span class="line"><span class="comment">//************************************************</span></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> factor[<span class="number">100</span>];<span class="comment">//质因数分解结果（刚返回时是无序的）</span></span><br><span class="line"><span class="keyword">int</span> tol;<span class="comment">//质因数的个数。数组小标从0开始</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">gcd</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a,<span class="keyword">long</span> <span class="keyword">long</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a==<span class="number">0</span>)<span class="keyword">return</span> <span class="number">1</span>;<span class="comment">//???????</span></span><br><span class="line">    <span class="keyword">if</span>(a&lt;<span class="number">0</span>) <span class="keyword">return</span> gcd(-a,b);</span><br><span class="line">    <span class="keyword">while</span>(b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> t=a%b;</span><br><span class="line">        a=b;</span><br><span class="line">        b=t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">Pollard_rho</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x,<span class="keyword">long</span> <span class="keyword">long</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> i=<span class="number">1</span>,k=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> x0=rand()%x;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> y=x0;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        i++;</span><br><span class="line">        x0=(mult_mod(x0,x0,x)+c)%x;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> d=gcd(y-x0,x);</span><br><span class="line">        <span class="keyword">if</span>(d!=<span class="number">1</span>&amp;&amp;d!=x) <span class="keyword">return</span> d;</span><br><span class="line">        <span class="keyword">if</span>(y==x0) <span class="keyword">return</span> x;</span><br><span class="line">        <span class="keyword">if</span>(i==k)&#123;y=x0;k+=k;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//对n进行素因子分解</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">findfac</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Miller_Rabin(n))<span class="comment">//素数</span></span><br><span class="line">    &#123;</span><br><span class="line">        factor[tol++]=n;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> p=n;</span><br><span class="line">    <span class="keyword">while</span>(p&gt;=n)p=Pollard_rho(p,rand()%(n<span class="number">-1</span>)+<span class="number">1</span>);</span><br><span class="line">    findfac(p);</span><br><span class="line">    findfac(n/p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//srand(time(NULL));//需要time.h头文件//POJ上G++不能加这句话</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%I64d"</span>,&amp;n)!=EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        tol=<span class="number">0</span>;</span><br><span class="line">        findfac(n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;tol;i++)<span class="built_in">printf</span>(<span class="string">"%I64d "</span>,factor[i]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        <span class="keyword">if</span>(Miller_Rabin(n))<span class="built_in">printf</span>(<span class="string">"Yes\n"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"No\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Hint&quot;&gt;&lt;a href=&quot;#Hint&quot; class=&quot;headerlink&quot; title=&quot;Hint&quot;&gt;&lt;/a&gt;Hint&lt;/h2&gt;&lt;p&gt;这一篇要说的就是这个神奇的算法Pollard rho质因数分解&lt;br&gt;一般来说质因数分解用的都是O(n^1/2)的算法，但这个神奇的算法的时间复杂度可以达到O(n^1/4)，这就意味着它可以对一个1e18的数据进行质因数分解，目前学到的算法很少能达到这个时间复杂度，令人惊叹┑(￣Д ￣)┍&lt;/p&gt;
    
    </summary>
    
      <category term="基础数论" scheme="https://weibolu.online/categories/%E5%9F%BA%E7%A1%80%E6%95%B0%E8%AE%BA/"/>
    
    
      <category term="ACM模板" scheme="https://weibolu.online/tags/ACM%E6%A8%A1%E6%9D%BF/"/>
    
      <category term="基础数论" scheme="https://weibolu.online/tags/%E5%9F%BA%E7%A1%80%E6%95%B0%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>dp4 —— 数位DP</title>
    <link href="https://weibolu.online/2019/07/17/dp4%20%E2%80%94%E2%80%94%20%E6%95%B0%E4%BD%8DDP/"/>
    <id>https://weibolu.online/2019/07/17/dp4 —— 数位DP/</id>
    <published>2019-07-17T14:44:07.000Z</published>
    <updated>2019-08-12T03:41:33.162Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h2><p>常见用途即求给定范围内满足特定条件的数字（比如求含49的数字），如直接枚举会超时。而数位DP即通过数字每一位数的可能取值来枚举，用数字的一些标志构造DP数组，然后进行记忆化搜索，就可以降低时间复杂度（￣︶￣）↗　。</p><a id="more"></a><h2 id="传送门"><a href="#传送门" class="headerlink" title="传送门"></a>传送门</h2><p>[数位DP详解/blog.csdn.net/wust_zzwh/article/details/52100392)</p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=3652" target="_blank" rel="noopener">HDU3652</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> up[<span class="number">45</span>];</span><br><span class="line">ll dp[<span class="number">15</span>][<span class="number">14</span>][<span class="number">15</span>];          <span class="comment">//根据三个维度构造DP数组</span></span><br><span class="line"><span class="keyword">int</span> len;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> mod, <span class="keyword">int</span> have, <span class="keyword">int</span> lim)</span>     <span class="comment">//记忆花搜索，pos为搜到的位数，mod为当前求模结果，have为搜索13的位数，lim为判断是否超出数据最大界限</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(pos == <span class="number">0</span>) <span class="keyword">return</span> ll(have == <span class="number">2</span> &amp;&amp; mod == <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(!lim &amp;&amp; dp[pos][mod][have] != <span class="number">-1</span>) <span class="keyword">return</span> dp[pos][mod][have];</span><br><span class="line">    <span class="keyword">int</span> tp = lim ? up[pos]:<span class="number">9</span>;</span><br><span class="line">    ll ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= tp; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> modd, havv, limm;</span><br><span class="line">        modd = ((mod*<span class="number">10</span>)%<span class="number">13</span>+i) % <span class="number">13</span>;</span><br><span class="line">        <span class="keyword">if</span>(have == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">1</span>) havv = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> havv = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(have == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">1</span>) havv = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(i == <span class="number">3</span>) havv = <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">else</span> havv = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(have == <span class="number">2</span>) havv = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(lim &amp;&amp; i == up[pos]) limm = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> limm = <span class="number">0</span>;</span><br><span class="line">        ans += dfs(pos<span class="number">-1</span>, modd, havv, limm);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!lim) <span class="keyword">return</span> dp[pos][mod][have] = ans;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dp, <span class="number">-1</span>, <span class="keyword">sizeof</span> dp);</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n &amp;&amp; n) &#123;</span><br><span class="line">        len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(n) &#123;</span><br><span class="line">            up[++len] = n%<span class="number">10</span>;           <span class="comment">//将各个数位分解出来</span></span><br><span class="line">            n = n/<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; dfs(len, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Hint&quot;&gt;&lt;a href=&quot;#Hint&quot; class=&quot;headerlink&quot; title=&quot;Hint&quot;&gt;&lt;/a&gt;Hint&lt;/h2&gt;&lt;p&gt;常见用途即求给定范围内满足特定条件的数字（比如求含49的数字），如直接枚举会超时。而数位DP即通过数字每一位数的可能取值来枚举，用数字的一些标志构造DP数组，然后进行记忆化搜索，就可以降低时间复杂度（￣︶￣）↗　。&lt;/p&gt;
    
    </summary>
    
      <category term="动态规划" scheme="https://weibolu.online/categories/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    
      <category term="DP" scheme="https://weibolu.online/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>图论1 —— 匈牙利算法和KM算法</title>
    <link href="https://weibolu.online/2019/07/16/%E5%9B%BE%E8%AE%BA1%20%E2%80%94%E2%80%94%20%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95%E5%92%8CKM%E7%AE%97%E6%B3%95/"/>
    <id>https://weibolu.online/2019/07/16/图论1 —— 匈牙利算法和KM算法/</id>
    <published>2019-07-16T02:12:25.000Z</published>
    <updated>2019-08-12T02:57:11.633Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h2><h3 id="匈牙利算法"><a href="#匈牙利算法" class="headerlink" title="匈牙利算法"></a>匈牙利算法</h3><p>用来求解二分图的最大匹配，即使匹配中的边数最大；<br>时间复杂度为O(VE)   V为二分图左边的顶点数，E为二分图中边的数目。</p><h3 id="KM算法"><a href="#KM算法" class="headerlink" title="KM算法"></a>KM算法</h3><p>KM算法则是用来求二分图的最佳完美匹配，即给边加上权值后求匹配中权值和的最大值;<br>时间复杂度为O(n^4)可以优化到O(n^3),不过实际上效果相差并不大。</p><p>这两个问题也可以通过网络流来求解，但没有这两个算法容易写。</p><a id="more"></a><h2 id="传送门"><a href="#传送门" class="headerlink" title="传送门"></a>传送门</h2><p>关于这两个算法的讲解也比较多，就从网上找了比较好的解析。<br><a href="https://blog.csdn.net/dengheCSDN/article/details/77619308" target="_blank" rel="noopener">匈牙利算法</a></p><p><a href="https://www.cnblogs.com/Lanly/p/6291214.html" target="_blank" rel="noopener">KM算法</a></p><h3 id="使用技巧"><a href="#使用技巧" class="headerlink" title="使用技巧"></a>使用技巧</h3><p>KM算法中如果给定的二分图不是完全二分图可以将未相连的点相连并将权值置0；</p><p>KM算法中如果求匹配权值的最小值，可以将权值取相反数，求出结果后再取相反数。</p><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><h3 id="匈牙利算法-1"><a href="#匈牙利算法-1" class="headerlink" title="匈牙利算法"></a>匈牙利算法</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">510</span>;</span><br><span class="line"><span class="keyword">int</span> mapa[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> link[maxn], visx[maxn], visy[maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> k, m, n;  <span class="comment">//k表示边数，m和n分别表示两组顶点数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ff</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    visx[x] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(visy[i] == <span class="number">0</span> &amp;&amp; mapa[x][i]) &#123;</span><br><span class="line">            visy[i] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(link[i] == <span class="number">0</span> || ff(link[i])) &#123;</span><br><span class="line">                link[i] = x;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t1, t2;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; k &amp;&amp; k) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; m &gt;&gt; n;</span><br><span class="line">        <span class="built_in">memset</span>(link, <span class="number">0</span>, <span class="keyword">sizeof</span> link);</span><br><span class="line">        <span class="built_in">memset</span>(mapa, <span class="number">0</span>, <span class="keyword">sizeof</span> mapa);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i++) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; t1 &gt;&gt; t2;</span><br><span class="line">            mapa[t1][t2] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">            <span class="built_in">memset</span>(visy, <span class="number">0</span>, <span class="keyword">sizeof</span> visy);</span><br><span class="line">            <span class="keyword">if</span>(ff(i)) ans++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="KM算法O-n-4"><a href="#KM算法O-n-4" class="headerlink" title="KM算法O(n^4)"></a>KM算法O(n^4)</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">305</span>;</span><br><span class="line"><span class="keyword">int</span> w[maxn][maxn];   <span class="comment">//w记录边的权重值</span></span><br><span class="line"><span class="keyword">int</span> line[maxn], visx[maxn], visy[maxn], cx[maxn], cy[maxn];</span><br><span class="line"><span class="keyword">int</span> n, m， ans;       <span class="comment">//m和n分别表示两组顶点的个数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ff</span><span class="params">(<span class="keyword">int</span> x)</span>      <span class="comment">//匈牙利算法的搜索模块</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    visx[x] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(visy[i] == <span class="number">0</span> &amp;&amp; cx[x]+cy[i] == w[x][i]) &#123;</span><br><span class="line">            visy[i] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(line[i] == <span class="number">0</span> || ff(line[i])) &#123;</span><br><span class="line">                line[i] = x;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">km</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> d = inf;</span><br><span class="line">            <span class="built_in">memset</span>(visx, <span class="number">0</span>, <span class="keyword">sizeof</span> visx);</span><br><span class="line">            <span class="built_in">memset</span>(visy, <span class="number">0</span>, <span class="keyword">sizeof</span> visy);</span><br><span class="line">            <span class="keyword">if</span>(ff(i)) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) <span class="keyword">if</span>(visx[j])&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= m; k++) <span class="keyword">if</span>(!visy[k])</span><br><span class="line">                    d = min(d, cx[j]+cy[k]-w[j][k]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(d == inf) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) <span class="keyword">if</span>(visx[j])</span><br><span class="line">                cx[j] -= d;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++) <span class="keyword">if</span>(visy[j])</span><br><span class="line">                cy[j] += d;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">        ans += w[line[i]][i];</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m) &#123;</span><br><span class="line">        <span class="built_in">memset</span>(cx, <span class="number">0</span>, <span class="keyword">sizeof</span> cx);</span><br><span class="line">        <span class="built_in">memset</span>(cy, <span class="number">0</span>, <span class="keyword">sizeof</span> cy);</span><br><span class="line">        <span class="built_in">memset</span>(w, <span class="number">0</span>, <span class="keyword">sizeof</span> w);</span><br><span class="line">        <span class="built_in">memset</span>(line, <span class="number">0</span>, <span class="keyword">sizeof</span> line);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> d = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">                <span class="built_in">cin</span> &gt;&gt; w[i][j];</span><br><span class="line">                d = max(w[i][j], d);</span><br><span class="line">            &#125;</span><br><span class="line">            cx[i] = d;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; km() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="KM算法O-n-3"><a href="#KM算法O-n-3" class="headerlink" title="KM算法O(n^3)"></a>KM算法O(n^3)</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">305</span>;</span><br><span class="line"><span class="keyword">int</span> w[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> line[maxn], visx[maxn], visy[maxn], cx[maxn], cy[maxn];</span><br><span class="line"><span class="keyword">int</span> slack[maxn];  <span class="comment">//优化的关键存下delt的值，便于之后找到最小的delt</span></span><br><span class="line"><span class="keyword">int</span> n, ans, m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ff</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    visx[x] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> delt;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        delt = cx[x] + cy[i] - w[x][i];</span><br><span class="line">        <span class="keyword">if</span>(visy[i] == <span class="number">0</span> &amp;&amp; cx[x]+cy[i] == w[x][i]) &#123;</span><br><span class="line">            visy[i] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(line[i] == <span class="number">0</span> || ff(line[i])) &#123;</span><br><span class="line">                line[i] = x;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(slack[i] &gt; delt)</span><br><span class="line">            slack[i] = delt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">km</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> d = inf;</span><br><span class="line">            <span class="built_in">memset</span>(visx, <span class="number">0</span>, <span class="keyword">sizeof</span> visx);</span><br><span class="line">            <span class="built_in">memset</span>(visy, <span class="number">0</span>, <span class="keyword">sizeof</span> visy);</span><br><span class="line">            <span class="built_in">memset</span>(slack, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> slack);</span><br><span class="line">            <span class="keyword">if</span>(ff(i)) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++) <span class="keyword">if</span>(!visy[j] &amp;&amp; d &gt; slack[j])</span><br><span class="line">                d = slack[j];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) <span class="keyword">if</span>(visx[j])</span><br><span class="line">                cx[j] -= d;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">                <span class="keyword">if</span>(visy[j]) cy[j] += d;</span><br><span class="line">                <span class="keyword">else</span> slack[j] -= d;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">        ans += w[line[i]][i];</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m) &#123;</span><br><span class="line">        <span class="built_in">memset</span>(cx, <span class="number">0</span>, <span class="keyword">sizeof</span> cx);</span><br><span class="line">        <span class="built_in">memset</span>(cy, <span class="number">0</span>, <span class="keyword">sizeof</span> cy);</span><br><span class="line">        <span class="built_in">memset</span>(w, <span class="number">0</span>, <span class="keyword">sizeof</span> w);</span><br><span class="line">        <span class="built_in">memset</span>(line, <span class="number">0</span>, <span class="keyword">sizeof</span> line);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> d = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">                <span class="built_in">cin</span> &gt;&gt; w[i][j];</span><br><span class="line">                d = max(w[i][j], d);</span><br><span class="line">            &#125;</span><br><span class="line">            cx[i] = d;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; km() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Hint&quot;&gt;&lt;a href=&quot;#Hint&quot; class=&quot;headerlink&quot; title=&quot;Hint&quot;&gt;&lt;/a&gt;Hint&lt;/h2&gt;&lt;h3 id=&quot;匈牙利算法&quot;&gt;&lt;a href=&quot;#匈牙利算法&quot; class=&quot;headerlink&quot; title=&quot;匈牙利算法&quot;&gt;&lt;/a&gt;匈牙利算法&lt;/h3&gt;&lt;p&gt;用来求解二分图的最大匹配，即使匹配中的边数最大；&lt;br&gt;时间复杂度为O(VE)   V为二分图左边的顶点数，E为二分图中边的数目。&lt;/p&gt;
&lt;h3 id=&quot;KM算法&quot;&gt;&lt;a href=&quot;#KM算法&quot; class=&quot;headerlink&quot; title=&quot;KM算法&quot;&gt;&lt;/a&gt;KM算法&lt;/h3&gt;&lt;p&gt;KM算法则是用来求二分图的最佳完美匹配，即给边加上权值后求匹配中权值和的最大值;&lt;br&gt;时间复杂度为O(n^4)可以优化到O(n^3),不过实际上效果相差并不大。&lt;/p&gt;
&lt;p&gt;这两个问题也可以通过网络流来求解，但没有这两个算法容易写。&lt;/p&gt;
    
    </summary>
    
      <category term="基础图论" scheme="https://weibolu.online/categories/%E5%9F%BA%E7%A1%80%E5%9B%BE%E8%AE%BA/"/>
    
    
      <category term="ACM模板" scheme="https://weibolu.online/tags/ACM%E6%A8%A1%E6%9D%BF/"/>
    
      <category term="基础图论" scheme="https://weibolu.online/tags/%E5%9F%BA%E7%A1%80%E5%9B%BE%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>dp3 —— LIS与LCS问题</title>
    <link href="https://weibolu.online/2019/06/13/dp3%20%E2%80%94%E2%80%94%20LIS%E4%B8%8ELCS%E9%97%AE%E9%A2%98/"/>
    <id>https://weibolu.online/2019/06/13/dp3 —— LIS与LCS问题/</id>
    <published>2019-06-13T04:44:07.000Z</published>
    <updated>2019-06-26T06:53:50.002Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="动态规划" scheme="https://weibolu.online/categories/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    
      <category term="DP" scheme="https://weibolu.online/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>数据结构5 —— 划分树</title>
    <link href="https://weibolu.online/2019/06/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%845%20%E2%80%94%E2%80%94%20%E5%88%92%E5%88%86%E6%A0%91/"/>
    <id>https://weibolu.online/2019/06/11/数据结构5 —— 划分树/</id>
    <published>2019-06-11T03:46:28.000Z</published>
    <updated>2019-08-12T03:18:26.938Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h2><p>思想与线段树类似，也是一种十分好用的数据结构，可以用于求区间内第k大值。</p><a id="more"></a><h2 id="划分树"><a href="#划分树" class="headerlink" title="划分树"></a>划分树</h2><p>划分树是一种基于线段树的数据结构。主要用于快速求出(在log(n)的时间复杂度内）序列区间的第k大值。<br>　　查找整序列的第k大值往往采用。然而此方法会破坏原序列，并且需要O(n)的时间复杂度。抑或使用二叉平衡树进行维护，此方法每次查找时间复杂度仅为O(logn)。然而此方法丢失了原序列的顺序信息，无法查找出某区间内的第k大值。<br>　　划分树的基本思想就是对于某个区间，把它划分成两个子区间，左边区间的数小于右边区间的数。查找的时候通过记录进入左子树的数的个数，确定下一个查找区间，最后范围缩小到1，就找到了。<br>　　划分树定义为，它的每一个节点保存区间[lft,rht]所有元素，元素顺序与原数组（输入）相同，但是，两个子树的元素为该节点所有元素排序后(rht-lft+1)/2个进入左子树，其余的到右子树，同时维护一个num域，num[i]表示lft-&gt;i这个点有多少个进入了左子树。</p><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">100010</span>;</span><br><span class="line"><span class="keyword">int</span> tree[<span class="number">30</span>][MAXN];<span class="comment">//表示每层每个位置的值</span></span><br><span class="line"><span class="keyword">int</span> sorted[MAXN];<span class="comment">//已经排序的数</span></span><br><span class="line"><span class="keyword">int</span> toleft[<span class="number">30</span>][MAXN];<span class="comment">//toleft[p][i]表示第i层从1到i有多少个数分入左边</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> le,<span class="keyword">int</span> r,<span class="keyword">int</span> dep)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(le==r)<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid=(le+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> same=mid-le+<span class="number">1</span>;<span class="comment">//表示等于中间值而且被分入左边的个数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=le;i&lt;=r;i++)</span><br><span class="line">      <span class="keyword">if</span>(tree[dep][i]&lt;sorted[mid])</span><br><span class="line">         same--;</span><br><span class="line">    <span class="keyword">int</span> lpos=le;</span><br><span class="line">    <span class="keyword">int</span> rpos=mid+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=le;i&lt;=r;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(tree[dep][i]&lt;sorted[mid])<span class="comment">//比中间的数小，分入左边</span></span><br><span class="line">             tree[dep+<span class="number">1</span>][lpos++]=tree[dep][i];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(tree[dep][i]==sorted[mid]&amp;&amp;same&gt;<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            tree[dep+<span class="number">1</span>][lpos++]=tree[dep][i];</span><br><span class="line">            same--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>  <span class="comment">//比中间值大分入右边</span></span><br><span class="line">            tree[dep+<span class="number">1</span>][rpos++]=tree[dep][i];</span><br><span class="line">        toleft[dep][i]=toleft[dep][le<span class="number">-1</span>]+lpos-le;<span class="comment">//从1到i放左边的个数</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    build(le,mid,dep+<span class="number">1</span>);</span><br><span class="line">    build(mid+<span class="number">1</span>,r,dep+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//查询区间第k大的数，[L,R]是大区间，[le,r]是要查询的小区间</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> le,<span class="keyword">int</span> r,<span class="keyword">int</span> dep,<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(le==r)<span class="keyword">return</span> tree[dep][le];</span><br><span class="line">    <span class="keyword">int</span> mid=(L+R)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> cnt=toleft[dep][r]-toleft[dep][le<span class="number">-1</span>];  <span class="comment">//[le,r]中位于左边的个数</span></span><br><span class="line">    <span class="keyword">if</span>(cnt&gt;=k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//L+要查询的区间前被放在左边的个数</span></span><br><span class="line">        <span class="keyword">int</span> newl=L+toleft[dep][le<span class="number">-1</span>]-toleft[dep][L<span class="number">-1</span>];</span><br><span class="line">        <span class="comment">//左端点加上查询区间会被放在左边的个数</span></span><br><span class="line">        <span class="keyword">int</span> newr=newl+cnt<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> query(L,mid,newl,newr,dep+<span class="number">1</span>,k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">         <span class="keyword">int</span> newr=r+toleft[dep][R]-toleft[dep][r];</span><br><span class="line">         <span class="keyword">int</span> newl=newr-(r-le-cnt);</span><br><span class="line">         <span class="keyword">return</span> query(mid+<span class="number">1</span>,R,newl,newr,dep+<span class="number">1</span>,k-cnt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;<span class="built_in">cin</span> &gt;&gt; tree[<span class="number">0</span>][i]; sorted[i] = tree[<span class="number">0</span>][i];&#125;</span><br><span class="line">        sort(sorted+<span class="number">1</span>, sorted+n+<span class="number">1</span>);</span><br><span class="line">        build(<span class="number">1</span>, n, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">int</span> le, r, k;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; le &gt;&gt; r &gt;&gt; k;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; query(<span class="number">1</span>, n, le, r, <span class="number">0</span>, k) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Hint&quot;&gt;&lt;a href=&quot;#Hint&quot; class=&quot;headerlink&quot; title=&quot;Hint&quot;&gt;&lt;/a&gt;Hint&lt;/h2&gt;&lt;p&gt;思想与线段树类似，也是一种十分好用的数据结构，可以用于求区间内第k大值。&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构" scheme="https://weibolu.online/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="ACM模板" scheme="https://weibolu.online/tags/ACM%E6%A8%A1%E6%9D%BF/"/>
    
      <category term="数据结构" scheme="https://weibolu.online/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>ACM技巧3 —— __int128的使用</title>
    <link href="https://weibolu.online/2019/06/10/ACM%E6%8A%80%E5%B7%A73%20%E2%80%94%E2%80%94%20_int128%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://weibolu.online/2019/06/10/ACM技巧3 —— _int128的使用/</id>
    <published>2019-06-10T15:31:28.000Z</published>
    <updated>2019-08-16T14:58:25.093Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h2><p>__int128是128位2进制数据，但要自己写输入输出函数，在此记录下。</p><a id="more"></a><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//输入</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">scan</span><span class="params">(__int128 &amp;x)</span><span class="comment">//输入</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> f = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    <span class="keyword">if</span>((ch = getchar()) == <span class="string">'-'</span>) f = -f;</span><br><span class="line">    <span class="keyword">else</span> x = x*<span class="number">10</span> + ch-<span class="string">'0'</span>;</span><br><span class="line">    <span class="keyword">while</span>((ch = getchar()) &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)</span><br><span class="line">        x = x*<span class="number">10</span> + ch-<span class="string">'0'</span>;</span><br><span class="line">    x *= f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(__int128 x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>), x = -x;</span><br><span class="line">    print(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Hint&quot;&gt;&lt;a href=&quot;#Hint&quot; class=&quot;headerlink&quot; title=&quot;Hint&quot;&gt;&lt;/a&gt;Hint&lt;/h2&gt;&lt;p&gt;__int128是128位2进制数据，但要自己写输入输出函数，在此记录下。&lt;/p&gt;
    
    </summary>
    
      <category term="ACM技巧" scheme="https://weibolu.online/categories/ACM%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="ACM模板" scheme="https://weibolu.online/tags/ACM%E6%A8%A1%E6%9D%BF/"/>
    
  </entry>
  
  <entry>
    <title>数论6 —— 组合数的性质</title>
    <link href="https://weibolu.online/2019/06/05/%E6%95%B0%E8%AE%BA6%20%E2%80%94%E2%80%94%20%E7%BB%84%E5%90%88%E6%95%B0%E7%9A%84%E6%80%A7%E8%B4%A8/"/>
    <id>https://weibolu.online/2019/06/05/数论6 —— 组合数的性质/</id>
    <published>2019-06-05T02:29:25.000Z</published>
    <updated>2019-08-12T03:28:50.375Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="基础数论" scheme="https://weibolu.online/categories/%E5%9F%BA%E7%A1%80%E6%95%B0%E8%AE%BA/"/>
    
    
      <category term="ACM模板" scheme="https://weibolu.online/tags/ACM%E6%A8%A1%E6%9D%BF/"/>
    
      <category term="基础数论" scheme="https://weibolu.online/tags/%E5%9F%BA%E7%A1%80%E6%95%B0%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>矩阵操作与线性代数2 —— 求矩阵的秩</title>
    <link href="https://weibolu.online/2019/05/19/%E7%9F%A9%E9%98%B5%E6%93%8D%E4%BD%9C%E4%B8%8E%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B02%20%E2%80%94%E2%80%94%20%E6%B1%82%E7%9F%A9%E9%98%B5%E7%9A%84%E7%A7%A9/"/>
    <id>https://weibolu.online/2019/05/19/矩阵操作与线性代数2 —— 求矩阵的秩/</id>
    <published>2019-05-19T00:31:03.000Z</published>
    <updated>2019-08-12T03:05:48.678Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h2><p>线性代数里常见的操作，这里记下它的两种代码实现。</p><a id="more"></a><p>模板题 hdu6507</p><h2 id="模板1"><a href="#模板1" class="headerlink" title="模板1"></a>模板1</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> long long ll</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span> + <span class="number">100</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">50</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> eps = <span class="number">1e-6</span>;</span><br><span class="line"><span class="keyword">int</span> a[N][N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Rank</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, k, r, u;</span><br><span class="line">    <span class="keyword">while</span>(i &lt; n &amp;&amp; j &lt; m) &#123;</span><br><span class="line">        r = i;</span><br><span class="line">        <span class="keyword">for</span>(k = i; k &lt; m; k++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[k][j]) &#123;</span><br><span class="line">                r = k;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(a[r][j]) &#123;</span><br><span class="line">            <span class="keyword">if</span>(r != i) &#123;</span><br><span class="line">                <span class="keyword">for</span>(k = <span class="number">0</span>; k &lt;= n; k++) &#123;</span><br><span class="line">                    swap(a[r][k], a[i][k]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(u = i+<span class="number">1</span>; u &lt; m; u++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(a[u][j]) &#123;</span><br><span class="line">                    <span class="keyword">for</span>(k = i; k &lt;= n; k++) &#123;</span><br><span class="line">                        a[u][k] ^= a[i][k];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ++i;</span><br><span class="line">        &#125;</span><br><span class="line">        ++j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m; </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, min(n*m, max(<span class="number">1</span>, Rank(n, m))*(n+m)));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="模板2（高斯消元）"><a href="#模板2（高斯消元）" class="headerlink" title="模板2（高斯消元）"></a>模板2（高斯消元）</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span> + <span class="number">100</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">50</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> eps = <span class="number">1e-6</span>;</span><br><span class="line"><span class="keyword">int</span> a[N][N];</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">xchgline</span><span class="params">(<span class="keyword">int</span> q, <span class="keyword">int</span> w, <span class="keyword">int</span> e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = e; i &lt;= m; i++) &#123;</span><br><span class="line">        swap(a[q][i], a[w][i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Rank</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> s = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>, j = <span class="number">1</span>; i &lt;= n &amp;&amp; j &lt;= m; i++, j++) &#123;</span><br><span class="line">        <span class="keyword">int</span> chk = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> v = i; v &lt;= n; v++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[v][j] != <span class="number">0</span>) &#123;</span><br><span class="line">                chk = v;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(chk == <span class="number">0</span>) i--;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            xchgline(chk, i, j);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> w = i+<span class="number">1</span>; w &lt;= n; w++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(a[w][j] != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">int</span> g = __gcd(a[w][j], a[i][j]);</span><br><span class="line">                    <span class="keyword">int</span> pa = a[i][j]/g, pb = a[w][j]/g;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> z = j; z &lt;= m; z++) &#123;</span><br><span class="line">                        a[w][z] = a[w][z]*pa-a[i][z]*pb;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            s++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, min(n*m, max(<span class="number">1</span>, Rank(n, m))*(n+m)));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Hint&quot;&gt;&lt;a href=&quot;#Hint&quot; class=&quot;headerlink&quot; title=&quot;Hint&quot;&gt;&lt;/a&gt;Hint&lt;/h2&gt;&lt;p&gt;线性代数里常见的操作，这里记下它的两种代码实现。&lt;/p&gt;
    
    </summary>
    
      <category term="矩阵算法" scheme="https://weibolu.online/categories/%E7%9F%A9%E9%98%B5%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="ACM模板" scheme="https://weibolu.online/tags/ACM%E6%A8%A1%E6%9D%BF/"/>
    
  </entry>
  
  <entry>
    <title>矩阵操作与线性代数1 —— 矩阵快速幂</title>
    <link href="https://weibolu.online/2019/05/18/%E7%9F%A9%E9%98%B5%E6%93%8D%E4%BD%9C%E4%B8%8E%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B01%20%E2%80%94%E2%80%94%20%E7%9F%A9%E9%98%B5%E5%BF%AB%E9%80%9F%E5%B9%82/"/>
    <id>https://weibolu.online/2019/05/18/矩阵操作与线性代数1 —— 矩阵快速幂/</id>
    <published>2019-05-18T00:31:03.000Z</published>
    <updated>2019-08-12T03:04:18.036Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h2><p>在此记录下求矩阵快速幂的模板，其实就是快速幂的思想，只不过通过矩阵来实现了，可以用来快速求解斐波那契数列，也可以用来加速一些迭代公式的计算。<br><a id="more"></a></p><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">15</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">9973</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Mat</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="keyword">int</span> mat[maxn][maxn];</span><br><span class="line">    Mat()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(mat, <span class="number">0</span>, <span class="keyword">sizeof</span> mat);</span><br><span class="line">        n = m = maxn;</span><br><span class="line">    &#125;</span><br><span class="line">    Mat <span class="keyword">operator</span> * (Mat b)</span><br><span class="line">    &#123;</span><br><span class="line">        Mat c;</span><br><span class="line">        c = Mat();</span><br><span class="line">        c.n = n; c.m = b.m;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= b.m; j++) &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= m; k++) &#123;</span><br><span class="line">                    c.mat[i][j] += (mat[i][k]*b.mat[k][j]) % mod;</span><br><span class="line">                    c.mat[i][j] %= mod;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">    Mat <span class="keyword">operator</span> + (Mat b)</span><br><span class="line">    &#123;</span><br><span class="line">        Mat c;</span><br><span class="line">        c.n = n; c.m = m;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">            c.mat[i][j] = mat[i][j] + b.mat[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">in</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        n = x; m = y;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= x; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= y; j++) &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;mat[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">out</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d "</span>, mat[i][j]);</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">Mat <span class="title">quick_pow</span><span class="params">(Mat a, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Mat c;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    c = Mat();</span><br><span class="line">    c.n = a.n; c.m = a.m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= c.n; i++)</span><br><span class="line">        c.mat[i][i] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(k) &#123;</span><br><span class="line">        <span class="keyword">if</span>(k &amp; <span class="number">1</span>) c = c*a;</span><br><span class="line">        a = a*a;</span><br><span class="line">        k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="hint"><a href="#hint" class="headerlink" title="hint"></a>hint</h2><p>A + A^2 + A^3 + A^4 + A^5 + A^6 = (A + A^2 + A^3) + A^3*(A + A^2 + A^3)利用二分的思想划分，再用快速幂求解。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Hint&quot;&gt;&lt;a href=&quot;#Hint&quot; class=&quot;headerlink&quot; title=&quot;Hint&quot;&gt;&lt;/a&gt;Hint&lt;/h2&gt;&lt;p&gt;在此记录下求矩阵快速幂的模板，其实就是快速幂的思想，只不过通过矩阵来实现了，可以用来快速求解斐波那契数列，也可以用来加速一些迭代公式的计算。&lt;br&gt;
    
    </summary>
    
      <category term="矩阵算法" scheme="https://weibolu.online/categories/%E7%9F%A9%E9%98%B5%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="ACM模板" scheme="https://weibolu.online/tags/ACM%E6%A8%A1%E6%9D%BF/"/>
    
  </entry>
  
  <entry>
    <title>dp1 —— 背包问题总结</title>
    <link href="https://weibolu.online/2019/05/13/dp1%20%E2%80%94%E2%80%94%20%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    <id>https://weibolu.online/2019/05/13/dp1 —— 背包问题总结/</id>
    <published>2019-05-13T08:44:07.000Z</published>
    <updated>2019-05-14T11:01:37.635Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="动态规划" scheme="https://weibolu.online/categories/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    
      <category term="DP" scheme="https://weibolu.online/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>dp2 —— hdu 4281题解</title>
    <link href="https://weibolu.online/2019/05/13/dp2%20%E2%80%94%E2%80%94%20hdu%204281%E9%A2%98%E8%A7%A3/"/>
    <id>https://weibolu.online/2019/05/13/dp2 —— hdu 4281题解/</id>
    <published>2019-05-13T04:44:07.000Z</published>
    <updated>2019-08-12T03:40:42.141Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h2><p>hdu 4281一个用了状压思想的01背包问题，同时又涉及了多重旅行商问题（mTSP）。<br>在此记录下状压dp的思想吧。</p><a id="more"></a><h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=4281" target="_blank" rel="noopener">hdu 4281</a></p><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h3><p>给出n个点的坐标，其中第一点是教练出发点，其余每个点都有一个问题，教练解决这个问题需用时c[i]，一个教练用来解决问题的总时间为m。<br>求：<br>1.最少需要多少教练才可以解决所有问题？<br>2.假设教练无限多，问所有教练走过路程之和最小值是多少？（教练最终都要回到出发点）<br>两点间距离定义为： ceil(sqrt((xi - xj) ^ 2 + (yi - yj) ^ 2)). (ceil means rounding the number up, e.g. ceil(4.1) = 5)</p><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><p>第一问：<br>因为n的范围比较小，符合状压dp的特点，果断使用状压dp统计出一个教练可以解决的所有问题的组合存起来作为之后01背包的物品，然后做一次01背包即可。<br>第二问：<br>这个问题不太常见，先利用上一问中统计出来的组合求出一个教练走完这个组合的所走的距离，同时用dp的思想存下走不同组合以不同点结束时走的距离，并不断合并新的顶点。完成这个操作后再对所有状态的结果进行优化（dp思想），最终输出包含所有点的状态的结果。简单来说就是先用传统的旅行商问题跑一遍，但因为一个教练的时长有限，不能跑完所有点，所以最后再进行拓展将一个状态分给多个教练来跑，以此跑完所有点。<br>哈，写完感觉一头雾水，还是看代码中的注释吧。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-6</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> xx[<span class="number">20</span>], yy[<span class="number">20</span>], c[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> dp[(<span class="number">1</span>&lt;&lt;<span class="number">16</span>)], best[(<span class="number">1</span>&lt;&lt;<span class="number">16</span>)], en[<span class="number">16</span>][(<span class="number">1</span>&lt;&lt;<span class="number">16</span>)], dis[<span class="number">16</span>][<span class="number">16</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tt;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span>     <span class="comment">//求出任意两点的距离</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &lt; n; j++) &#123;</span><br><span class="line">            dis[i][j] = dis[j][i] = <span class="built_in">ceil</span>(<span class="built_in">sqrt</span>(<span class="keyword">double</span>(xx[i]-xx[j])*(xx[i]-xx[j]) + <span class="keyword">double</span>(yy[i]-yy[j])*(yy[i]-yy[j])));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dp, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dp);</span><br><span class="line">    tt.clear();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="keyword">if</span>(c[i] &gt; m) &#123;<span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="string">' '</span>; <span class="keyword">return</span> ;&#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; (<span class="number">1</span>&lt;&lt;n); i++) &#123;          <span class="comment">//通过对所有状态进行枚举，统计一个教练可以解决的问题的组合</span></span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i &amp; (<span class="number">1</span>&lt;&lt;j)) sum += c[j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(sum &lt;= m) tt.push_back(i);</span><br><span class="line">    &#125;</span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tt.size(); i++) &#123;        <span class="comment">//01背包</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = (<span class="number">1</span>&lt;&lt;n)<span class="number">-1</span>; j &gt;= <span class="number">0</span>; j--) <span class="keyword">if</span>((j+tt[i] &lt; (<span class="number">1</span>&lt;&lt;n)) &amp;&amp; ((j+tt[i]) == (j|tt[i])))&#123;</span><br><span class="line">            dp[j+tt[i]] = min(dp[j+tt[i]], dp[j] + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dp[(<span class="number">1</span>&lt;&lt;n)<span class="number">-1</span>] == inf) <span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; dp[(<span class="number">1</span>&lt;&lt;n)<span class="number">-1</span>] &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    en[<span class="number">0</span>][<span class="number">1</span>] = best[<span class="number">0</span>] = <span class="number">0</span>;     <span class="comment">//en[i][j]表示状态i以j为结尾时走过的长度，best[i]表示状态i最终回到出发点时走过的长度。</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tt.size(); i++) &#123;    <span class="comment">//先求出上一问中所有组合的最终结果。</span></span><br><span class="line">        <span class="keyword">int</span> t1 = tt[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(t1&amp;(<span class="number">1</span>&lt;&lt;j)) &#123;     <span class="comment">//如果状态t1中包含节点j，计算以j为结尾的最短长度。</span></span><br><span class="line">                best[t1] = min(best[t1], en[j][t1]+dis[j][<span class="number">0</span>]);</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; k++) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(!(t1&amp;(<span class="number">1</span>&lt;&lt;k))) &#123;      <span class="comment">//如果状态t1中不包含节点k，将k拓展进来。</span></span><br><span class="line">                        en[k][t1|(<span class="number">1</span>&lt;&lt;k)] = min(en[k][t1|(<span class="number">1</span>&lt;&lt;k)], en[j][t1]+dis[j][k]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; (<span class="number">1</span>&lt;&lt;n); i++) &#123;       <span class="comment">//对一个可回到终点的路径进行拆分，让多个教练来做并求出其最短长度。</span></span><br><span class="line">        <span class="keyword">if</span>(i &amp; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i&amp;(i<span class="number">-1</span>); j; j = i&amp;(j<span class="number">-1</span>))</span><br><span class="line">                best[i] = min(best[i], best[(i-j)|<span class="number">1</span>] + best[j|<span class="number">1</span>]);      <span class="comment">//一定要或上1，以此保证一定可以回到出发点。</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(best[(<span class="number">1</span>&lt;&lt;n)<span class="number">-1</span>] == inf) <span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; best[(<span class="number">1</span>&lt;&lt;n)<span class="number">-1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; xx[i] &gt;&gt; yy[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">memset</span>(best, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> best);</span><br><span class="line">        <span class="built_in">memset</span>(en, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> en);</span><br><span class="line">        init();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">cin</span> &gt;&gt; c[i];</span><br><span class="line">        solve1();                               <span class="comment">//解决第一问</span></span><br><span class="line">        solve2();                               <span class="comment">//解决第二问</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Hint&quot;&gt;&lt;a href=&quot;#Hint&quot; class=&quot;headerlink&quot; title=&quot;Hint&quot;&gt;&lt;/a&gt;Hint&lt;/h2&gt;&lt;p&gt;hdu 4281一个用了状压思想的01背包问题，同时又涉及了多重旅行商问题（mTSP）。&lt;br&gt;在此记录下状压dp的思想吧。&lt;/p&gt;
    
    </summary>
    
      <category term="动态规划" scheme="https://weibolu.online/categories/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    
      <category term="题解" scheme="https://weibolu.online/tags/%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>基础算法2 —— 快速幂</title>
    <link href="https://weibolu.online/2019/05/06/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%952%20%E2%80%94%E2%80%94%20%E5%BF%AB%E9%80%9F%E5%B9%82/"/>
    <id>https://weibolu.online/2019/05/06/基础算法2 —— 快速幂/</id>
    <published>2019-05-06T00:31:03.000Z</published>
    <updated>2019-09-11T03:52:05.293Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h2><p>很高效的算法，可以把求幂次降低到对数时间复杂度，思想也十分有趣。<br><a id="more"></a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">quick_pow</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> base = a, ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b) &#123;</span><br><span class="line">        <span class="keyword">if</span>(b &amp; <span class="number">1</span>) ans *= base;</span><br><span class="line">        base *= base;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Hint&quot;&gt;&lt;a href=&quot;#Hint&quot; class=&quot;headerlink&quot; title=&quot;Hint&quot;&gt;&lt;/a&gt;Hint&lt;/h2&gt;&lt;p&gt;很高效的算法，可以把求幂次降低到对数时间复杂度，思想也十分有趣。&lt;br&gt;
    
    </summary>
    
      <category term="ACM基础算法" scheme="https://weibolu.online/categories/ACM%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="ACM模板" scheme="https://weibolu.online/tags/ACM%E6%A8%A1%E6%9D%BF/"/>
    
  </entry>
  
  <entry>
    <title>数论5 —— FFT</title>
    <link href="https://weibolu.online/2019/05/05/%E6%95%B0%E8%AE%BA5%20%E2%80%94%E2%80%94%20FFT/"/>
    <id>https://weibolu.online/2019/05/05/数论5 —— FFT/</id>
    <published>2019-05-05T02:29:25.000Z</published>
    <updated>2019-08-12T03:27:17.886Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h2><p>FFT一直是个我觉得很难的地方，在此就记录下几个详解和模板吧。</p><a id="more"></a><h2 id="详解"><a href="#详解" class="headerlink" title="详解"></a>详解</h2><p><a href="https://blog.csdn.net/linwanglian1/article/details/56020221" target="_blank" rel="noopener">傅里叶变换详解</a><br><a href="https://zhuanlan.zhihu.com/p/40505277" target="_blank" rel="noopener">FFT详细解析</a><br><a href="https://blog.csdn.net/lymingha0/article/details/46581277" target="_blank" rel="noopener">FFT类封装和三个例题</a></p><h2 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h2><p>FFT即快速傅里叶变换<br>作用是把原来多项式乘法O(n²)优化到 O(nlogn)，思想也是分治的思想</p><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><p>网上大部分模板都是kuangbin的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Complex</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">double</span> r, i;</span><br><span class="line">    Complex(<span class="keyword">double</span> _r = <span class="number">0</span>, <span class="keyword">double</span> _i = <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        r = _r, i = _i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Complex <span class="keyword">operator</span> + (<span class="keyword">const</span> Complex &amp;b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> Complex(r+b.r, i+b.i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Complex <span class="keyword">operator</span> - (<span class="keyword">const</span> Complex &amp;b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> Complex(r-b.r, i-b.i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Complex <span class="keyword">operator</span> * (<span class="keyword">const</span> Complex &amp;b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> Complex(r*b.r-i*b.i, r*b.i+i*b.r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(Complex y[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, k;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>, j = len/<span class="number">2</span>; i &lt; len<span class="number">-1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(i &lt; j) swap(y[i], y[j]);</span><br><span class="line">        k = len/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span>(j &gt;= k) &#123;</span><br><span class="line">            j -= k;</span><br><span class="line">            k /= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(j &lt; k) j += k;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fft</span><span class="params">(Complex y[], <span class="keyword">int</span> len, <span class="keyword">int</span> on)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    change(y, len);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> h = <span class="number">2</span>; h &lt;= len; h &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="function">Complex <span class="title">wn</span><span class="params">(<span class="built_in">cos</span>(-on*<span class="number">2</span>*PI/h), <span class="built_in">sin</span>(-on*<span class="number">2</span>*PI/h))</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len; j += h) &#123;</span><br><span class="line">            <span class="function">Complex <span class="title">w</span><span class="params">(<span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = j; k &lt; j+h/<span class="number">2</span>; k++) &#123;</span><br><span class="line">                Complex u = y[k];</span><br><span class="line">                Complex t = w*y[k+h/<span class="number">2</span>];</span><br><span class="line">                y[k] = u+t;</span><br><span class="line">                y[k+h/<span class="number">2</span>] = u-t;</span><br><span class="line">                w = w*wn;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(on == <span class="number">-1</span>) <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">        y[i].r /= len;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Hint&quot;&gt;&lt;a href=&quot;#Hint&quot; class=&quot;headerlink&quot; title=&quot;Hint&quot;&gt;&lt;/a&gt;Hint&lt;/h2&gt;&lt;p&gt;FFT一直是个我觉得很难的地方，在此就记录下几个详解和模板吧。&lt;/p&gt;
    
    </summary>
    
      <category term="基础数论" scheme="https://weibolu.online/categories/%E5%9F%BA%E7%A1%80%E6%95%B0%E8%AE%BA/"/>
    
    
      <category term="ACM模板" scheme="https://weibolu.online/tags/ACM%E6%A8%A1%E6%9D%BF/"/>
    
      <category term="基础数论" scheme="https://weibolu.online/tags/%E5%9F%BA%E7%A1%80%E6%95%B0%E8%AE%BA/"/>
    
  </entry>
  
</feed>
