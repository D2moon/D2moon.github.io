<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>微波炉 de Blogs</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://weibolu.online/"/>
  <updated>2019-06-26T06:53:50.002Z</updated>
  <id>https://weibolu.online/</id>
  
  <author>
    <name>Wei Bolu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>dp3 —— LIS与LCS问题</title>
    <link href="https://weibolu.online/2019/06/13/dp3%20%E2%80%94%E2%80%94%20LIS%E4%B8%8ELCS%E9%97%AE%E9%A2%98/"/>
    <id>https://weibolu.online/2019/06/13/dp3 —— LIS与LCS问题/</id>
    <published>2019-06-13T04:44:07.000Z</published>
    <updated>2019-06-26T06:53:50.002Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="动态规划" scheme="https://weibolu.online/categories/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    
      <category term="DP" scheme="https://weibolu.online/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>数据结构5 —— 划分树</title>
    <link href="https://weibolu.online/2019/06/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%845%20%E2%80%94%E2%80%94%20%E5%88%92%E5%88%86%E6%A0%91/"/>
    <id>https://weibolu.online/2019/06/11/数据结构5 —— 划分树/</id>
    <published>2019-06-11T03:46:28.000Z</published>
    <updated>2019-07-14T16:26:45.272Z</updated>
    
    <content type="html"><![CDATA[<h2 id="hint"><a href="#hint" class="headerlink" title="hint"></a>hint</h2><p>用途：用于求区间内第k大值<br>缺点：不能进行更新操作</p><p>划分树是一种基于线段树的数据结构。主要用于快速求出(在log(n)的时间复杂度内）序列区间的第k大值。<br>　　查找整序列的第k大值往往采用。然而此方法会破坏原序列，并且需要O(n)的时间复杂度。抑或使用二叉平衡树进行维护，此方法每次查找时间复杂度仅为O(logn)。然而此方法丢失了原序列的顺序信息，无法查找出某区间内的第k大值。<br>　　划分树的基本思想就是对于某个区间，把它划分成两个子区间，左边区间的数小于右边区间的数。查找的时候通过记录进入左子树的数的个数，确定下一个查找区间，最后范围缩小到1，就找到了。<br>　　划分树定义为，它的每一个节点保存区间[lft,rht]所有元素，元素顺序与原数组（输入）相同，但是，两个子树的元素为该节点所有元素排序后(rht-lft+1)/2个进入左子树，其余的到右子树，同时维护一个num域，num[i]表示lft-&gt;i这个点有多少个进入了左子树。</p><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">100010</span>;</span><br><span class="line"><span class="keyword">int</span> tree[<span class="number">30</span>][MAXN];<span class="comment">//表示每层每个位置的值</span></span><br><span class="line"><span class="keyword">int</span> sorted[MAXN];<span class="comment">//已经排序的数</span></span><br><span class="line"><span class="keyword">int</span> toleft[<span class="number">30</span>][MAXN];<span class="comment">//toleft[p][i]表示第i层从1到i有多少个数分入左边</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> le,<span class="keyword">int</span> r,<span class="keyword">int</span> dep)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(le==r)<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid=(le+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> same=mid-le+<span class="number">1</span>;<span class="comment">//表示等于中间值而且被分入左边的个数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=le;i&lt;=r;i++)</span><br><span class="line">      <span class="keyword">if</span>(tree[dep][i]&lt;sorted[mid])</span><br><span class="line">         same--;</span><br><span class="line">    <span class="keyword">int</span> lpos=le;</span><br><span class="line">    <span class="keyword">int</span> rpos=mid+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=le;i&lt;=r;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(tree[dep][i]&lt;sorted[mid])<span class="comment">//比中间的数小，分入左边</span></span><br><span class="line">             tree[dep+<span class="number">1</span>][lpos++]=tree[dep][i];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(tree[dep][i]==sorted[mid]&amp;&amp;same&gt;<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            tree[dep+<span class="number">1</span>][lpos++]=tree[dep][i];</span><br><span class="line">            same--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>  <span class="comment">//比中间值大分入右边</span></span><br><span class="line">            tree[dep+<span class="number">1</span>][rpos++]=tree[dep][i];</span><br><span class="line">        toleft[dep][i]=toleft[dep][le<span class="number">-1</span>]+lpos-le;<span class="comment">//从1到i放左边的个数</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    build(le,mid,dep+<span class="number">1</span>);</span><br><span class="line">    build(mid+<span class="number">1</span>,r,dep+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//查询区间第k大的数，[L,R]是大区间，[le,r]是要查询的小区间</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> le,<span class="keyword">int</span> r,<span class="keyword">int</span> dep,<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(le==r)<span class="keyword">return</span> tree[dep][le];</span><br><span class="line">    <span class="keyword">int</span> mid=(L+R)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> cnt=toleft[dep][r]-toleft[dep][le<span class="number">-1</span>];  <span class="comment">//[le,r]中位于左边的个数</span></span><br><span class="line">    <span class="keyword">if</span>(cnt&gt;=k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//L+要查询的区间前被放在左边的个数</span></span><br><span class="line">        <span class="keyword">int</span> newl=L+toleft[dep][le<span class="number">-1</span>]-toleft[dep][L<span class="number">-1</span>];</span><br><span class="line">        <span class="comment">//左端点加上查询区间会被放在左边的个数</span></span><br><span class="line">        <span class="keyword">int</span> newr=newl+cnt<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> query(L,mid,newl,newr,dep+<span class="number">1</span>,k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">         <span class="keyword">int</span> newr=r+toleft[dep][R]-toleft[dep][r];</span><br><span class="line">         <span class="keyword">int</span> newl=newr-(r-le-cnt);</span><br><span class="line">         <span class="keyword">return</span> query(mid+<span class="number">1</span>,R,newl,newr,dep+<span class="number">1</span>,k-cnt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;<span class="built_in">cin</span> &gt;&gt; tree[<span class="number">0</span>][i]; sorted[i] = tree[<span class="number">0</span>][i];&#125;</span><br><span class="line">        sort(sorted+<span class="number">1</span>, sorted+n+<span class="number">1</span>);</span><br><span class="line">        build(<span class="number">1</span>, n, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">int</span> le, r, k;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; le &gt;&gt; r &gt;&gt; k;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; query(<span class="number">1</span>, n, le, r, <span class="number">0</span>, k) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;hint&quot;&gt;&lt;a href=&quot;#hint&quot; class=&quot;headerlink&quot; title=&quot;hint&quot;&gt;&lt;/a&gt;hint&lt;/h2&gt;&lt;p&gt;用途：用于求区间内第k大值&lt;br&gt;缺点：不能进行更新操作&lt;/p&gt;
&lt;p&gt;划分树是一种基于线段树的数据结构。主要用于快速求出(
      
    
    </summary>
    
      <category term="数据结构" scheme="https://weibolu.online/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="ACM模板" scheme="https://weibolu.online/tags/ACM%E6%A8%A1%E6%9D%BF/"/>
    
      <category term="数据结构" scheme="https://weibolu.online/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>ACM技巧3 —— _int128的使用</title>
    <link href="https://weibolu.online/2019/06/10/ACM%E6%8A%80%E5%B7%A73%20%E2%80%94%E2%80%94%20_int128%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://weibolu.online/2019/06/10/ACM技巧3 —— _int128的使用/</id>
    <published>2019-06-10T15:31:28.000Z</published>
    <updated>2019-06-10T15:22:33.204Z</updated>
    
    <content type="html"><![CDATA[<p>_int128是128位2进制数据，一般oj上有该数据类型，但要自己写输出函数<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(__int128 x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>), x = -x;</span><br><span class="line">    print(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;_int128是128位2进制数据，一般oj上有该数据类型，但要自己写输出函数&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;
      
    
    </summary>
    
      <category term="ACM技巧" scheme="https://weibolu.online/categories/ACM%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="ACM模板" scheme="https://weibolu.online/tags/ACM%E6%A8%A1%E6%9D%BF/"/>
    
  </entry>
  
  <entry>
    <title>数论6 —— 组合数的性质</title>
    <link href="https://weibolu.online/2019/06/05/%E6%95%B0%E8%AE%BA6%20%E2%80%94%E2%80%94%20%E7%BB%84%E5%90%88%E6%95%B0%E7%9A%84%E6%80%A7%E8%B4%A8/"/>
    <id>https://weibolu.online/2019/06/05/数论6 —— 组合数的性质/</id>
    <published>2019-06-05T02:29:25.000Z</published>
    <updated>2019-06-26T06:53:47.707Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="基础数论" scheme="https://weibolu.online/categories/%E5%9F%BA%E7%A1%80%E6%95%B0%E8%AE%BA/"/>
    
    
      <category term="ACM模板" scheme="https://weibolu.online/tags/ACM%E6%A8%A1%E6%9D%BF/"/>
    
      <category term="基础数论" scheme="https://weibolu.online/tags/%E5%9F%BA%E7%A1%80%E6%95%B0%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>矩阵操作与线性代数2 —— 求矩阵的秩</title>
    <link href="https://weibolu.online/2019/05/19/%E7%9F%A9%E9%98%B5%E6%93%8D%E4%BD%9C%E4%B8%8E%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B02%20%E2%80%94%E2%80%94%20%E6%B1%82%E7%9F%A9%E9%98%B5%E7%9A%84%E7%A7%A9/"/>
    <id>https://weibolu.online/2019/05/19/矩阵操作与线性代数2 —— 求矩阵的秩/</id>
    <published>2019-05-19T00:31:03.000Z</published>
    <updated>2019-05-19T16:20:00.214Z</updated>
    
    <content type="html"><![CDATA[<p>模板题 hdu6507</p><h2 id="模板1"><a href="#模板1" class="headerlink" title="模板1"></a>模板1</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> long long ll</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span> + <span class="number">100</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">50</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> eps = <span class="number">1e-6</span>;</span><br><span class="line"><span class="keyword">int</span> a[N][N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Rank</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, k, r, u;</span><br><span class="line">    <span class="keyword">while</span>(i &lt; n &amp;&amp; j &lt; m) &#123;</span><br><span class="line">        r = i;</span><br><span class="line">        <span class="keyword">for</span>(k = i; k &lt; m; k++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[k][j]) &#123;</span><br><span class="line">                r = k;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(a[r][j]) &#123;</span><br><span class="line">            <span class="keyword">if</span>(r != i) &#123;</span><br><span class="line">                <span class="keyword">for</span>(k = <span class="number">0</span>; k &lt;= n; k++) &#123;</span><br><span class="line">                    swap(a[r][k], a[i][k]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(u = i+<span class="number">1</span>; u &lt; m; u++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(a[u][j]) &#123;</span><br><span class="line">                    <span class="keyword">for</span>(k = i; k &lt;= n; k++) &#123;</span><br><span class="line">                        a[u][k] ^= a[i][k];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ++i;</span><br><span class="line">        &#125;</span><br><span class="line">        ++j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m; </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, min(n*m, max(<span class="number">1</span>, Rank(n, m))*(n+m)));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="模板2（高斯消元）"><a href="#模板2（高斯消元）" class="headerlink" title="模板2（高斯消元）"></a>模板2（高斯消元）</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span> + <span class="number">100</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">50</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> eps = <span class="number">1e-6</span>;</span><br><span class="line"><span class="keyword">int</span> a[N][N];</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">xchgline</span><span class="params">(<span class="keyword">int</span> q, <span class="keyword">int</span> w, <span class="keyword">int</span> e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = e; i &lt;= m; i++) &#123;</span><br><span class="line">        swap(a[q][i], a[w][i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Rank</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> s = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>, j = <span class="number">1</span>; i &lt;= n &amp;&amp; j &lt;= m; i++, j++) &#123;</span><br><span class="line">        <span class="keyword">int</span> chk = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> v = i; v &lt;= n; v++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[v][j] != <span class="number">0</span>) &#123;</span><br><span class="line">                chk = v;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(chk == <span class="number">0</span>) i--;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            xchgline(chk, i, j);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> w = i+<span class="number">1</span>; w &lt;= n; w++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(a[w][j] != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">int</span> g = __gcd(a[w][j], a[i][j]);</span><br><span class="line">                    <span class="keyword">int</span> pa = a[i][j]/g, pb = a[w][j]/g;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> z = j; z &lt;= m; z++) &#123;</span><br><span class="line">                        a[w][z] = a[w][z]*pa-a[i][z]*pb;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            s++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, min(n*m, max(<span class="number">1</span>, Rank(n, m))*(n+m)));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;模板题 hdu6507&lt;/p&gt;
&lt;h2 id=&quot;模板1&quot;&gt;&lt;a href=&quot;#模板1&quot; class=&quot;headerlink&quot; title=&quot;模板1&quot;&gt;&lt;/a&gt;模板1&lt;/h2&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;
      
    
    </summary>
    
      <category term="矩阵算法" scheme="https://weibolu.online/categories/%E7%9F%A9%E9%98%B5%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="ACM模板" scheme="https://weibolu.online/tags/ACM%E6%A8%A1%E6%9D%BF/"/>
    
  </entry>
  
  <entry>
    <title>矩阵操作与线性代数1 —— 矩阵快速幂</title>
    <link href="https://weibolu.online/2019/05/18/%E7%9F%A9%E9%98%B5%E6%93%8D%E4%BD%9C%E4%B8%8E%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B01%20%E2%80%94%E2%80%94%20%E7%9F%A9%E9%98%B5%E5%BF%AB%E9%80%9F%E5%B9%82/"/>
    <id>https://weibolu.online/2019/05/18/矩阵操作与线性代数1 —— 矩阵快速幂/</id>
    <published>2019-05-18T00:31:03.000Z</published>
    <updated>2019-05-19T15:10:22.730Z</updated>
    
    <content type="html"><![CDATA[<h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">15</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">9973</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Mat</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="keyword">int</span> mat[maxn][maxn];</span><br><span class="line">    Mat()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(mat, <span class="number">0</span>, <span class="keyword">sizeof</span> mat);</span><br><span class="line">        n = m = maxn;</span><br><span class="line">    &#125;</span><br><span class="line">    Mat <span class="keyword">operator</span> * (Mat b)</span><br><span class="line">    &#123;</span><br><span class="line">        Mat c;</span><br><span class="line">        c = Mat();</span><br><span class="line">        c.n = n; c.m = b.m;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= b.m; j++) &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= m; k++) &#123;</span><br><span class="line">                    c.mat[i][j] += (mat[i][k]*b.mat[k][j]) % mod;</span><br><span class="line">                    c.mat[i][j] %= mod;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">    Mat <span class="keyword">operator</span> + (Mat b)</span><br><span class="line">    &#123;</span><br><span class="line">        Mat c;</span><br><span class="line">        c.n = n; c.m = m;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">            c.mat[i][j] = mat[i][j] + b.mat[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">in</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        n = x; m = y;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= x; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= y; j++) &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;mat[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">out</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d "</span>, mat[i][j]);</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">Mat <span class="title">quick_pow</span><span class="params">(Mat a, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Mat c;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    c = Mat();</span><br><span class="line">    c.n = a.n; c.m = a.m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= c.n; i++)</span><br><span class="line">        c.mat[i][i] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(k) &#123;</span><br><span class="line">        <span class="keyword">if</span>(k &amp; <span class="number">1</span>) c = c*a;</span><br><span class="line">        a = a*a;</span><br><span class="line">        k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="hint"><a href="#hint" class="headerlink" title="hint"></a>hint</h2><p>A + A^2 + A^3 + A^4 + A^5 + A^6 = (A + A^2 + A^3) + A^3*(A + A^2 + A^3)利用二分的思想划分，再用快速幂求解。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;模板&quot;&gt;&lt;a href=&quot;#模板&quot; class=&quot;headerlink&quot; title=&quot;模板&quot;&gt;&lt;/a&gt;模板&lt;/h2&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span clas
      
    
    </summary>
    
      <category term="矩阵算法" scheme="https://weibolu.online/categories/%E7%9F%A9%E9%98%B5%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="ACM模板" scheme="https://weibolu.online/tags/ACM%E6%A8%A1%E6%9D%BF/"/>
    
  </entry>
  
  <entry>
    <title>dp1 —— 背包问题总结</title>
    <link href="https://weibolu.online/2019/05/13/dp1%20%E2%80%94%E2%80%94%20%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    <id>https://weibolu.online/2019/05/13/dp1 —— 背包问题总结/</id>
    <published>2019-05-13T08:44:07.000Z</published>
    <updated>2019-05-14T11:01:37.635Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="动态规划" scheme="https://weibolu.online/categories/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    
      <category term="DP" scheme="https://weibolu.online/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>dp2 —— hdu 4281题解</title>
    <link href="https://weibolu.online/2019/05/13/dp2%20%E2%80%94%E2%80%94%20hdu%204281%E9%A2%98%E8%A7%A3/"/>
    <id>https://weibolu.online/2019/05/13/dp2 —— hdu 4281题解/</id>
    <published>2019-05-13T04:44:07.000Z</published>
    <updated>2019-05-14T12:05:02.630Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>这道题目很综合，是一个用了状压思想的01背包问题，同时又涉及了多重旅行商问题（mTSP）。</p><h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=4281" target="_blank" rel="noopener">hdu 4281</a></p><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h3><p>给出n个点的坐标，其中第一点是教练出发点，其余每个点都有一个问题，教练解决这个问题需用时c[i]，一个教练用来解决问题的总时间为m。<br>求：<br>1.最少需要多少教练才可以解决所有问题？<br>2.假设教练无限多，问所有教练走过路程之和最小值是多少？（教练最终都要回到出发点）<br>两点间距离定义为： ceil(sqrt((xi - xj) ^ 2 + (yi - yj) ^ 2)). (ceil means rounding the number up, e.g. ceil(4.1) = 5)</p><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><p>第一问：<br>因为n的范围比较小，符合状压dp的特点，果断使用状压dp统计出一个教练可以解决的所有问题的组合存起来作为之后01背包的物品，然后做一次01背包即可。<br>第二问：<br>这个问题不太常见，先利用上一问中统计出来的组合求出一个教练走完这个组合的所走的距离，同时用dp的思想存下走不同组合以不同点结束时走的距离，并不断合并新的顶点。完成这个操作后再对所有状态的结果进行优化（dp思想），最终输出包含所有点的状态的结果。简单来说就是先用传统的旅行商问题跑一遍，但因为一个教练的时长有限，不能跑完所有点，所以最后再进行拓展将一个状态分给多个教练来跑，以此跑完所有点。<br>哈，写完感觉一头雾水，还是看代码中的注释吧。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-6</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> xx[<span class="number">20</span>], yy[<span class="number">20</span>], c[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> dp[(<span class="number">1</span>&lt;&lt;<span class="number">16</span>)], best[(<span class="number">1</span>&lt;&lt;<span class="number">16</span>)], en[<span class="number">16</span>][(<span class="number">1</span>&lt;&lt;<span class="number">16</span>)], dis[<span class="number">16</span>][<span class="number">16</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tt;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span>     <span class="comment">//求出任意两点的距离</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &lt; n; j++) &#123;</span><br><span class="line">            dis[i][j] = dis[j][i] = <span class="built_in">ceil</span>(<span class="built_in">sqrt</span>(<span class="keyword">double</span>(xx[i]-xx[j])*(xx[i]-xx[j]) + <span class="keyword">double</span>(yy[i]-yy[j])*(yy[i]-yy[j])));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dp, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dp);</span><br><span class="line">    tt.clear();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="keyword">if</span>(c[i] &gt; m) &#123;<span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="string">' '</span>; <span class="keyword">return</span> ;&#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; (<span class="number">1</span>&lt;&lt;n); i++) &#123;          <span class="comment">//通过对所有状态进行枚举，统计一个教练可以解决的问题的组合</span></span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i &amp; (<span class="number">1</span>&lt;&lt;j)) sum += c[j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(sum &lt;= m) tt.push_back(i);</span><br><span class="line">    &#125;</span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tt.size(); i++) &#123;        <span class="comment">//01背包</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = (<span class="number">1</span>&lt;&lt;n)<span class="number">-1</span>; j &gt;= <span class="number">0</span>; j--) <span class="keyword">if</span>((j+tt[i] &lt; (<span class="number">1</span>&lt;&lt;n)) &amp;&amp; ((j+tt[i]) == (j|tt[i])))&#123;</span><br><span class="line">            dp[j+tt[i]] = min(dp[j+tt[i]], dp[j] + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dp[(<span class="number">1</span>&lt;&lt;n)<span class="number">-1</span>] == inf) <span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; dp[(<span class="number">1</span>&lt;&lt;n)<span class="number">-1</span>] &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    en[<span class="number">0</span>][<span class="number">1</span>] = best[<span class="number">0</span>] = <span class="number">0</span>;     <span class="comment">//en[i][j]表示状态i以j为结尾时走过的长度，best[i]表示状态i最终回到出发点时走过的长度。</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tt.size(); i++) &#123;    <span class="comment">//先求出上一问中所有组合的最终结果。</span></span><br><span class="line">        <span class="keyword">int</span> t1 = tt[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(t1&amp;(<span class="number">1</span>&lt;&lt;j)) &#123;     <span class="comment">//如果状态t1中包含节点j，计算以j为结尾的最短长度。</span></span><br><span class="line">                best[t1] = min(best[t1], en[j][t1]+dis[j][<span class="number">0</span>]);</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; k++) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(!(t1&amp;(<span class="number">1</span>&lt;&lt;k))) &#123;      <span class="comment">//如果状态t1中不包含节点k，将k拓展进来。</span></span><br><span class="line">                        en[k][t1|(<span class="number">1</span>&lt;&lt;k)] = min(en[k][t1|(<span class="number">1</span>&lt;&lt;k)], en[j][t1]+dis[j][k]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; (<span class="number">1</span>&lt;&lt;n); i++) &#123;       <span class="comment">//对一个可回到终点的路径进行拆分，让多个教练来做并求出其最短长度。</span></span><br><span class="line">        <span class="keyword">if</span>(i &amp; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i&amp;(i<span class="number">-1</span>); j; j = i&amp;(j<span class="number">-1</span>))</span><br><span class="line">                best[i] = min(best[i], best[(i-j)|<span class="number">1</span>] + best[j|<span class="number">1</span>]);      <span class="comment">//一定要或上1，以此保证一定可以回到出发点。</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(best[(<span class="number">1</span>&lt;&lt;n)<span class="number">-1</span>] == inf) <span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; best[(<span class="number">1</span>&lt;&lt;n)<span class="number">-1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; xx[i] &gt;&gt; yy[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">memset</span>(best, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> best);</span><br><span class="line">        <span class="built_in">memset</span>(en, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> en);</span><br><span class="line">        init();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">cin</span> &gt;&gt; c[i];</span><br><span class="line">        solve1();                               <span class="comment">//解决第一问</span></span><br><span class="line">        solve2();                               <span class="comment">//解决第二问</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简述&quot;&gt;&lt;a href=&quot;#简述&quot; class=&quot;headerlink&quot; title=&quot;简述&quot;&gt;&lt;/a&gt;简述&lt;/h2&gt;&lt;p&gt;这道题目很综合，是一个用了状压思想的01背包问题，同时又涉及了多重旅行商问题（mTSP）。&lt;/p&gt;
&lt;h3 id=&quot;题目链接&quot;&gt;&lt;a hre
      
    
    </summary>
    
      <category term="动态规划" scheme="https://weibolu.online/categories/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    
      <category term="题解" scheme="https://weibolu.online/tags/%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>基础算法2 —— 快速幂</title>
    <link href="https://weibolu.online/2019/05/06/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%952%20%E2%80%94%E2%80%94%20%E5%BF%AB%E9%80%9F%E5%B9%82/"/>
    <id>https://weibolu.online/2019/05/06/基础算法2 —— 快速幂/</id>
    <published>2019-05-06T00:31:03.000Z</published>
    <updated>2019-05-19T14:47:21.946Z</updated>
    
    <content type="html"><![CDATA[<h2 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">quick_pow</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> base = a, ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b) &#123;</span><br><span class="line">        <span class="keyword">if</span>(b &amp; <span class="number">1</span>) ans *= base;</span><br><span class="line">        base *= base;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;快速幂&quot;&gt;&lt;a href=&quot;#快速幂&quot; class=&quot;headerlink&quot; title=&quot;快速幂&quot;&gt;&lt;/a&gt;快速幂&lt;/h2&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span 
      
    
    </summary>
    
      <category term="ACM基础算法" scheme="https://weibolu.online/categories/ACM%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="ACM模板" scheme="https://weibolu.online/tags/ACM%E6%A8%A1%E6%9D%BF/"/>
    
  </entry>
  
  <entry>
    <title>数论5 —— FFT</title>
    <link href="https://weibolu.online/2019/05/05/%E6%95%B0%E8%AE%BA5%20%E2%80%94%E2%80%94%20FFT/"/>
    <id>https://weibolu.online/2019/05/05/数论5 —— FFT/</id>
    <published>2019-05-05T02:29:25.000Z</published>
    <updated>2019-06-26T06:53:46.655Z</updated>
    
    <content type="html"><![CDATA[<h2 id="详解"><a href="#详解" class="headerlink" title="详解"></a>详解</h2><p><a href="https://blog.csdn.net/linwanglian1/article/details/56020221" target="_blank" rel="noopener">傅里叶变换详解</a><br><a href="https://zhuanlan.zhihu.com/p/40505277" target="_blank" rel="noopener">FFT详细解析</a><br><a href="https://blog.csdn.net/lymingha0/article/details/46581277" target="_blank" rel="noopener">FFT类封装和三个例题</a></p><h2 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h2><p>FFT即快速傅里叶变换<br>作用是把原来多项式乘法O(n²)优化到 O(nlogn)，思想也是分治的思想</p><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><p>网上大部分模板都是kuangbin的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Complex</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">double</span> r, i;</span><br><span class="line">    Complex(<span class="keyword">double</span> _r = <span class="number">0</span>, <span class="keyword">double</span> _i = <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        r = _r, i = _i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Complex <span class="keyword">operator</span> + (<span class="keyword">const</span> Complex &amp;b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> Complex(r+b.r, i+b.i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Complex <span class="keyword">operator</span> - (<span class="keyword">const</span> Complex &amp;b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> Complex(r-b.r, i-b.i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Complex <span class="keyword">operator</span> * (<span class="keyword">const</span> Complex &amp;b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> Complex(r*b.r-i*b.i, r*b.i+i*b.r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(Complex y[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, k;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>, j = len/<span class="number">2</span>; i &lt; len<span class="number">-1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(i &lt; j) swap(y[i], y[j]);</span><br><span class="line">        k = len/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span>(j &gt;= k) &#123;</span><br><span class="line">            j -= k;</span><br><span class="line">            k /= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(j &lt; k) j += k;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fft</span><span class="params">(Complex y[], <span class="keyword">int</span> len, <span class="keyword">int</span> on)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    change(y, len);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> h = <span class="number">2</span>; h &lt;= len; h &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="function">Complex <span class="title">wn</span><span class="params">(<span class="built_in">cos</span>(-on*<span class="number">2</span>*PI/h), <span class="built_in">sin</span>(-on*<span class="number">2</span>*PI/h))</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len; j += h) &#123;</span><br><span class="line">            <span class="function">Complex <span class="title">w</span><span class="params">(<span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = j; k &lt; j+h/<span class="number">2</span>; k++) &#123;</span><br><span class="line">                Complex u = y[k];</span><br><span class="line">                Complex t = w*y[k+h/<span class="number">2</span>];</span><br><span class="line">                y[k] = u+t;</span><br><span class="line">                y[k+h/<span class="number">2</span>] = u-t;</span><br><span class="line">                w = w*wn;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(on == <span class="number">-1</span>) <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">        y[i].r /= len;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;详解&quot;&gt;&lt;a href=&quot;#详解&quot; class=&quot;headerlink&quot; title=&quot;详解&quot;&gt;&lt;/a&gt;详解&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/linwanglian1/article/details/56020221&quot; 
      
    
    </summary>
    
      <category term="基础数论" scheme="https://weibolu.online/categories/%E5%9F%BA%E7%A1%80%E6%95%B0%E8%AE%BA/"/>
    
    
      <category term="ACM模板" scheme="https://weibolu.online/tags/ACM%E6%A8%A1%E6%9D%BF/"/>
    
      <category term="基础数论" scheme="https://weibolu.online/tags/%E5%9F%BA%E7%A1%80%E6%95%B0%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>数据结构4 —— RMQ</title>
    <link href="https://weibolu.online/2019/04/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%844%20%E2%80%94%E2%80%94%20RMQ/"/>
    <id>https://weibolu.online/2019/04/24/数据结构4 —— RMQ/</id>
    <published>2019-04-24T03:46:28.000Z</published>
    <updated>2019-04-24T04:11:07.884Z</updated>
    
    <content type="html"><![CDATA[<h2 id="hint"><a href="#hint" class="headerlink" title="hint"></a>hint</h2><p>查询区间特征值（最大、最小……）<br>利用区间二分和dp思想，加快操作<br>预处理 O(nlogn)   查询O(1)</p><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> d[maxn][maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RMQ_init</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; A)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = A.size();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) d[i][<span class="number">0</span>] = A[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; (<span class="number">1</span>&lt;&lt;j) &lt;= n; j++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i + (<span class="number">1</span>&lt;&lt;j) - <span class="number">1</span> &lt; n; i++)</span><br><span class="line">        d[i][j] = min(d[i][j<span class="number">-1</span>], d[i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))][j<span class="number">-1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">RMQ</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> R)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>&lt;&lt;(k+<span class="number">1</span>) &lt;= R-L+<span class="number">1</span>) k++;</span><br><span class="line">    <span class="keyword">return</span> min(d[L][k], d[R-(<span class="number">1</span>&lt;&lt;k)+<span class="number">1</span>][k]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;hint&quot;&gt;&lt;a href=&quot;#hint&quot; class=&quot;headerlink&quot; title=&quot;hint&quot;&gt;&lt;/a&gt;hint&lt;/h2&gt;&lt;p&gt;查询区间特征值（最大、最小……）&lt;br&gt;利用区间二分和dp思想，加快操作&lt;br&gt;预处理 O(nlogn)   查询O(1)&lt;
      
    
    </summary>
    
      <category term="数据结构" scheme="https://weibolu.online/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="ACM模板" scheme="https://weibolu.online/tags/ACM%E6%A8%A1%E6%9D%BF/"/>
    
      <category term="数据结构" scheme="https://weibolu.online/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>字符串处理3 —— AC自动机</title>
    <link href="https://weibolu.online/2019/04/24/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%863%20%E2%80%94%E2%80%94%20AC%E8%87%AA%E5%8A%A8%E6%9C%BA/"/>
    <id>https://weibolu.online/2019/04/24/字符串处理3 —— AC自动机/</id>
    <published>2019-04-24T02:46:28.000Z</published>
    <updated>2019-05-15T09:34:39.202Z</updated>
    
    <content type="html"><![CDATA[<h2 id="转载"><a href="#转载" class="headerlink" title="转载"></a>转载</h2><p><a href="https://www.cnblogs.com/wenzhixin/p/9448045.html" target="_blank" rel="noopener">AC自动机总结</a></p><h2 id="hint"><a href="#hint" class="headerlink" title="hint"></a>hint</h2><p>终于学到了AC自动机了，终于可以自动AC了，再也不用自己打代码了（￣︶￣）↗　<br>当然不是这样啦！AC自动机的本质其实是有限状态自动机，没有学计算理论前我还真不知道这玩意是啥。<br>其实说白了就是状态有限，根据输入不同有不同的处理的一个理论计算机器。</p><p>而AC自动机其实是对KMP算法的补充，KMP算法只能对一个匹配串处理，多个匹配串就无法优化啦。<br><a href="https://weibolu.online/2019/04/16/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%861%20%E2%80%94%E2%80%94%20kmp%E7%AE%97%E6%B3%95/">不记得KMP了可以看看这个</a></p><p>而AC自动机其实就是把KMP算法中的next数组的思想同时用到了Trie的多条路径上了，保证你在当前匹配失败后可以直接通过fail指针找到一个新的可匹配状态（或回到根节点）</p><p>整体来看AC自动机的构造其实就是Trie的构造过程，比它多的就是Fail指针的构造。</p><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxw = <span class="number">10010</span>;      <span class="comment">//最大单词数 </span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxwl = <span class="number">61</span>;        <span class="comment">//最大单词长度 </span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxl = <span class="number">1001000</span>;    <span class="comment">//最大文本长度 </span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> sigm_size = <span class="number">26</span>;    <span class="comment">//字符集大小 </span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> sum;<span class="comment">//&gt;0表示以该结点为前缀的单词个数，=0表示不是单词结点，=-1表示已经经过计数 </span></span><br><span class="line">    Node* chld[sigm_size];</span><br><span class="line">    Node* fail;</span><br><span class="line">    Node() &#123;</span><br><span class="line">        sum = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(chld, <span class="number">0</span>, <span class="keyword">sizeof</span>(chld));</span><br><span class="line">        fail = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ac_automaton</span> &#123;</span></span><br><span class="line">    Node* root;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        root = <span class="keyword">new</span> Node;</span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">idx</span><span class="params">(<span class="keyword">char</span> c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> c - <span class="string">'a'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">char</span> *s)</span> </span>&#123;</span><br><span class="line">        Node* u = root; </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s[i]; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> c = idx(s[i]);</span><br><span class="line">            <span class="keyword">if</span>(u-&gt;chld[c] == <span class="literal">NULL</span>) </span><br><span class="line">                u-&gt;chld[c] = <span class="keyword">new</span> Node;</span><br><span class="line">            </span><br><span class="line">            u = u-&gt;chld[c];</span><br><span class="line">        &#125;</span><br><span class="line">        u-&gt;sum++;<span class="comment">//以该串为前缀的单词个数++ </span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getfail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">queue</span>&lt;Node*&gt; q;</span><br><span class="line">        q.push(root);<span class="comment">//根结点的fail指针为空 </span></span><br><span class="line">        <span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line">            Node* u = q.front();</span><br><span class="line">            q.pop();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sigm_size; i++) &#123;                <span class="comment">//寻找当前结点的所有非空子结点的fail指针 </span></span><br><span class="line">                <span class="keyword">if</span>(u-&gt;chld[i] != <span class="literal">NULL</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(u == root)<span class="comment">//根结点 </span></span><br><span class="line">                        u-&gt;chld[i]-&gt;fail = root;</span><br><span class="line">                    <span class="keyword">else</span> &#123;       <span class="comment">//非根节点 </span></span><br><span class="line">                        Node* tmp = u-&gt;fail;                    <span class="comment">//找到它父亲的fail指针指向的结点 </span></span><br><span class="line">                        <span class="keyword">while</span>(tmp != <span class="literal">NULL</span>) &#123;                    <span class="comment">//向上只有根结点的fail指针是空，所以只要不是根结点就循环 </span></span><br><span class="line">                            <span class="keyword">if</span>(tmp-&gt;chld[i] != <span class="literal">NULL</span>) &#123;          <span class="comment">//直到发现存在一个结点的子结点与其相同 </span></span><br><span class="line">                                u-&gt;chld[i]-&gt;fail = tmp-&gt;chld[i];<span class="comment">//就将它的fail指针指向该子结点然后结束循环 </span></span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            tmp = tmp-&gt;fail;<span class="comment">//否则一直往上找 </span></span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span>(tmp == <span class="literal">NULL</span>)     <span class="comment">//如果寻找到根结点还没有找到，就指向根结点，让主串从根结点重新开始匹配 </span></span><br><span class="line">                            u-&gt;chld[i]-&gt;fail = root;</span><br><span class="line">                    &#125;</span><br><span class="line">                    q.push(u-&gt;chld[i]);     <span class="comment">//子结点入队 </span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">char</span> *t)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;<span class="comment">//文本中存在单词的个数 </span></span><br><span class="line">        Node* u = root; </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; t[i]; i++) &#123;<span class="comment">//yasherhs </span></span><br><span class="line">            <span class="keyword">int</span> c = idx(t[i]);</span><br><span class="line">            <span class="keyword">while</span>(u != root &amp;&amp; u-&gt;chld[c] == <span class="literal">NULL</span>)<span class="comment">//不是根结点而且不匹配，顺着fail指针走，直到可以匹配或者走到根结点 </span></span><br><span class="line">                u = u-&gt;fail;</span><br><span class="line">            </span><br><span class="line">            u = u-&gt;chld[c];  <span class="comment">//经过上面的循环，u要么是匹配结点要么是根结点，继续往下走 </span></span><br><span class="line">            <span class="keyword">if</span>(u == <span class="literal">NULL</span>)    <span class="comment">//如果结点为空，下一个字符重新从根结点开始 </span></span><br><span class="line">                u = root;</span><br><span class="line">            </span><br><span class="line">            Node* tmp = u;</span><br><span class="line">            <span class="keyword">while</span>(tmp != root) &#123;    <span class="comment">//只要没有返回到根结点，就证明在字典树上还存在找到单词的可能 </span></span><br><span class="line">                <span class="keyword">if</span>(tmp-&gt;sum &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    cnt += tmp-&gt;sum;<span class="comment">//单词计数器加上以当前结点为前缀的单词数 </span></span><br><span class="line">                    tmp-&gt;sum = <span class="number">-1</span>;  <span class="comment">//表示该单词结点已经计过数，防止重复计数 </span></span><br><span class="line">                &#125; </span><br><span class="line">                <span class="keyword">else</span>                <span class="comment">//该单词结点已经匹配过了直接退出,因为后面的状态转移是确定的并且是走过的 </span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                tmp = tmp-&gt;fail;    <span class="comment">//往其他子树上找 </span></span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h3><p>注意用矩阵表示的时候数组一定要开够！！！<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ac_automaton</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> ch[maxnode][sigm_size];<span class="comment">//一个结点对应一个字符集</span></span><br><span class="line">    <span class="keyword">int</span> fail[maxnode];            <span class="comment">//每个结点的fail指针</span></span><br><span class="line">    <span class="keyword">int</span> val[maxnode];           <span class="comment">//每个结点的权值</span></span><br><span class="line">    <span class="keyword">int</span> sz; </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        sz = <span class="number">0</span>;</span><br><span class="line">        newnode();               <span class="comment">//创建一个根结点 </span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">newnode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(ch[sz], <span class="number">-1</span>, <span class="keyword">sizeof</span>(ch[sz]));</span><br><span class="line">        val[sz] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> sz++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">idx</span><span class="params">(<span class="keyword">char</span> c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> c - <span class="string">'a'</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">char</span> *s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> u = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; s[i]; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> c = idx(s[i]);</span><br><span class="line">            <span class="keyword">if</span>(ch[u][c] == <span class="number">-1</span>)</span><br><span class="line">                ch[u][c] = newnode();</span><br><span class="line">            </span><br><span class="line">            u = ch[u][c];</span><br><span class="line">        &#125;</span><br><span class="line">        val[u]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getfail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">        fail[<span class="number">0</span>] = <span class="number">0</span>;            <span class="comment">//根结点的fail指针指向它自己也就是空 </span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sigm_size; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> u = ch[<span class="number">0</span>][i];</span><br><span class="line">            <span class="keyword">if</span>(u == <span class="number">-1</span>)&#123;        <span class="comment">//根结点编号为i的结点不存在时</span></span><br><span class="line">                ch[<span class="number">0</span>][i] = <span class="number">0</span>;    <span class="comment">//把不存在的边补上，将其标记为0</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;                <span class="comment">//存在时 </span></span><br><span class="line">                fail[u] = <span class="number">0</span>;    <span class="comment">//失配指针指向根结点并入队 </span></span><br><span class="line">                q.push(u);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> u =q.front();</span><br><span class="line">            q.pop();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sigm_size; i++) &#123; <span class="comment">//寻找当前结点u的孩子结点的fail指针 </span></span><br><span class="line">                <span class="keyword">int</span> tmp = ch[u][i];</span><br><span class="line">                <span class="keyword">if</span>(tmp == <span class="number">-1</span>) </span><br><span class="line">                    ch[u][i] = ch[fail[u]][i];    <span class="comment">//把不存在的边补上，当前结点u不存在编号为i的孩子时，</span></span><br><span class="line">                                 <span class="comment">//让它指向当前结点u的fail指针指向的结点对应编号为i的孩子中存的结点编号 </span></span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//当前孩子结点的fail指针指向 当前结点u的fail指针指向的结点对应的孩子的编号 </span></span><br><span class="line">                    fail[tmp] = ch[fail[u]][i];   </span><br><span class="line">                    q.push(tmp);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">char</span> *t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> u = <span class="number">0</span>, cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; t[i]; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> c = idx(t[i]);</span><br><span class="line">            u = ch[u][c];      <span class="comment">//由于之前把边补齐了,所以可以直接往下走，有匹配直接就是结点，没有匹配直接是根结点 </span></span><br><span class="line">             </span><br><span class="line">            <span class="keyword">int</span> tmp = u;</span><br><span class="line">            <span class="keyword">while</span>(tmp != <span class="number">0</span>) &#123;  <span class="comment">//只要不是根结点，就证明有存在继续找到单词的可能 </span></span><br><span class="line">                cnt += val[tmp];</span><br><span class="line">                val[tmp] = <span class="number">0</span>;</span><br><span class="line">                </span><br><span class="line">                tmp = fail[tmp];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>##例题<br><a href="http://acm.hdu.edu.cn/showproblem.php?pid=2222" target="_blank" rel="noopener">hdu 2222</a></p><p>这就是裸题，可以直接套模板使用</p><p>###代码<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-6</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">10005</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    Node* next[<span class="number">26</span>];</span><br><span class="line">    Node* fail;</span><br><span class="line">    <span class="keyword">int</span> sum;</span><br><span class="line">    Node()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(next, <span class="number">0</span>, <span class="keyword">sizeof</span> next);</span><br><span class="line">        sum = <span class="number">0</span>;</span><br><span class="line">        fail = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ac_automation</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    Node* root;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;root = <span class="keyword">new</span> Node;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="built_in">string</span> s)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Node* u = root;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> c = s[i] - <span class="string">'a'</span>;</span><br><span class="line">            <span class="keyword">if</span>(u-&gt;next[c] == <span class="literal">NULL</span>) u-&gt;next[c] = <span class="keyword">new</span> Node;</span><br><span class="line">            u = u-&gt;next[c];</span><br><span class="line">        &#125;</span><br><span class="line">        u-&gt;sum++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getfail</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">queue</span>&lt;Node*&gt; q;</span><br><span class="line">        q.push(root);</span><br><span class="line">        <span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line">            Node* u = q.front();</span><br><span class="line">            q.pop();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(u-&gt;next[i] != <span class="literal">NULL</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(u == root) &#123;u-&gt;next[i]-&gt;fail = root;&#125;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        Node* tmp = u-&gt;fail;</span><br><span class="line">                        <span class="keyword">while</span>(tmp != <span class="literal">NULL</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span>(tmp-&gt;next[i] != <span class="literal">NULL</span>) &#123;</span><br><span class="line">                                u-&gt;next[i]-&gt;fail = tmp-&gt;next[i];</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            tmp = tmp-&gt;fail;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span>(tmp == <span class="literal">NULL</span>) u-&gt;next[i]-&gt;fail = root;</span><br><span class="line">                    &#125;</span><br><span class="line">                    q.push(u-&gt;next[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="built_in">string</span> s)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        Node* u = root;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> c = s[i] - <span class="string">'a'</span>;</span><br><span class="line">            <span class="keyword">while</span>(u != root &amp;&amp; u-&gt;next[c] == <span class="literal">NULL</span>) &#123;u = u-&gt;fail;&#125;</span><br><span class="line">            u = u-&gt;next[c];</span><br><span class="line">            <span class="keyword">if</span>(u == <span class="literal">NULL</span>) u = root;</span><br><span class="line">            Node* tmp = u;</span><br><span class="line">            <span class="keyword">while</span>(tmp != root) &#123;</span><br><span class="line">                <span class="keyword">if</span>(tmp-&gt;sum &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    cnt += tmp-&gt;sum;</span><br><span class="line">                    tmp-&gt;sum = <span class="number">-1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">                tmp = tmp-&gt;fail;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">fre</span><span class="params">(Node* u)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(u-&gt;next[i] != <span class="literal">NULL</span>) fre(u-&gt;next[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">free</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;ac;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span>(t--) &#123;</span><br><span class="line">        ac.init();</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">string</span> s;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line">            ac.insert(s);</span><br><span class="line">        &#125;</span><br><span class="line">        ac.getfail();</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ac.query(s) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        ac.fre(ac.root);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;转载&quot;&gt;&lt;a href=&quot;#转载&quot; class=&quot;headerlink&quot; title=&quot;转载&quot;&gt;&lt;/a&gt;转载&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/wenzhixin/p/9448045.html&quot; target=&quot;_bl
      
    
    </summary>
    
      <category term="字符串处理" scheme="https://weibolu.online/categories/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86/"/>
    
    
      <category term="ACM模板" scheme="https://weibolu.online/tags/ACM%E6%A8%A1%E6%9D%BF/"/>
    
      <category term="字符串处理" scheme="https://weibolu.online/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>字符串处理2 —— 字典树</title>
    <link href="https://weibolu.online/2019/04/23/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%862%20%E2%80%94%E2%80%94%20%E5%AD%97%E5%85%B8%E6%A0%91/"/>
    <id>https://weibolu.online/2019/04/23/字符串处理2 —— 字典树/</id>
    <published>2019-04-23T15:46:28.000Z</published>
    <updated>2019-04-24T03:11:55.612Z</updated>
    
    <content type="html"><![CDATA[<h2 id="转载"><a href="#转载" class="headerlink" title="转载"></a>转载</h2><p><a href="https://www.cnblogs.com/wenzhixin/p/9417292.html" target="_blank" rel="noopener">字典树的构造</a></p><h2 id="hint"><a href="#hint" class="headerlink" title="hint"></a>hint</h2><p>其实字典树(Trie)还是很容易理解的，就是一棵常规的多叉树，每个分支分别对应不同的字符，这样每个字符都可以用一条从根到叶子节点的路径表示出来。<br>同时，字典树其实记录的就是公共前缀，可以用来查找公共前缀。</p><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><p>上述连接中有字典树的三种实现，分别是用矩阵、链表和左右儿子表示法，其中前两种比较常见，最后一种我也不太熟悉φ(*￣0￣)。</p><p>不过按着测试结果来看，链表法耗费空间，而且时间效率较低。<br>矩阵的空间使用和链表差不多，但时间已经很优化了，毕竟是用空间换来的，嘤嘤嘤！<br>而最后一种方式则在时间和空间上达到了最优，时间空间两开花？<br>但之后的AC自动机可以很方便的用链表和矩阵构造，那就把三种都记录下来吧QAQ</p><p>(ps:如果用链表存的话，提交要用c++哦，用g++的话很容易爆内存，因为g++中指针的空间比c++大)</p><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span> + <span class="number">100</span>;        <span class="comment">//类似内存池，只要不超内存，尽量开大点</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> sigma_size = <span class="number">26</span>;         <span class="comment">//表示字符的数量</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Trie</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> ch[maxn][sigma_size];</span><br><span class="line">    <span class="keyword">int</span> val[maxn];</span><br><span class="line">    <span class="keyword">int</span> sz;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span>                    <span class="comment">//初始化，释放内存池</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        sz = <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">memset</span>(ch[<span class="number">0</span>], <span class="number">0</span>, <span class="keyword">sizeof</span> ch[<span class="number">0</span>]); <span class="comment">//节点单独初始化，可以防止爆内存</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">idx</span><span class="params">(<span class="keyword">char</span> c)</span> </span>&#123;<span class="keyword">return</span> c - <span class="string">'a'</span>;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">char</span> *s, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = <span class="built_in">strlen</span>(s);         </span><br><span class="line">        <span class="keyword">int</span> u = <span class="number">0</span>;                  <span class="comment">//0表示根节点</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> c = idx(s[i]);</span><br><span class="line">            <span class="keyword">if</span>(!ch[u][c]) &#123;</span><br><span class="line">                <span class="built_in">memset</span>(ch[sz], <span class="number">0</span>, <span class="keyword">sizeof</span> ch[sz]);</span><br><span class="line">                ch[u][c] = sz++;</span><br><span class="line">            &#125;</span><br><span class="line">            u = ch[u][c];</span><br><span class="line">        &#125;</span><br><span class="line">        val[u] = v;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">query</span><span class="params">(<span class="keyword">char</span> *t)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = <span class="built_in">strlen</span>(t);</span><br><span class="line">        <span class="keyword">int</span> u = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> c = idx(t[i]);</span><br><span class="line">            <span class="keyword">if</span>(!ch[u][c]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            u = ch[u][c];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> cnt;</span><br><span class="line">    Node* chi[<span class="number">26</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Trie</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    Node* root;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;root = creat();&#125;</span><br><span class="line">    <span class="function">Node* <span class="title">create</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Node* tmp = <span class="keyword">new</span> Node;</span><br><span class="line">        tmp-&gt;cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(tmp-&gt;chi, <span class="number">0</span>, <span class="keyword">sizeof</span> tmp-&gt;chi);</span><br><span class="line">        <span class="keyword">return</span> tmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">char</span>* s)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Node* u = root;</span><br><span class="line">        <span class="keyword">int</span> len = <span class="built_in">strlen</span>(s);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> c = s[i] - <span class="string">'a'</span>;</span><br><span class="line">            <span class="keyword">if</span>(u-&gt;chi[c] == <span class="literal">NULL</span>) &#123;</span><br><span class="line">                u-&gt;chi[c] = creat();</span><br><span class="line">            &#125;</span><br><span class="line">            u = u-&gt;chi[c];</span><br><span class="line">            u-&gt;cnt++;                   <span class="comment">//cnt记录的是以它为前缀的数量，不同题目要保存不同的值</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">char</span>* t)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = <span class="built_in">strlen</span>(t);</span><br><span class="line">        Node* u = root;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> c = t[i] - <span class="string">'a'</span>;</span><br><span class="line">            <span class="keyword">if</span>(u-&gt;chi[c] == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            u = u-&gt;chi[c];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> u-&gt;cnt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">fre</span><span class="params">(Node* u)</span>                   <span class="comment">//用链表一定要记得释放内存哦（￣︶￣）↗　</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(u-&gt;chi[i] != <span class="literal">NULL</span>) fre(u-&gt;chi[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">free</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="左右儿子法"><a href="#左右儿子法" class="headerlink" title="左右儿子法"></a>左右儿子法</h3><p>这才是王道。。。虽然我不太会(/▽＼)<br>精髓在于把一棵多叉树转换为二叉树<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxw = <span class="number">1000010</span>; <span class="comment">//单词的最大个数 </span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxwl = <span class="number">101</span>;<span class="comment">//单词的最大长度</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxnode = maxw * maxwl + <span class="number">10</span>;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Trie</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> head[maxnode]; <span class="comment">//head[i]表示第i个结点的左儿子的编号</span></span><br><span class="line">    <span class="keyword">int</span> next[maxnode]; <span class="comment">//next[i]表示第i个结点的右兄弟的编号</span></span><br><span class="line">    <span class="keyword">int</span> val[maxnode];  <span class="comment">//以该结点为前缀的单词的个数 </span></span><br><span class="line">    <span class="keyword">char</span> ch[maxnode];  <span class="comment">//ch[i]表示第i个结点的字符 </span></span><br><span class="line">    <span class="keyword">int</span> sz;            <span class="comment">//结点总数</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        sz = <span class="number">1</span>;</span><br><span class="line">        head[<span class="number">0</span>] = next[<span class="number">0</span>] = val[<span class="number">0</span>] = <span class="number">0</span>; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">char</span> *s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> u = <span class="number">0</span>, len = <span class="built_in">strlen</span>(s), v;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i ++) &#123;</span><br><span class="line">            <span class="comment">//在当前u的所有儿子中找s[i] </span></span><br><span class="line">            <span class="keyword">bool</span> found = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">for</span>(v = head[u]; v != <span class="number">0</span>; v = next[v]) &#123;<span class="comment">//遍历当前u的所有儿子 </span></span><br><span class="line">                <span class="keyword">if</span>(ch[v] == s[i]) &#123;</span><br><span class="line">                    found = <span class="literal">true</span>;<span class="comment">//找到 </span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!found) &#123;<span class="comment">//没有找到则新建一个结点作为当前结点的儿子 </span></span><br><span class="line">                v = sz++;</span><br><span class="line">                ch[v] = s[i];</span><br><span class="line">                val[v] = <span class="number">0</span>;</span><br><span class="line">                </span><br><span class="line">                next[v] = head[u]; <span class="comment">//该结点的右兄弟是head[u](当前结点的左儿子)</span></span><br><span class="line">                head[u] = v;       <span class="comment">//v是当前结点u的左儿子</span></span><br><span class="line">                head[v] = <span class="number">0</span>;       <span class="comment">//v没有左儿子(叶子结点) </span></span><br><span class="line">            &#125; </span><br><span class="line">            </span><br><span class="line">            u = v;<span class="comment">//继续往下走 </span></span><br><span class="line">            val[u]++; <span class="comment">//以当前结点为前缀为单词个数++ </span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">char</span> *t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> u = <span class="number">0</span>, len = <span class="built_in">strlen</span>(t), v;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">bool</span> found = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">for</span>(v = head[u]; v != <span class="number">0</span>; v = next[v]) &#123;</span><br><span class="line">                <span class="keyword">if</span>(ch[v] == t[i]) &#123;</span><br><span class="line">                    found = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!found)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            u = v;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> val[u];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;转载&quot;&gt;&lt;a href=&quot;#转载&quot; class=&quot;headerlink&quot; title=&quot;转载&quot;&gt;&lt;/a&gt;转载&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/wenzhixin/p/9417292.html&quot; target=&quot;_bl
      
    
    </summary>
    
      <category term="字符串处理" scheme="https://weibolu.online/categories/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86/"/>
    
    
      <category term="ACM模板" scheme="https://weibolu.online/tags/ACM%E6%A8%A1%E6%9D%BF/"/>
    
      <category term="字符串处理" scheme="https://weibolu.online/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>LIFE4 —— 最近打算.md</title>
    <link href="https://weibolu.online/2019/04/23/LIFE4%20%E2%80%94%E2%80%94%20%E6%9C%80%E8%BF%91%E6%89%93%E7%AE%97/"/>
    <id>https://weibolu.online/2019/04/23/LIFE4 —— 最近打算/</id>
    <published>2019-04-23T15:04:59.000Z</published>
    <updated>2019-04-24T16:45:53.879Z</updated>
    
    <content type="html"><![CDATA[<h3 id="最近"><a href="#最近" class="headerlink" title="最近"></a>最近</h3><p>最近状态不太好。。。<br>cf一个不小心就连掉了100分，我的篮名(っ °Д °;)っ<br>而且最近一直被各种dp虐，真的要自闭了ヽ(<em>。&gt;Д&lt;)o゜&gt;)<br>马上又要期中考试了，也要开始着手准备(/▽＼)<br>前天也去了学校的acm选拔赛，想来已经入坑一年了，去年这个时候真的是特别侥幸才在最后三分钟过了一道题，勉强进入了预备役，不过到现在还没有打出像样的成绩，一直在被虐。。。<br>额，说起来其实进步也不少，最起码今年的选拔赛我基本都可以一眼看出是什么题目了（大二老狗要是还看不出来。。。）<br>心里也算是一直有着自己的梦想吧，总想着哪天我也可以很厉害，去哪里拿个金奖啦之类的(￣︶￣</em>))咸鱼的梦。。。</p><p>可能我是个比较乐观的人吧，总想着一切皆有可能，尽管有些不切实际，有些中二，但这就是我的青春了，不是吗？我应该感激自己成功走到了acm这条路上，最起码多年后我回忆起这段时光我也会觉得激动，我也不会后悔！</p><h3 id="未来"><a href="#未来" class="headerlink" title="未来"></a>未来</h3><p>之后要开始做一段时间的dp了，感觉这个就像基本功一样，如果缺少了这个素质之后可能会很艰难。<br>然后就是准备下四省赛了，还有一个月的时间，这其实也是我们队伍的第一场正式比赛，虽然目测我们队实力最弱，但我要全力以赴来要应对这场比赛了，就定个小目标最少拿银吧。<br>cf的分数要再上上，距离5月还有三场，定个小目标上到1700+<br>最后准备下期中考试( •̀ ω •́ )✧</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;最近&quot;&gt;&lt;a href=&quot;#最近&quot; class=&quot;headerlink&quot; title=&quot;最近&quot;&gt;&lt;/a&gt;最近&lt;/h3&gt;&lt;p&gt;最近状态不太好。。。&lt;br&gt;cf一个不小心就连掉了100分，我的篮名(っ °Д °;)っ&lt;br&gt;而且最近一直被各种dp虐，真的要自闭了ヽ(&lt;
      
    
    </summary>
    
      <category term="LIFE" scheme="https://weibolu.online/categories/LIFE/"/>
    
    
      <category term="What is life?" scheme="https://weibolu.online/tags/What-is-life/"/>
    
  </entry>
  
  <entry>
    <title>数据结构3 —— 并查集</title>
    <link href="https://weibolu.online/2019/04/18/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%843%20%E2%80%94%E2%80%94%20%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    <id>https://weibolu.online/2019/04/18/数据结构3 —— 并查集/</id>
    <published>2019-04-18T15:46:28.000Z</published>
    <updated>2019-05-15T12:42:06.864Z</updated>
    
    <content type="html"><![CDATA[<h2 id="hint"><a href="#hint" class="headerlink" title="hint"></a>hint</h2><p>用于划分属性<br>构造O(n)  查询近似O(1)<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> cha[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) cha[i] = i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findd</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(cha[a] == a) <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> findd(cha[a]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">unite</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> A = findd(a);</span><br><span class="line">    <span class="keyword">int</span> B = findd(b);</span><br><span class="line">    <span class="keyword">if</span>(A == B) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">else</span> cha[B] = A;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//优化</span></span><br><span class="line"><span class="comment">//迭代查找函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getf</span><span class="params">(<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p = v, t;</span><br><span class="line">    <span class="keyword">while</span>(f[p] != p) p = f[p];</span><br><span class="line">    <span class="keyword">int</span> x = v;</span><br><span class="line">    <span class="keyword">while</span>(x != p) &#123;t = f[x]; f[x] = p; x = t;&#125;</span><br><span class="line">    <span class="keyword">return</span> v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//按秩合并  数据较多时合并优化为log(n),额外花费空间O(n)</span></span><br><span class="line"><span class="keyword">int</span> rnk[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Merge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t1 = getf(x), t2 = getf(y);</span><br><span class="line">    <span class="keyword">if</span>(t1 == t2) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">if</span>(rnk[t1] &gt; rnk[t2]) cha[t2] = t1;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        cha[t1] = t2;</span><br><span class="line">        <span class="keyword">if</span>(rnk[t1] == rnk[t2]) rnk[t2]++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;hint&quot;&gt;&lt;a href=&quot;#hint&quot; class=&quot;headerlink&quot; title=&quot;hint&quot;&gt;&lt;/a&gt;hint&lt;/h2&gt;&lt;p&gt;用于划分属性&lt;br&gt;构造O(n)  查询近似O(1)&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;tab
      
    
    </summary>
    
      <category term="数据结构" scheme="https://weibolu.online/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="ACM模板" scheme="https://weibolu.online/tags/ACM%E6%A8%A1%E6%9D%BF/"/>
    
      <category term="数据结构" scheme="https://weibolu.online/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>字符串处理1 —— kmp算法</title>
    <link href="https://weibolu.online/2019/04/16/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%861%20%E2%80%94%E2%80%94%20kmp%E7%AE%97%E6%B3%95/"/>
    <id>https://weibolu.online/2019/04/16/字符串处理1 —— kmp算法/</id>
    <published>2019-04-16T15:46:28.000Z</published>
    <updated>2019-07-14T14:03:02.798Z</updated>
    
    <content type="html"><![CDATA[<p>##转载<br><a href="https://blog.csdn.net/I_believe_CWJ/article/details/80438240" target="_blank" rel="noopener">kmp讲解</a></p><p>##hint<br> 关键就在于next数组的使用，存下每个等长前缀的位置。<br> kmp算法可以把常规匹配的时间复杂度从O(n*m)优化到O(n+m)</p><p> 对于短字符串建立next数组，然后与长字符串进行匹配。</p><p>##模板<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> next[maxn];</span><br><span class="line"><span class="keyword">int</span> ans;                        <span class="comment">//ans为匹配数量</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">kmp_next</span><span class="params">(<span class="built_in">string</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    next[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; s.size(); i++) &#123;</span><br><span class="line">        <span class="keyword">while</span>(k &gt; <span class="number">-1</span> &amp;&amp; s[i] != s[k+<span class="number">1</span>]) k = next[k];</span><br><span class="line">        <span class="keyword">if</span>(s[i] == s[k+<span class="number">1</span>]) k++;</span><br><span class="line">        next[i] = k;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">kmp</span><span class="params">(<span class="built_in">string</span> s1, <span class="built_in">string</span> s2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s1.size(); i++) &#123;</span><br><span class="line">        <span class="keyword">while</span>(k &gt; <span class="number">-1</span> &amp;&amp; s1[i] != s2[k+<span class="number">1</span>]) k = next[k];</span><br><span class="line">        <span class="keyword">if</span>(s1[i] == s2[k+<span class="number">1</span>]) k++;</span><br><span class="line">        <span class="keyword">if</span>(k == s2.size()) ans++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s1, s2; <span class="comment">//s2为短字符串，s1为长串</span></span><br><span class="line">    kmp_next(s2);</span><br><span class="line">    kmp(s1, s2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;##转载&lt;br&gt;&lt;a href=&quot;https://blog.csdn.net/I_believe_CWJ/article/details/80438240&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;kmp讲解&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;##hint&lt;br&gt;
      
    
    </summary>
    
      <category term="字符串处理" scheme="https://weibolu.online/categories/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86/"/>
    
    
      <category term="ACM模板" scheme="https://weibolu.online/tags/ACM%E6%A8%A1%E6%9D%BF/"/>
    
      <category term="字符串处理" scheme="https://weibolu.online/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>数据结构2 —— 线段树</title>
    <link href="https://weibolu.online/2019/04/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%842%20%E2%80%94%E2%80%94%20%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    <id>https://weibolu.online/2019/04/16/数据结构2 —— 线段树/</id>
    <published>2019-04-15T16:57:05.000Z</published>
    <updated>2019-04-24T02:48:51.502Z</updated>
    
    <content type="html"><![CDATA[<p>##转载<br><a href="https://blog.csdn.net/u012469987/article/details/41357377" target="_blank" rel="noopener">详细的讲解线段树</a></p><p>##定义<br>虽然作用和树状数组很相似，但结构与树状数组完全不同，这是一棵真正的树（￣︶￣）↗　</p><p>简单说，线段树就是一棵二叉树，每个节点存储的是一段区间，树根节点存储的是整个区间长度，那么它到底能做什么呢？QAQ</p><p>第一种常见的操作就是可以在树的节点上存储区间的一个特征值，比如最大值，最小值，或者区间和等等……而且可以利用左右子树很快的进行更新。<br>emmm画图太麻烦了，还是先看上面的转载吧。</p><p>进阶操作就是进行区间更新啦，这也是线段树比树状数组优秀的地方所在，这里就要用到一种lazy的思想啦，如果每次更新都要更新到最底层时间复杂度将会相当爆炸(っ °Д °;)っ<br>而我们的lazy思想就是将这个改变先存起来，直到我需要统计这个区间的值时，再把lazy里偷懒没有改变的量改变了，再把lazy推给子节点，同样的什么时候需要求子节点的值了，再去计算。是不是有点像拖延症，怪不得叫lazy…φ(*￣0￣)</p><p>能够进行点更新和区间更新以及查询操作，基本就算入门了，让我们来A几道裸题吧( •̀ ω •́ )✧</p><p>ps:线段树的空间开辟要为原大小的4倍哦</p><p>##模板<br>当然，先上模板(其实并不是模板，只是为了说明各种操作的运行原理)QAQ</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//常用宏定义</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mid ((l+r)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson rt &lt;&lt; 1, l, mid</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson rt &lt;&lt; 1|1, mid+1, r</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> Max[maxn&lt;&lt;<span class="number">2</span>], Min[maxn&lt;&lt;<span class="number">2</span>], val[maxn];</span><br><span class="line"></span><br><span class="line"><span class="comment">//建树</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l == r) Min[rt] = Max[rt] = val[l];</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        build(lson);</span><br><span class="line">        build(rson);</span><br><span class="line">        Max[rt] = max(Max[rt&lt;&lt;<span class="number">1</span>], Max[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line">        Min[rt] = min(Min[rt&lt;&lt;<span class="number">1</span>], Min[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//区间查询</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span>  <span class="comment">//L和R是要查询的区间</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R) &#123;</span><br><span class="line">        ans1 = max(ans1, Max[rt]);</span><br><span class="line">        ans2 = min(ans2, Min[rt]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(L &lt;= mid) query(lson, L, R);</span><br><span class="line">        <span class="keyword">if</span>(R &gt; mid) query(rson, L, R);     <span class="comment">//意识到宏定义有多好用了吧</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//点更新</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update1</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x)</span>  <span class="comment">//x是要更新的位置</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l == r) sum[rt] += <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(x &lt;= mid) update(lson, x);</span><br><span class="line">        <span class="keyword">else</span> update(rson, x);</span><br><span class="line">        sum[rt] = sum[rt&lt;&lt;<span class="number">1</span>] + sum[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//区间查询</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushDown</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> len)</span>    <span class="comment">//对延迟的增量进行操作</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    add[rt&lt;&lt;<span class="number">1</span>] += add[rt];</span><br><span class="line">    add[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>] += add[rt];</span><br><span class="line">    sum[rt&lt;&lt;<span class="number">1</span>] += (len-(len&gt;&gt;<span class="number">1</span>)) * add[rt];</span><br><span class="line">    sum[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>] += (len&gt;&gt;<span class="number">1</span>) * add[rt];</span><br><span class="line">    add[rt] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update2</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> L, <span class="keyword">int</span> R, ll z)</span><span class="comment">//这个是区间增加</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R) &#123;</span><br><span class="line">        add[rt] += z;</span><br><span class="line">        ll t1 = (r-l+<span class="number">1</span>) * z;</span><br><span class="line">        sum[rt] += t1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(add[rt]) pushDown(rt, r-l+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(L &lt;= mid) update2(lson, L, R, z);</span><br><span class="line">        <span class="keyword">if</span>(R &gt; mid) update2(rson, L, R, z);</span><br><span class="line">        sum[rt] = sum[rt&lt;&lt;<span class="number">1</span>] + sum[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>##例题</p><h3 id="Apoj-3264"><a href="#Apoj-3264" class="headerlink" title="Apoj 3264"></a>A<a href="http://poj.org/problem?id=3264" target="_blank" rel="noopener">poj 3264</a></h3><p>记录区间最大和最小值，涉及点更新和区间查询<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i, a, b) for(int i = a; i &lt;= b; i++)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-6</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mid ((l+r)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson rt&lt;&lt;1, l, mid</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson rt&lt;&lt;1|1, mid+1, r</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5e4</span> + <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">int</span> Max[maxn&lt;&lt;<span class="number">2</span>], Min[maxn&lt;&lt;<span class="number">2</span>], val[maxn];</span><br><span class="line"><span class="keyword">int</span> ans1, ans2;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l == r) Min[rt] = Max[rt] = val[l];</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        build(lson);</span><br><span class="line">        build(rson);</span><br><span class="line">        Max[rt] = max(Max[rt&lt;&lt;<span class="number">1</span>], Max[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line">        Min[rt] = min(Min[rt&lt;&lt;<span class="number">1</span>], Min[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R) &#123;</span><br><span class="line">        ans1 = max(ans1, Max[rt]);</span><br><span class="line">        ans2 = min(ans2, Min[rt]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(L &lt;= mid) query(lson, L, R);</span><br><span class="line">        <span class="keyword">if</span>(R &gt; mid) query(rson, L, R);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;val[i]);</span><br><span class="line">        <span class="keyword">int</span> L, R;</span><br><span class="line">        build(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">            ans1 = -inf, ans2 = inf;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;L, &amp;R);</span><br><span class="line">            query(<span class="number">1</span>, <span class="number">1</span>, n, L, R);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans1-ans2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Bhdu-1754"><a href="#Bhdu-1754" class="headerlink" title="Bhdu 1754"></a>B<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1754" target="_blank" rel="noopener">hdu 1754</a></h3><p>记录区间最大值，设计点更新和区间查询<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i, a, b) for(int i = a; i &lt;= b; i++)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-6</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mid ((l+r)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson rt&lt;&lt;1, l, mid</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson rt&lt;&lt;1|1, mid+1, r</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e6</span>+<span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> Max[maxn&lt;&lt;<span class="number">2</span>], val[maxn];</span><br><span class="line"><span class="keyword">int</span> ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l == r) Max[rt] = val[l];</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        build(lson);</span><br><span class="line">        build(rson);</span><br><span class="line">        Max[rt] = max(Max[rt&lt;&lt;<span class="number">1</span>], Max[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l &gt;= L &amp;&amp; r &lt;= R) &#123;</span><br><span class="line">        ans = max(ans, Max[rt]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(L &lt;= mid) query(lson, L, R);</span><br><span class="line">        <span class="keyword">if</span>(R &gt; mid) query(rson, L, R);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> pos, <span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l == r &amp;&amp; l == pos) &#123;</span><br><span class="line">        Max[rt] = num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(pos &lt;= mid) update(lson, pos, num);</span><br><span class="line">        <span class="keyword">else</span> update(rson, pos, num);</span><br><span class="line">        Max[rt] = max(Max[rt&lt;&lt;<span class="number">1</span>], Max[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;val[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        build(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">        <span class="keyword">char</span> c, cc;</span><br><span class="line">        <span class="keyword">int</span> L, R;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%c"</span>, &amp;cc);</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%c"</span>, &amp;c);</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;L, &amp;R);</span><br><span class="line">            <span class="keyword">if</span>(c == <span class="string">'Q'</span>) &#123;</span><br><span class="line">                ans = -inf;</span><br><span class="line">                query(<span class="number">1</span>, <span class="number">1</span>, n, L, R);</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                update(<span class="number">1</span>, <span class="number">1</span>, n, L, R);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Chdu-1698"><a href="#Chdu-1698" class="headerlink" title="Chdu 1698"></a>C<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1698" target="_blank" rel="noopener">hdu 1698</a></h3><p>dota！！！( •̀ ω •́ )y，虽然我没怎么玩过，但这个界面让我想起了War3…<br>涉及到区间更新，以及它的更新方式是直接改变，不是增加。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i, a, b) for(int i = a; i &lt;= b; i++)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-6</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mid ((l+r)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson rt&lt;&lt;1, l, mid</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson rt&lt;&lt;1|1, mid+1, r</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> sum[maxn&lt;&lt;<span class="number">2</span>], add[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    add[rt] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l == r) sum[rt] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        build(lson);</span><br><span class="line">        build(rson);</span><br><span class="line">        sum[rt] = sum[rt&lt;&lt;<span class="number">1</span>] + sum[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update1</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> pos, <span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l == r &amp;&amp; pos == l) sum[rt] = num;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(pos &lt;= mid) &#123;</span><br><span class="line">            update1(lson, pos, num);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> update1(rson, pos, num);</span><br><span class="line">        sum[rt] = sum[rt&lt;&lt;<span class="number">1</span>] + sum[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushDown</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    add[rt&lt;&lt;<span class="number">1</span>] = add[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>] = add[rt];</span><br><span class="line">    sum[rt&lt;&lt;<span class="number">1</span>] = (len-(len&gt;&gt;<span class="number">1</span>)) * add[rt];</span><br><span class="line">    sum[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>] = (len&gt;&gt;<span class="number">1</span>)*add[rt];</span><br><span class="line">    add[rt] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R) &#123;</span><br><span class="line">        add[rt] = z;</span><br><span class="line">        sum[rt] = (r-l+<span class="number">1</span>) * z;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(add[rt]) pushDown(rt, r-l+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(L &lt;= mid) update(lson, L, R, z);</span><br><span class="line">        <span class="keyword">if</span>(R &gt; mid) update(rson, L, R, z);</span><br><span class="line">        sum[rt] = sum[rt&lt;&lt;<span class="number">1</span>] + sum[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> t1 = <span class="number">1</span>; t1 &lt;= t; t1++) &#123;</span><br><span class="line">        <span class="keyword">int</span> n, q;</span><br><span class="line">        <span class="keyword">int</span> x, y, z;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; q;</span><br><span class="line">        build(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= q; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;x, &amp;y, &amp;z);</span><br><span class="line">            update(<span class="number">1</span>, <span class="number">1</span>, n, x, y, z);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Case "</span> &lt;&lt; t1 &lt;&lt; <span class="string">": The total value of the hook is "</span> &lt;&lt; sum[<span class="number">1</span>] &lt;&lt; <span class="string">'.'</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Dpoj-3468"><a href="#Dpoj-3468" class="headerlink" title="Dpoj 3468"></a>D<a href="http://poj.org/problem?id=3468" target="_blank" rel="noopener">poj 3468</a></h3><p>对区间进行怎加，涉及区间更新和区间查询<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i, a, b) for(int i = a; i &lt;= b; i++)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-6</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mid ((l+r)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson rt&lt;&lt;1, l, mid</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson rt&lt;&lt;1|1, mid+1, r</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>+<span class="number">100</span>;</span><br><span class="line">ll sum[maxn&lt;&lt;<span class="number">2</span>], add[maxn&lt;&lt;<span class="number">2</span>], val[maxn];</span><br><span class="line">ll ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    add[rt] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l == r) sum[rt] = val[l];</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        build(lson);</span><br><span class="line">        build(rson);</span><br><span class="line">        sum[rt] = sum[rt&lt;&lt;<span class="number">1</span>] + sum[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushDown</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    add[rt&lt;&lt;<span class="number">1</span>] += add[rt];</span><br><span class="line">    add[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>] += add[rt];</span><br><span class="line">    sum[rt&lt;&lt;<span class="number">1</span>] += (len-(len&gt;&gt;<span class="number">1</span>)) * add[rt];</span><br><span class="line">    sum[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>] += (len&gt;&gt;<span class="number">1</span>) * add[rt];</span><br><span class="line">    add[rt] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> L, <span class="keyword">int</span> R, ll z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R) &#123;</span><br><span class="line">        add[rt] += z;</span><br><span class="line">        ll t1 = (r-l+<span class="number">1</span>)*z;</span><br><span class="line">        sum[rt] += t1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(add[rt])pushDown(rt, r-l+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(L &lt;= mid) update(lson, L, R, z);</span><br><span class="line">        <span class="keyword">if</span>(R &gt; mid) update(rson, L, R, z);</span><br><span class="line">        sum[rt] = sum[rt&lt;&lt;<span class="number">1</span>] + sum[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R) ans += sum[rt];</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(add[rt]) pushDown(rt, r-l+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(L &lt;= mid) query(lson, L, R);</span><br><span class="line">        <span class="keyword">if</span>(R &gt; mid) query(rson, L, R);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, q;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; q) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;val[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        build(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">        <span class="keyword">char</span> c1, c2;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= q; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%c"</span>, &amp;c1);</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%c"</span>, &amp;c2);</span><br><span class="line">            <span class="keyword">if</span>(c2 == <span class="string">'C'</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> a, b, c;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line">                update(<span class="number">1</span>, <span class="number">1</span>, n, a, b, c);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(c2 == <span class="string">'Q'</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> a, b;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;a, &amp;b);</span><br><span class="line">                ans = <span class="number">0</span>;</span><br><span class="line">                query(<span class="number">1</span>, <span class="number">1</span>, n, a, b);</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Epoj-2481"><a href="#Epoj-2481" class="headerlink" title="Epoj 2481"></a>E<a href="http://poj.org/problem?id=2481" target="_blank" rel="noopener">poj 2481</a></h3><p>利用线段树求逆序对，有点类似之前用树状数组的一道题目，重点在于理解它排完序后依次在树中添加节点前查询就是对应的点的答案，只涉及点更新和区间查询。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-6</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">100</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mid ((l+r)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson rt&lt;&lt;1, l, mid</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson rt&lt;&lt;1|1, mid+1, r</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> sum[maxn &lt;&lt; <span class="number">2</span>], ans[maxn];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">NODE</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r, id;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> NODE &amp;a)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(l == a.l &amp;&amp; r &gt; a.r) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(l &lt; a.l) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;pp[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l == r) sum[rt] += <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(x &lt;= mid) update(lson, x);</span><br><span class="line">        <span class="keyword">else</span> update(rson, x);</span><br><span class="line">        sum[rt] = sum[rt&lt;&lt;<span class="number">1</span>] + sum[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l &gt;= L &amp;&amp; r &lt;= R) &#123;ret += sum[rt]; <span class="keyword">return</span> ret;&#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(L &lt;= mid) ret += query(lson, L, R);</span><br><span class="line">        <span class="keyword">if</span>(R &gt; mid) ret += query(rson, L, R);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n &amp;&amp; n) &#123;</span><br><span class="line">        <span class="built_in">memset</span>(sum, <span class="number">0</span>, <span class="keyword">sizeof</span> sum);</span><br><span class="line">        <span class="built_in">memset</span>(ans, <span class="number">0</span>, <span class="keyword">sizeof</span> ans);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;pp[i].l, &amp;pp[i].r);</span><br><span class="line">            pp[i].id = i;</span><br><span class="line">            pp[i].l++;</span><br><span class="line">            pp[i].r++;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(pp+<span class="number">1</span>, pp+<span class="number">1</span>+n);</span><br><span class="line">        update(<span class="number">1</span>, <span class="number">1</span>, n, pp[<span class="number">1</span>].r);</span><br><span class="line">        ans[pp[<span class="number">1</span>].id] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(pp[i].l == pp[i<span class="number">-1</span>].l &amp;&amp; pp[i].r == pp[i<span class="number">-1</span>].r) &#123;</span><br><span class="line">                ans[pp[i].id] = ans[pp[i<span class="number">-1</span>].id];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> ans[pp[i].id] = query(<span class="number">1</span>, <span class="number">1</span>, n, pp[i].r, n);</span><br><span class="line">            <span class="comment">//cout &lt;&lt; 'a' &lt;&lt; endl;</span></span><br><span class="line">            update(<span class="number">1</span>, <span class="number">1</span>, n, pp[i].r);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans[<span class="number">1</span>] ;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) <span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; ans[i];</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>That’s all, thank you!!!(￣︶￣*))</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;##转载&lt;br&gt;&lt;a href=&quot;https://blog.csdn.net/u012469987/article/details/41357377&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;详细的讲解线段树&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;##定义&lt;br&gt;虽然
      
    
    </summary>
    
      <category term="数据结构" scheme="https://weibolu.online/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="ACM模板" scheme="https://weibolu.online/tags/ACM%E6%A8%A1%E6%9D%BF/"/>
    
      <category term="数据结构" scheme="https://weibolu.online/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>ACM技巧1 —— 快速读入</title>
    <link href="https://weibolu.online/2019/04/15/ACM%E6%8A%80%E5%B7%A71%20%E2%80%94%E2%80%94%20%E5%BF%AB%E9%80%9F%E8%AF%BB%E5%85%A5/"/>
    <id>https://weibolu.online/2019/04/15/ACM技巧1 —— 快速读入/</id>
    <published>2019-04-15T12:57:02.000Z</published>
    <updated>2019-05-20T11:33:52.066Z</updated>
    
    <content type="html"><![CDATA[<h2 id="针对acm中的一些输入问题："><a href="#针对acm中的一些输入问题：" class="headerlink" title="针对acm中的一些输入问题："></a>针对acm中的一些输入问题：</h2><h3 id="1-常见的就是用scanf和printf来代替cin、cout"><a href="#1-常见的就是用scanf和printf来代替cin、cout" class="headerlink" title="1.常见的就是用scanf和printf来代替cin、cout"></a>1.常见的就是用scanf和printf来代替cin、cout</h3><h3 id="2-但是当侧式组数比较多时，方法1也不太好用了，这时候就有一种新的方法：快速读入"><a href="#2-但是当侧式组数比较多时，方法1也不太好用了，这时候就有一种新的方法：快速读入" class="headerlink" title="2.但是当侧式组数比较多时，方法1也不太好用了，这时候就有一种新的方法：快速读入"></a>2.但是当侧式组数比较多时，方法1也不太好用了，这时候就有一种新的方法：快速读入</h3><p>快速读入的本质其实是用读入字符来代替读入整数</p><p>比如，下面这个是常见的int和long long型数据的快速读入，十分好用，但要注意下不同环境中换行的符号不同。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> fastIO &#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> BUF_SIZE 100000</span></span><br><span class="line">    <span class="comment">//fread -&gt; read</span></span><br><span class="line">    <span class="keyword">bool</span> IOerror = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">nc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">char</span> buf[BUF_SIZE], *p1 = buf + BUF_SIZE, *pend = buf + BUF_SIZE;</span><br><span class="line">        <span class="keyword">if</span>(p1 == pend) &#123;</span><br><span class="line">            p1 = buf;</span><br><span class="line">            pend = buf + fread(buf, <span class="number">1</span>, BUF_SIZE, <span class="built_in">stdin</span>);</span><br><span class="line">            <span class="keyword">if</span>(pend == p1) &#123;</span><br><span class="line">                IOerror = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> *p1++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">blank</span><span class="params">(<span class="keyword">char</span> ch)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ch == <span class="string">' '</span> || ch == <span class="string">'\n'</span> || ch == <span class="string">'\r'</span> || ch == <span class="string">'\t'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> ch;</span><br><span class="line">        <span class="keyword">while</span>(blank(ch = nc()));</span><br><span class="line">        <span class="keyword">if</span>(IOerror)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">for</span>(x = ch - <span class="string">'0'</span>; (ch = nc()) &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>; x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">readll</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> &amp;x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> ch;</span><br><span class="line">        <span class="keyword">while</span>(blank(ch = nc()));</span><br><span class="line">        <span class="keyword">if</span>(IOerror)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">for</span>(x = ch - <span class="string">'0'</span>; (ch = nc()) &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>; x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">undef</span> BUF_SIZE</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="多种类型快速读入传送门"><a href="#多种类型快速读入传送门" class="headerlink" title="多种类型快速读入传送门"></a>多种类型快速读入传送门</h3><p><a href="https://blog.csdn.net/qq_36297813/article/details/87874335" target="_blank" rel="noopener">转载下找到的重载的快速读入</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;针对acm中的一些输入问题：&quot;&gt;&lt;a href=&quot;#针对acm中的一些输入问题：&quot; class=&quot;headerlink&quot; title=&quot;针对acm中的一些输入问题：&quot;&gt;&lt;/a&gt;针对acm中的一些输入问题：&lt;/h2&gt;&lt;h3 id=&quot;1-常见的就是用scanf和pri
      
    
    </summary>
    
      <category term="ACM技巧" scheme="https://weibolu.online/categories/ACM%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="ACM模板" scheme="https://weibolu.online/tags/ACM%E6%A8%A1%E6%9D%BF/"/>
    
  </entry>
  
  <entry>
    <title>数据结构1 —— 树状数组</title>
    <link href="https://weibolu.online/2019/04/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%841%20%E2%80%94%E2%80%94%20%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
    <id>https://weibolu.online/2019/04/06/数据结构1 —— 树状数组/</id>
    <published>2019-04-05T16:57:05.000Z</published>
    <updated>2019-04-24T02:48:55.402Z</updated>
    
    <content type="html"><![CDATA[<h2 id="转载"><a href="#转载" class="headerlink" title="转载"></a>转载</h2><p>稍微学习下后就知道树状数组是怎么一回事了，先把我看到的好的博客连接出来吧：<br><a href="https://blog.csdn.net/Yaokai_AssultMaster/article/details/79492190" target="_blank" rel="noopener">https://blog.csdn.net/Yaokai_AssultMaster/article/details/79492190</a></p><p><a href="https://blog.csdn.net/FlushHip/article/details/79165701" target="_blank" rel="noopener">https://blog.csdn.net/FlushHip/article/details/79165701</a></p><p><a href="https://blog.csdn.net/guhaiteng/article/details/52138756" target="_blank" rel="noopener">例题poj2299和离散化</a></p><h2 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h2><p>树状数组和线段树的作用相似，都是实现对单点的数据修改，以及对范围的查询，比起直接用数组存，树状数组可以将时间复杂度优化到O(nlogn)，极其方便还好写。<br>值得注意的是线段树不能有零这个点，因为零无法操作，会造成死循环。<br>还有与树状数组十分匹配的一种做法就是进行离散化操作，将原表中的元素排好序并给出其排好序的标号。</p><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><p>其实根本不用模板，但还是手写了一个：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BIT</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> tree[maxn];</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;<span class="keyword">return</span> x &amp; (-x);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) tree[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(; p &lt;= n; p += lowbit(p)) &#123;</span><br><span class="line">            tree[p] += x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(; p &gt; <span class="number">0</span>; p -= lowbit(p)) &#123;</span><br><span class="line">            ret += tree[p];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getsum</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> query(r) - query(l<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p>写了许多简单的例题练手，比如这个：<br><a href="http://poj.org/problem?id=2352" target="_blank" rel="noopener">poj 2352</a><br>要注意到题目中的y值已经排好序了，所以只用将x排序，然后放到一维上，再生成树状数组就行了。</p><p>代码如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">15100</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">NODE</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x, y, pos;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> NODE a)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(x &lt; a.x) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(x == a.x &amp;&amp; y &lt; a.y) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;nn[maxn];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BIT</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> tree[maxn];</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;<span class="keyword">return</span> x &amp; (-x);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) tree[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(; p &lt;= n; p += lowbit(p)) &#123;</span><br><span class="line">            tree[p] += x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(; p &gt; <span class="number">0</span>; p -= lowbit(p)) &#123;</span><br><span class="line">            ret += tree[p];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getsum</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> query(r) - query(l<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;bb;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a1[maxn], ans[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; nn[i].x &gt;&gt; nn[i].y;</span><br><span class="line">        nn[i].pos = i;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(nn+<span class="number">1</span>, nn+n+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        a1[nn[i].pos] = i;              <span class="comment">//离散化</span></span><br><span class="line">        <span class="comment">//cout &lt;&lt; a1[nn[i].pos] &lt;&lt; endl;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(ans, <span class="number">0</span>, <span class="keyword">sizeof</span> ans);</span><br><span class="line">    bb.init();</span><br><span class="line">    bb.n = n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        bb.add(a1[i], <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> x = bb.query(a1[i]) - <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">'a'</span> &lt;&lt; x &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        ans[x]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">5</span></span><br><span class="line"><span class="comment">1 1</span></span><br><span class="line"><span class="comment">5 1</span></span><br><span class="line"><span class="comment">7 1</span></span><br><span class="line"><span class="comment">3 3</span></span><br><span class="line"><span class="comment">5 5</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;转载&quot;&gt;&lt;a href=&quot;#转载&quot; class=&quot;headerlink&quot; title=&quot;转载&quot;&gt;&lt;/a&gt;转载&lt;/h2&gt;&lt;p&gt;稍微学习下后就知道树状数组是怎么一回事了，先把我看到的好的博客连接出来吧：&lt;br&gt;&lt;a href=&quot;https://blog.csdn.ne
      
    
    </summary>
    
      <category term="数据结构" scheme="https://weibolu.online/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="ACM模板" scheme="https://weibolu.online/tags/ACM%E6%A8%A1%E6%9D%BF/"/>
    
      <category term="数据结构" scheme="https://weibolu.online/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>LIFE3 —— cf题解暂缓</title>
    <link href="https://weibolu.online/2019/04/06/LIFE3%20%E2%80%94%E2%80%94%20cf%E9%A2%98%E8%A7%A3%E6%9A%82%E7%BC%93/"/>
    <id>https://weibolu.online/2019/04/06/LIFE3 —— cf题解暂缓/</id>
    <published>2019-04-05T16:35:43.000Z</published>
    <updated>2019-04-24T02:57:10.621Z</updated>
    
    <content type="html"><![CDATA[<p>好久没有写过cf题解了，但这几场cf也都没拉下（ps:包括愚人节那场，令人印象深刻的B题），只是发现如果我疲于写题解的话就没有太多时间去学新知识了，所以我决定先定一个小目标，把cf打到紫名，然后再坚持写题解（不然写的题解也都是些水题），不过蓝名的感觉真爽，嘿嘿，得瑟一波！( •̀ ω •́ )✧</p><p>然后明天要去沙漠玩两天，cf估计是打不上了，之后可以发篇博客晒照片。</p><p>对了，昨天还看了ICPC世界总决赛的直播，真正的见识了什么叫神仙打架还有tourist大神差点AK的大手笔，emmm那手速。不过这也坚定了我好好打ACM的信念吧，要好好想想之后要怎么加强训练了。</p><p>还有上周的天梯赛，真的把我打自闭了，就拿了153分，甚至有学弟都比我高，还是因为自己太菜了，处处考察string的处理，难受死了，值得一提的是去图书馆借到了福尔摩斯探案集，偶然间看到的，这可是我初中的时候最喜欢的书啦，感觉很大程度上影响了我的理科生思维，没事还可以读几节挺好的。（(っ °Д °;)っ不，你要加强训练）</p><p>接着写一篇关于树状数组的博客吧，也是终于搞懂，也刷了几道水题，感觉这种类似写日记的感觉还挺适合我的，真棒！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;好久没有写过cf题解了，但这几场cf也都没拉下（ps:包括愚人节那场，令人印象深刻的B题），只是发现如果我疲于写题解的话就没有太多时间去学新知识了，所以我决定先定一个小目标，把cf打到紫名，然后再坚持写题解（不然写的题解也都是些水题），不过蓝名的感觉真爽，嘿嘿，得瑟一波！(
      
    
    </summary>
    
      <category term="LIFE" scheme="https://weibolu.online/categories/LIFE/"/>
    
    
      <category term="codeforces" scheme="https://weibolu.online/tags/codeforces/"/>
    
      <category term="What is life?" scheme="https://weibolu.online/tags/What-is-life/"/>
    
  </entry>
  
</feed>
