<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>微波炉 de Blogs</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://weibolu.online/"/>
  <updated>2019-10-23T11:49:59.246Z</updated>
  <id>https://weibolu.online/</id>
  
  <author>
    <name>微波炉</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数论9 —— 卡特兰数</title>
    <link href="https://weibolu.online/2019/10/23/%E6%95%B0%E8%AE%BA9%20%E2%80%94%E2%80%94%20%E5%8D%A1%E7%89%B9%E5%85%B0%E6%95%B0/"/>
    <id>https://weibolu.online/2019/10/23/数论9 —— 卡特兰数/</id>
    <published>2019-10-23T02:29:25.000Z</published>
    <updated>2019-10-23T11:49:59.246Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h2><p>卡特兰数，与组合数有着不可分割的关系。</p><a id="more"></a><h2 id="传送门"><a href="#传送门" class="headerlink" title="传送门"></a>传送门</h2><p><a href="http://lanqi.org/interests/10939/" target="_blank" rel="noopener">极其之详细</a></p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>关于卡特兰数最经典的问题大概就是这个了：</p><p>给定n对括号”（）”，求它们的合法排列有多少种？</p><p>合法排列即所有’）’都有’（’在其左侧与之对应，如”（）（）”、”（（））”等……</p><p>卡特兰数的第n项就是这个问题的对应解，证明过程见传送门。</p><h2 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h2><p>在此记下卡特兰数的一些推导公式：</p><p>(1)：$C_n$ = $\frac{1}{n+1}$C$^n_{2n}$ = C$^n_{2n}$ - C$^{n-1}_{2n}$;</p><p>(2)：C$<em>n$ = $\frac{1}{n+1}$$\sum^{n}\atop</em>{i=0}$(C$^{i}_{n}$)$^2$;</p><p>(3)：C$<em>{n+1}$ = $\frac{2(2n+1)}{n+2}$C$</em>{n}$，且C$_{0}$ = 1;</p><p>(4)：C$<em>{n+1}$ = $\sum^{n}\atop</em>{i=0}$C$<em>{i}$C$</em>{n-i}$，且C$_{0}$ = 1;</p><p>增长速度：$\Delta$C$_{n}$ ~ $\frac{4^n}{n^{\frac{3}{2}}\sqrt{\pi}}$;</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Hint&quot;&gt;&lt;a href=&quot;#Hint&quot; class=&quot;headerlink&quot; title=&quot;Hint&quot;&gt;&lt;/a&gt;Hint&lt;/h2&gt;&lt;p&gt;卡特兰数，与组合数有着不可分割的关系。&lt;/p&gt;
    
    </summary>
    
      <category term="基础数论" scheme="https://weibolu.online/categories/%E5%9F%BA%E7%A1%80%E6%95%B0%E8%AE%BA/"/>
    
    
      <category term="ACM模板" scheme="https://weibolu.online/tags/ACM%E6%A8%A1%E6%9D%BF/"/>
    
      <category term="基础数论" scheme="https://weibolu.online/tags/%E5%9F%BA%E7%A1%80%E6%95%B0%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>数据结构7 —— 扫描线</title>
    <link href="https://weibolu.online/2019/10/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%847%20%E2%80%94%E2%80%94%20%E6%89%AB%E6%8F%8F%E7%BA%BF/"/>
    <id>https://weibolu.online/2019/10/11/数据结构7 —— 扫描线/</id>
    <published>2019-10-11T14:18:28.000Z</published>
    <updated>2019-10-25T05:09:20.083Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h2><p>所谓扫描线其实就是一种思想，但这种思想和线段树的结合可谓完美，</p><p>可以实现在低时耗的条件下完成一些图形上的操作。</p><a id="more"></a><h3 id="记下两个经典问题的解法："><a href="#记下两个经典问题的解法：" class="headerlink" title="记下两个经典问题的解法："></a>记下两个经典问题的解法：</h3><h4 id="1、求多个矩形的覆盖面积-hdu1542"><a href="#1、求多个矩形的覆盖面积-hdu1542" class="headerlink" title="1、求多个矩形的覆盖面积  hdu1542"></a>1、求多个矩形的覆盖面积  hdu1542</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">210</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Line</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">double</span> x, y1, y2;</span><br><span class="line">    <span class="keyword">int</span> flag;</span><br><span class="line">    Line(<span class="keyword">double</span> a = <span class="number">0</span>, <span class="keyword">double</span> b = <span class="number">0</span>, <span class="keyword">double</span> c = <span class="number">0</span>, <span class="keyword">int</span> d = <span class="number">0</span>) &#123;</span><br><span class="line">        x = a; y1 = b; y2 = c; flag = d;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Line t1) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x &lt; t1.x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; y;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">double</span>, <span class="keyword">int</span>&gt; ha;</span><br><span class="line"><span class="built_in">vector</span>&lt;Line&gt; line;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">double</span> ll, rr, len;</span><br><span class="line">    <span class="keyword">int</span> flag;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        flag += val;</span><br><span class="line">        <span class="keyword">if</span>(flag &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            len = rr - ll;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> len = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">segtree</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    node tree[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        tree[rt].ll = y[l]; tree[rt].rr = y[r];</span><br><span class="line">        tree[rt].len = tree[rt].flag = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(l+<span class="number">1</span> != r) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (l+r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            build(rt&lt;&lt;<span class="number">1</span>, l, mid);</span><br><span class="line">            build(rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, mid, r);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l+<span class="number">1</span> == r) tree[rt].fun(val);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (l+r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(L &lt; mid) update(rt&lt;&lt;<span class="number">1</span>, l, mid, L, R, val);</span><br><span class="line">            <span class="keyword">if</span>(mid &lt; R) update(rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, mid, r, L, R, val);</span><br><span class="line">            tree[rt].len = tree[rt&lt;&lt;<span class="number">1</span>].len + tree[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].len;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;seg;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, ti = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n &amp;&amp; n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        y.clear(); ha.clear(); line.clear();</span><br><span class="line">        ti++;</span><br><span class="line">        <span class="keyword">double</span> x1, y1, x2, y2;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lf%lf%lf%lf"</span>, &amp;x1, &amp;y1, &amp;x2, &amp;y2);</span><br><span class="line">            y.push_back(y1); y.push_back(y2);</span><br><span class="line">            line.push_back(Line(x1, y1, y2, <span class="number">1</span>));</span><br><span class="line">            line.push_back(Line(x2, y1, y2, <span class="number">-1</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Test case #%d\n"</span>, ti);</span><br><span class="line">        sort(y.begin(), y.end());</span><br><span class="line">        sort(line.begin(), line.end());</span><br><span class="line">        y.erase(unique(y.begin(), y.end()), y.end());</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; y.size(); i++) ha[y[i]] = i;</span><br><span class="line"></span><br><span class="line">        seg.build(<span class="number">1</span>, <span class="number">0</span>, y.size()<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">double</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; line.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i &gt; <span class="number">0</span>) ans += (line[i].x - line[i<span class="number">-1</span>].x) * seg.tree[<span class="number">1</span>].len;</span><br><span class="line">            seg.update(<span class="number">1</span>, <span class="number">0</span>, y.size()<span class="number">-1</span>, ha[line[i].y1], ha[line[i].y2], line[i].flag);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Total explored area: %.2lf\n\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、求多个矩形的周长-hdu1828"><a href="#2、求多个矩形的周长-hdu1828" class="headerlink" title="2、求多个矩形的周长 hdu1828"></a>2、求多个矩形的周长 hdu1828</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RR(x) (x&lt;&lt;1|1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID(a,b) (a+((b-a)&gt;&gt;1))</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">10005</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">iabs</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> x&gt;<span class="number">0</span>?x:-x;&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Line</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,y1,y2,flag;</span><br><span class="line">    Line()&#123;&#125;</span><br><span class="line">    Line(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c,<span class="keyword">int</span> d)</span><br><span class="line">    &#123; x=a;y1=b;y2=c;flag=d; &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Line&amp;b)<span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(x == b.x) <span class="keyword">return</span> flag &gt; b.flag;</span><br><span class="line">        <span class="keyword">return</span> x&lt;b.x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; y;</span><br><span class="line"><span class="built_in">vector</span>&lt;Line&gt; line;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;H;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> lft,rht;</span><br><span class="line">    <span class="keyword">int</span> len,cnt,flag;</span><br><span class="line">    <span class="keyword">bool</span> isl,isr;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">mid</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> MID(lft,rht);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;len=cnt=isl=isr=<span class="number">0</span>;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> valu)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        flag+=valu; cnt+=valu;</span><br><span class="line">        <span class="keyword">if</span>(flag&gt;<span class="number">0</span>) </span><br><span class="line">        &#123;</span><br><span class="line">            isl=isr=<span class="number">1</span>;</span><br><span class="line">            len=y[rht]-y[lft];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> isl=isr=<span class="number">0</span>,len=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Segtree</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    node tree[N*<span class="number">4</span>];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">up</span><span class="params">(<span class="keyword">int</span> ind)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(tree[ind].flag&gt;<span class="number">0</span>) </span><br><span class="line">        &#123;</span><br><span class="line">            tree[ind].isl=tree[ind].isr=<span class="number">1</span>;</span><br><span class="line">            tree[ind].cnt = <span class="number">2</span>;</span><br><span class="line">            tree[ind].len=y[tree[ind].rht]-y[tree[ind].lft];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(tree[ind].lft+<span class="number">1</span>==tree[ind].rht)</span><br><span class="line">        &#123;</span><br><span class="line">            tree[ind].len=<span class="number">0</span>;    tree[ind].cnt=<span class="number">0</span>;</span><br><span class="line">            tree[ind].isl=<span class="number">0</span>;    tree[ind].isr=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            tree[ind].len=tree[LL(ind)].len+tree[RR(ind)].len;</span><br><span class="line">            tree[ind].cnt=tree[LL(ind)].cnt+tree[RR(ind)].cnt;</span><br><span class="line">            <span class="keyword">if</span>(tree[LL(ind)].isr&amp;&amp;tree[RR(ind)].isl) tree[ind].cnt -= <span class="number">2</span>;</span><br><span class="line">            tree[ind].isl=tree[LL(ind)].isl;</span><br><span class="line">            tree[ind].isr=tree[RR(ind)].isr;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> lft,<span class="keyword">int</span> rht,<span class="keyword">int</span> ind)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        tree[ind].lft=lft;    tree[ind].rht=rht;</span><br><span class="line">        tree[ind].init();</span><br><span class="line">        <span class="keyword">if</span>(lft+<span class="number">1</span>!=rht)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> mid=tree[ind].mid();</span><br><span class="line">            build(lft,mid,LL(ind));</span><br><span class="line">            build(mid,rht,RR(ind));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updata</span><span class="params">(<span class="keyword">int</span> st,<span class="keyword">int</span> ed,<span class="keyword">int</span> ind,<span class="keyword">int</span> valu)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> lft=tree[ind].lft,rht=tree[ind].rht;</span><br><span class="line">        <span class="keyword">if</span>(st&lt;=lft&amp;&amp;rht&lt;=ed) tree[ind].fun(valu);</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> mid=tree[ind].mid();</span><br><span class="line">            <span class="keyword">if</span>(st&lt;mid) updata(st,ed,LL(ind),valu);</span><br><span class="line">            <span class="keyword">if</span>(ed&gt;mid) updata(st,ed,RR(ind),valu);</span><br><span class="line">        &#125;</span><br><span class="line">        up(ind);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;seg;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)!=EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        y.clear(); H.clear(); line.clear();</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">int</span> x1,y1,x2,y2;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;x1,&amp;y1,&amp;x2,&amp;y2);</span><br><span class="line">            line.push_back(Line(x1,y1,y2,<span class="number">1</span>));</span><br><span class="line">            line.push_back(Line(x2,y1,y2,<span class="number">-1</span>));</span><br><span class="line">            y.push_back(y1); y.push_back(y2);</span><br><span class="line">        &#125;</span><br><span class="line">        sort(line.begin(),line.end());</span><br><span class="line">        sort(y.begin(),y.end());</span><br><span class="line">        y.erase(unique(y.begin(),y.end()),y.end());</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;(<span class="keyword">int</span>)y.size();i++) H[y[i]]=i;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">int</span> res=<span class="number">0</span>,len=<span class="number">0</span>;</span><br><span class="line">        seg.build(<span class="number">0</span>,(<span class="keyword">int</span>)y.size()<span class="number">-1</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;(<span class="keyword">int</span>)line.size();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(i!=<span class="number">0</span>) res+=seg.tree[<span class="number">1</span>].cnt*(line[i].x-line[i<span class="number">-1</span>].x);</span><br><span class="line">            seg.updata(H[line[i].y1],H[line[i].y2],<span class="number">1</span>,line[i].flag);</span><br><span class="line">            res+=iabs(len-seg.tree[<span class="number">1</span>].len);</span><br><span class="line">            len=seg.tree[<span class="number">1</span>].len;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,res);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Hint&quot;&gt;&lt;a href=&quot;#Hint&quot; class=&quot;headerlink&quot; title=&quot;Hint&quot;&gt;&lt;/a&gt;Hint&lt;/h2&gt;&lt;p&gt;所谓扫描线其实就是一种思想，但这种思想和线段树的结合可谓完美，&lt;/p&gt;
&lt;p&gt;可以实现在低时耗的条件下完成一些图形上的操作。&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构" scheme="https://weibolu.online/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="ACM模板" scheme="https://weibolu.online/tags/ACM%E6%A8%A1%E6%9D%BF/"/>
    
      <category term="数据结构" scheme="https://weibolu.online/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>搜索1 —— dfs序</title>
    <link href="https://weibolu.online/2019/09/27/%E6%90%9C%E7%B4%A21%20%E2%80%94%E2%80%94%20dfs%E5%BA%8F/"/>
    <id>https://weibolu.online/2019/09/27/搜索1 —— dfs序/</id>
    <published>2019-09-27T08:44:07.000Z</published>
    <updated>2019-10-24T09:33:35.465Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h2><p>dfs序，一个基础的搜索应用，主要在树上的搜索时使用。</p><p>在树上进行dfs时，将树上的节点按节点进出栈的时间序列排序，可以把树这种非线性结构装换成为线性结构，从而可以将树上的问题转换成为序列问题，之后再使用其它的数据结构进行解决问题。</p><a id="more"></a><h2 id="传送门"><a href="#传送门" class="headerlink" title="传送门"></a>传送门</h2><p>构造方法其实就是在dfs中存下每个点访问的开始时间和结束时间，那么在这段时间之间的就是以它为根的子树。</p><p>具体可以看看下面的ppt</p><p><a href="https://acm.sjtu.edu.cn/w/images/3/35/%E6%A0%91%E7%9A%84dfs%E5%BA%8F%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8%EF%BC%88%E9%97%AB%E9%B8%BF%E5%AE%87%EF%BC%89.pdf" target="_blank" rel="noopener">好看的ppt</a></p><h2 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h2><p>1.依照dfs的性质，dfs序中以一个点开头的一段其实就是树中以这个点为根的子树。</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa, <span class="keyword">int</span> dep)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    seq[++cnt] = u;</span><br><span class="line">    st[u] = cnt;</span><br><span class="line">    <span class="keyword">int</span> len = edge[u].size();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> v = edge[u][v];</span><br><span class="line">        <span class="keyword">if</span>(v != fa) &#123;</span><br><span class="line">            dfs(v, u, dep+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    seq[++cnt] = u;</span><br><span class="line">    ed[u] = cnt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="例题-HDU-5692"><a href="#例题-HDU-5692" class="headerlink" title="例题 HDU 5692"></a>例题 HDU 5692</h2><p>百度科技园内有n个零食机，零食机之间通过n−1条路相互连通。每个零食机都有一个值v，表示为小度熊提供零食的价值。</p><p>由于零食被频繁的消耗和补充，零食机的价值v会时常发生变化。小度熊只能从编号为0的零食机出发，并且每个零食机至多经过一次。另外，小度熊会对某个零食机的零食有所偏爱，要求路线上必须有那个零食机。</p><p>为小度熊规划一个路线，使得路线上的价值总和最大。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>首先dfs求出每个点到根节点的权值和，之后利用dfs序把子树变为一个区间，对于每次查询，就相当于对线段树进行区间求最大值。</p><h3 id="code"><a href="#code" class="headerlink" title="code"></a>code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> le[maxn], ri[maxn];</span><br><span class="line"><span class="keyword">const</span> ll inf = <span class="number">1e15</span>;</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">ll dis[maxn], a[maxn];</span><br><span class="line">ll flag[maxn&lt;&lt;<span class="number">2</span>], tree[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line">ll val[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; mapa[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tree[rt] = max(tree[rt&lt;&lt;<span class="number">1</span>], tree[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l == r) &#123;</span><br><span class="line">        tree[rt] = a[l];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (l+r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        build(rt&lt;&lt;<span class="number">1</span>, l, mid);</span><br><span class="line">        build(rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, mid+<span class="number">1</span>, r);</span><br><span class="line">        pushup(rt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(flag[rt] != <span class="number">0</span>) &#123;</span><br><span class="line">        flag[rt&lt;&lt;<span class="number">1</span>] += flag[rt];</span><br><span class="line">        flag[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>] += flag[rt];</span><br><span class="line">        tree[rt&lt;&lt;<span class="number">1</span>] += flag[rt];</span><br><span class="line">        tree[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>] += flag[rt];</span><br><span class="line">        flag[rt] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> L, <span class="keyword">int</span> R, ll val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R) &#123;</span><br><span class="line">        tree[rt] += val;</span><br><span class="line">        flag[rt] += val;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        pushdown(rt);</span><br><span class="line">        <span class="keyword">int</span> mid = (l+r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(L &lt;= mid) update(rt&lt;&lt;<span class="number">1</span>, l, mid, L, R, val);</span><br><span class="line">        <span class="keyword">if</span>(mid &lt; R) update(rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, mid+<span class="number">1</span>, r, L, R, val);</span><br><span class="line">        pushup(rt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L &gt; r || R &lt; l) <span class="keyword">return</span> -inf;</span><br><span class="line">    <span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R) &#123;</span><br><span class="line">        <span class="keyword">return</span> tree[rt];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        pushdown(rt);</span><br><span class="line">        <span class="keyword">int</span> mid = (l+r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> max(query(rt&lt;&lt;<span class="number">1</span>, l, mid, L, R), query(rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, mid+<span class="number">1</span>, r, L, R)); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> fa, <span class="keyword">int</span> now)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cnt++;</span><br><span class="line">    a[cnt] = dis[now];</span><br><span class="line">    le[now] = cnt;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mapa[now].size(); i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> v = mapa[now][i];</span><br><span class="line">        <span class="keyword">if</span>(v == fa) <span class="keyword">continue</span>;</span><br><span class="line">        dis[v] = dis[now] + val[v];</span><br><span class="line">        dfs(now, v);</span><br><span class="line">    &#125;</span><br><span class="line">    ri[now] = cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> ti = <span class="number">1</span>; ti &lt;= T; ti++) &#123;</span><br><span class="line">        <span class="keyword">int</span> n, m;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) mapa[i].clear();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> x, y;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class="line">            mapa[x].push_back(y);</span><br><span class="line">            mapa[y].push_back(x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; val[i];</span><br><span class="line">        &#125;</span><br><span class="line">        dis[<span class="number">0</span>] = val[<span class="number">0</span>];</span><br><span class="line">        cnt = <span class="number">0</span>;</span><br><span class="line">        dfs(<span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">memset</span>(flag, <span class="number">0</span>, <span class="keyword">sizeof</span> flag);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Case #"</span> &lt;&lt; ti &lt;&lt; <span class="string">':'</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        build(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> t1;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; t1;</span><br><span class="line">            <span class="keyword">if</span>(t1 == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> x, y;</span><br><span class="line">                <span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class="line">                update(<span class="number">1</span>, <span class="number">1</span>, n, le[x], ri[x], (ll)y-val[x]);</span><br><span class="line">                val[x] = (ll)y;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">int</span> x;</span><br><span class="line">                <span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; query(<span class="number">1</span>, <span class="number">1</span>, n, le[x], ri[x]) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="例题-POJ-3321"><a href="#例题-POJ-3321" class="headerlink" title="例题 POJ 3321"></a>例题 POJ 3321</h2><p>一颗苹果树，刚开始所有节点都有苹果，有以下两种操作，一种是改变一个节点的状态（有苹果就取走，没苹果就产生一个），一种是询问一个点的子树（包括节点自己）一共有多少个苹果，对于每次询问输出结果。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3><p>同上题dfs跑一次之后，问题变为求区间和，用树状数组解决即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">100</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; mapa[maxn];</span><br><span class="line"><span class="keyword">int</span> le[maxn], ri[maxn];</span><br><span class="line"><span class="keyword">int</span> vis[maxn];</span><br><span class="line"><span class="keyword">int</span> cnt, n;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BIT</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;<span class="keyword">return</span> x &amp; (-x);&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">a[i] = lowbit(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> val)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(pos &lt;= n) &#123;</span><br><span class="line">a[pos] += val;</span><br><span class="line">pos += lowbit(pos);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> pos)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(pos &gt; <span class="number">0</span>) &#123;</span><br><span class="line">ret += a[pos];</span><br><span class="line">pos -= lowbit(pos);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line">&#125;bit;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">le[a] = cnt;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mapa[a].size(); i++) <span class="keyword">if</span>(mapa[a][i] != fa) &#123;</span><br><span class="line">cnt++;</span><br><span class="line">dfs(mapa[a][i], a);</span><br><span class="line">&#125;</span><br><span class="line">ri[a] = cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">cnt = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) vis[i] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> t1, t2;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;t1, &amp;t2);</span><br><span class="line">mapa[t1].push_back(t2);</span><br><span class="line">&#125;</span><br><span class="line">bit.init();</span><br><span class="line"><span class="keyword">int</span> m;</span><br><span class="line">le[<span class="number">0</span>] = ri[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">dfs(<span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line"><span class="keyword">char</span> c;</span><br><span class="line"><span class="keyword">int</span> t1;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; c;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t1);</span><br><span class="line"><span class="keyword">if</span>(c == <span class="string">'C'</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(vis[t1] == <span class="number">0</span>) &#123;</span><br><span class="line">bit.update(le[t1], <span class="number">-1</span>);</span><br><span class="line">vis[t1] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">bit.update(le[t1], <span class="number">1</span>);</span><br><span class="line">vis[t1] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, bit.query(ri[t1])-bit.query(le[t1]<span class="number">-1</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Hint&quot;&gt;&lt;a href=&quot;#Hint&quot; class=&quot;headerlink&quot; title=&quot;Hint&quot;&gt;&lt;/a&gt;Hint&lt;/h2&gt;&lt;p&gt;dfs序，一个基础的搜索应用，主要在树上的搜索时使用。&lt;/p&gt;
&lt;p&gt;在树上进行dfs时，将树上的节点按节点进出栈的时间序列排序，可以把树这种非线性结构装换成为线性结构，从而可以将树上的问题转换成为序列问题，之后再使用其它的数据结构进行解决问题。&lt;/p&gt;
    
    </summary>
    
      <category term="搜索技巧" scheme="https://weibolu.online/categories/%E6%90%9C%E7%B4%A2%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="搜索专题" scheme="https://weibolu.online/tags/%E6%90%9C%E7%B4%A2%E4%B8%93%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>矩阵操作与线性代数3 —— 求广义斐波那契数列循环节</title>
    <link href="https://weibolu.online/2019/09/15/%E7%9F%A9%E9%98%B5%E6%93%8D%E4%BD%9C%E4%B8%8E%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B03%20%E2%80%94%E2%80%94%20%E6%B1%82%E5%B9%BF%E4%B9%89%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97%E5%BE%AA%E7%8E%AF%E8%8A%82/"/>
    <id>https://weibolu.online/2019/09/15/矩阵操作与线性代数3 —— 求广义斐波那契数列循环节/</id>
    <published>2019-09-15T10:31:03.000Z</published>
    <updated>2019-09-15T14:28:56.667Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h2><p>矩阵快速幂可以在O（logn）的时间内算出斐波那契数列的第n项，有时这个n过大或者查询次数过多，这样的时间复杂度还不能让人满意，于是就有了这么一招，找出其循环节，再进行优化。</p><a id="more"></a><h2 id="传送门"><a href="#传送门" class="headerlink" title="传送门"></a>传送门</h2><p><a href="https://blog.csdn.net/ACdreamers/article/details/25616461" target="_blank" rel="noopener">别人的讲解</a></p><p>证明中大多是线性代数的知识，我已经忘了orz。。。</p><p>只好没事看看别人的了</p><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> LL MOD = <span class="number">1000000007</span>;</span><br><span class="line"> </span><br><span class="line">LL fac[<span class="number">2</span>][<span class="number">505</span>];</span><br><span class="line"><span class="keyword">int</span> cnt,ct;</span><br><span class="line"> </span><br><span class="line">LL pri[<span class="number">6</span>] = &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">109</span>, <span class="number">167</span>, <span class="number">500000003</span>&#125;;</span><br><span class="line">LL num[<span class="number">6</span>] = &#123;<span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Matrix</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    LL m[N][N];</span><br><span class="line">&#125; ;</span><br><span class="line"> </span><br><span class="line">Matrix A;</span><br><span class="line">Matrix I = &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function">Matrix <span class="title">multi</span><span class="params">(Matrix a,Matrix b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Matrix c;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;N; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            c.m[i][j]  =<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;N; k++)</span><br><span class="line">            &#123;</span><br><span class="line">                c.m[i][j] += a.m[i][k] * b.m[k][j];</span><br><span class="line">                c.m[i][j] %= MOD;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">Matrix <span class="title">power</span><span class="params">(Matrix A,LL n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Matrix ans = I, p = A;</span><br><span class="line">    <span class="keyword">while</span>(n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(n &amp; <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ans = multi(ans,p);</span><br><span class="line">            n--;</span><br><span class="line">        &#125;</span><br><span class="line">        n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        p = multi(p,p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">LL <span class="title">quick_mod</span><span class="params">(LL a,LL b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LL ans = <span class="number">1</span>;</span><br><span class="line">    a %= MOD;</span><br><span class="line">    <span class="keyword">while</span>(b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(b &amp; <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ans = ans * a % MOD;</span><br><span class="line">            b--;</span><br><span class="line">        &#125;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        a = a * a % MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">LL <span class="title">Legendre</span><span class="params">(LL a,LL p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LL t = quick_mod(a,(p<span class="number">-1</span>)&gt;&gt;<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(t == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> dept,LL product = <span class="number">1</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(dept == cnt)</span><br><span class="line">    &#123;</span><br><span class="line">        fac[<span class="number">1</span>][ct++] = product;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=num[dept]; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        dfs(dept+<span class="number">1</span>,product);</span><br><span class="line">        product *= pri[dept];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">OK</span><span class="params">(Matrix A,LL n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Matrix ans = power(A,n);</span><br><span class="line">    <span class="keyword">return</span> ans.m[<span class="number">0</span>][<span class="number">0</span>] == <span class="number">1</span> &amp;&amp; ans.m[<span class="number">0</span>][<span class="number">1</span>] == <span class="number">0</span> &amp;&amp;</span><br><span class="line">           ans.m[<span class="number">1</span>][<span class="number">0</span>] == <span class="number">0</span> &amp;&amp; ans.m[<span class="number">1</span>][<span class="number">1</span>] == <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fac[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    fac[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">    fac[<span class="number">0</span>][<span class="number">2</span>] = <span class="number">500000003</span>;</span><br><span class="line">    fac[<span class="number">0</span>][<span class="number">3</span>] = <span class="number">1000000006</span>;</span><br><span class="line">    LL a,b,c,d;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;c&gt;&gt;d)</span><br><span class="line">    &#123;</span><br><span class="line">        LL t = a * a + <span class="number">4</span> * b;</span><br><span class="line">        A.m[<span class="number">0</span>][<span class="number">0</span>] = a;</span><br><span class="line">        A.m[<span class="number">0</span>][<span class="number">1</span>] = b;</span><br><span class="line">        A.m[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        A.m[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(Legendre(t,MOD) == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(OK(A,fac[<span class="number">0</span>][i]))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">cout</span>&lt;&lt;fac[<span class="number">0</span>][i]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            ct = <span class="number">0</span>;</span><br><span class="line">            cnt = <span class="number">6</span>;</span><br><span class="line">            dfs(<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">            sort(fac[<span class="number">1</span>],fac[<span class="number">1</span>]+ct);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;ct;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(OK(A,fac[<span class="number">1</span>][i]))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">cout</span>&lt;&lt;fac[<span class="number">1</span>][i]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Hint&quot;&gt;&lt;a href=&quot;#Hint&quot; class=&quot;headerlink&quot; title=&quot;Hint&quot;&gt;&lt;/a&gt;Hint&lt;/h2&gt;&lt;p&gt;矩阵快速幂可以在O（logn）的时间内算出斐波那契数列的第n项，有时这个n过大或者查询次数过多，这样的时间复杂度还不能让人满意，于是就有了这么一招，找出其循环节，再进行优化。&lt;/p&gt;
    
    </summary>
    
      <category term="矩阵算法" scheme="https://weibolu.online/categories/%E7%9F%A9%E9%98%B5%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="ACM模板" scheme="https://weibolu.online/tags/ACM%E6%A8%A1%E6%9D%BF/"/>
    
  </entry>
  
  <entry>
    <title>数论8 —— 二次剩余</title>
    <link href="https://weibolu.online/2019/09/14/%E6%95%B0%E8%AE%BA8%20%E2%80%94%E2%80%94%20%E4%BA%8C%E6%AC%A1%E5%89%A9%E4%BD%99/"/>
    <id>https://weibolu.online/2019/09/14/数论8 —— 二次剩余/</id>
    <published>2019-09-14T02:29:25.000Z</published>
    <updated>2019-09-18T11:41:59.133Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h2><p>二次剩余可以用来解决取模意义下的开平方问题，在数论中经常用此算法进行预处理。</p><a id="more"></a><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>$x^2$ = a % mod</p><p>给定其中的a和mod，即可求出x，在此之后，x即可在模mod意义下代替$\sqrt{a}$，进而就可以使用其它的数学定理了。</p><h2 id="传送门"><a href="#传送门" class="headerlink" title="传送门"></a>传送门</h2><p><a href="https://blog.csdn.net/kele52he/article/details/78897187" target="_blank" rel="noopener">二次剩余</a></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;   </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> random(a,b) (rand()%(b-a+1)+a)</span></span><br><span class="line"><span class="function">LL <span class="title">quick_mod</span><span class="params">(LL a, LL b, LL c)</span> </span>&#123; LL ans = <span class="number">1</span>; <span class="keyword">while</span> (b) &#123; <span class="keyword">if</span> (b % <span class="number">2</span> == <span class="number">1</span>)ans = (ans*a) % c; b /= <span class="number">2</span>; a = (a*a) % c; &#125;<span class="keyword">return</span> ans; &#125;</span><br><span class="line"> </span><br><span class="line">LL p;</span><br><span class="line">LL w;<span class="comment">//二次域的D值</span></span><br><span class="line"><span class="keyword">bool</span> ok;<span class="comment">//是否有解</span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">QuadraticField</span>//二次域</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">LL x, y;</span><br><span class="line">QuadraticField <span class="keyword">operator</span>*(QuadraticField T)<span class="comment">//二次域乘法重载</span></span><br><span class="line">&#123;</span><br><span class="line">QuadraticField ans;</span><br><span class="line">ans.x = (<span class="keyword">this</span>-&gt;x*T.x%p + <span class="keyword">this</span>-&gt;y*T.y%p*w%p) % p;</span><br><span class="line">ans.y = (<span class="keyword">this</span>-&gt;x*T.y%p + <span class="keyword">this</span>-&gt;y*T.x%p) % p;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line">QuadraticField <span class="keyword">operator</span>^(LL b)<span class="comment">//二次域快速幂</span></span><br><span class="line">&#123;</span><br><span class="line">QuadraticField ans;</span><br><span class="line">QuadraticField a = *<span class="keyword">this</span>;</span><br><span class="line">ans.x = <span class="number">1</span>;</span><br><span class="line">ans.y = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (b &amp; <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">ans = ans*a;</span><br><span class="line">b--;</span><br><span class="line">&#125;</span><br><span class="line">b /= <span class="number">2</span>;</span><br><span class="line">a = a*a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function">LL <span class="title">Legender</span><span class="params">(LL a)</span><span class="comment">//求勒让德符号</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">LL ans=quick_mod(a, (p - <span class="number">1</span>) / <span class="number">2</span>, p);</span><br><span class="line"><span class="keyword">if</span> (ans + <span class="number">1</span> == p)<span class="comment">//如果ans的值为-1，%p之后会变成p-1。</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">LL <span class="title">Getw</span><span class="params">(LL n, LL a)</span><span class="comment">//根据随机出来a的值确定对应w的值</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> ((a*a - n) % p + p) % p;<span class="comment">//防爆处理</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">LL <span class="title">Solve</span><span class="params">(LL n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">LL a;</span><br><span class="line"><span class="keyword">if</span> (p == <span class="number">2</span>)<span class="comment">//当p为2的时候，n只会是0或1，然后0和1就是对应的解</span></span><br><span class="line"><span class="keyword">return</span> n;</span><br><span class="line"><span class="keyword">if</span> (Legender(n) == <span class="number">-1</span>)<span class="comment">//无解</span></span><br><span class="line">ok = <span class="literal">false</span>;</span><br><span class="line">srand((<span class="keyword">unsigned</span>)time(<span class="literal">NULL</span>));</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)<span class="comment">//随机a的值直到有解</span></span><br><span class="line">&#123;</span><br><span class="line">a = random(<span class="number">0</span>, p - <span class="number">1</span>);</span><br><span class="line">w = Getw(n, a);</span><br><span class="line"><span class="keyword">if</span> (Legender(w) == <span class="number">-1</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">QuadraticField ans,res;</span><br><span class="line">res.x = a;</span><br><span class="line">res.y = <span class="number">1</span>;<span class="comment">//res的值就是a+根号w</span></span><br><span class="line">ans = res ^ ((p + <span class="number">1</span>) / <span class="number">2</span>);</span><br><span class="line"><span class="keyword">return</span> ans.x;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">LL n,ans1,ans2;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;n,&amp;p)!=EOF)</span><br><span class="line">&#123;</span><br><span class="line">ok = <span class="literal">true</span>;</span><br><span class="line">n %= p;</span><br><span class="line">ans1 = Solve(n);</span><br><span class="line">ans2 = p - ans1;<span class="comment">//一组解的和是p</span></span><br><span class="line"><span class="keyword">if</span> (!ok)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"No root\n"</span>);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (ans1 == ans2)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans1);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld %lld\n"</span>, ans1, ans2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Hint&quot;&gt;&lt;a href=&quot;#Hint&quot; class=&quot;headerlink&quot; title=&quot;Hint&quot;&gt;&lt;/a&gt;Hint&lt;/h2&gt;&lt;p&gt;二次剩余可以用来解决取模意义下的开平方问题，在数论中经常用此算法进行预处理。&lt;/p&gt;
    
    </summary>
    
      <category term="基础数论" scheme="https://weibolu.online/categories/%E5%9F%BA%E7%A1%80%E6%95%B0%E8%AE%BA/"/>
    
    
      <category term="ACM模板" scheme="https://weibolu.online/tags/ACM%E6%A8%A1%E6%9D%BF/"/>
    
      <category term="基础数论" scheme="https://weibolu.online/tags/%E5%9F%BA%E7%A1%80%E6%95%B0%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>数据结构6 —— 主席树</title>
    <link href="https://weibolu.online/2019/09/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%846%20%E2%80%94%E2%80%94%20%E4%B8%BB%E5%B8%AD%E6%A0%91/"/>
    <id>https://weibolu.online/2019/09/11/数据结构6 —— 主席树/</id>
    <published>2019-09-11T14:18:28.000Z</published>
    <updated>2019-10-25T05:20:05.039Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h2><p>主席树，一个有着高端奢华的名字的数据结构，性质十分优秀的同时也难得一匹ヽ(*。&gt;Д&lt;)o゜</p><a id="more"></a><h2 id="静态主席树"><a href="#静态主席树" class="headerlink" title="静态主席树"></a>静态主席树</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>在没有修改操作时可以使用，经典问题是求解区间第K大（当然还有很多花里胡哨的操作），时间和空间复杂度为O（nlogn）</p><p>一棵静态主席树在最初就是一个空的线段树，这时插入一个元素肯定会改变原来的数值，为了保存这些历史版本，可以在原来的基础上再建一棵线段树，并对对应区间进行修改，这样就可以得到所有的历史版本了。建好树后查询[L, R]的第k大，就可以利用 [1, R]建的线段树的对应区间减去[1, L-1]建的线段树的对应区间，这就相当于得到了一个[L, R]区间的线段树，要查询它的区间第k大就和划分树的思路一样，是O（logn）的时间复杂度，n次查询就是O（nlogn）。</p><p>上面这个思路虽然降下来了时间复杂度，空间复杂度却大的恐怖(O(n<em>n</em>4))，但可以看出来在原有线段树中加入一个点只会影响从根到一条路径的值，而其它节点都没有变化，为此重建一棵线段树有点得不偿失，所以就考虑新建这么一条路径，并把那些没有变化的边连到这条路径上，这样就建好一棵新的线段树，所用的空间只有O（logn），n个节点空间复杂度就是O（nlogn），整体的空间复杂度为O（n * （4+logn）），通常开到20倍左右。</p><h3 id="传送门"><a href="#传送门" class="headerlink" title="传送门"></a>传送门</h3><p><a href="https://www.cnblogs.com/zyf0163/p/4749042.html" target="_blank" rel="noopener">代码简洁</a></p><p><a href="https://blog.csdn.net/a_forever_dream/article/details/80450549" target="_blank" rel="noopener">图解详细</a></p><h3 id="模板-hdu-2665求区间第k大"><a href="#模板-hdu-2665求区间第k大" class="headerlink" title="模板 hdu 2665求区间第k大"></a>模板 <a href="http://acm.hdu.edu.cn/showproblem.php?pid=2665" target="_blank" rel="noopener">hdu 2665求区间第k大</a></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn], b[maxn];</span><br><span class="line"><span class="keyword">int</span> rt[maxn*<span class="number">20</span>], ls[maxn*<span class="number">20</span>], rs[maxn*<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> sum[maxn*<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, q, tot;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> &amp;rp, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    rp = ++tot;</span><br><span class="line">    sum[rp] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l == r) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">int</span> mid = (l+r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    build(ls[rp], l, mid);</span><br><span class="line">    build(rs[rp], mid+<span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> &amp;rp, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> last, <span class="keyword">int</span> pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line">    rp = ++tot;</span><br><span class="line">    ls[rp] = ls[last];</span><br><span class="line">    rs[rp] = rs[last];</span><br><span class="line">    sum[rp] = sum[last] + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l == r) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(pos &lt;= mid) update(ls[rp], l, mid, ls[last], pos);</span><br><span class="line">    <span class="keyword">else</span> update(rs[rp], mid+<span class="number">1</span>, r, rs[last], pos);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l == r) <span class="keyword">return</span> l;</span><br><span class="line">    <span class="keyword">int</span> mid = (l+r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> cnt = sum[ls[R]] - sum[ls[L]];</span><br><span class="line">    <span class="keyword">if</span>(k &lt;= cnt) <span class="keyword">return</span> query(l, mid, ls[L], ls[R], k);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> query(mid+<span class="number">1</span>, r, rs[L], rs[R], k-cnt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span>(T--) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; q;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">            b[i] = a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        sort(b+<span class="number">1</span>, b+n+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> sz = unique(b+<span class="number">1</span>, b+n+<span class="number">1</span>) - (b+<span class="number">1</span>);</span><br><span class="line">        tot = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        build(rt[<span class="number">0</span>], <span class="number">1</span>, sz);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) a[i] = lower_bound(b+<span class="number">1</span>, b+sz+<span class="number">1</span>, a[i]) - b;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) update(rt[i], <span class="number">1</span>, sz, rt[i<span class="number">-1</span>], a[i]);</span><br><span class="line">        <span class="keyword">while</span>(q--) &#123;</span><br><span class="line">            <span class="keyword">int</span> L, R, k;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; L &gt;&gt; R &gt;&gt; k;</span><br><span class="line">            <span class="keyword">int</span> ans = query(<span class="number">1</span>, sz, rt[L<span class="number">-1</span>], rt[R], k);</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; b[ans] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="带修改操作的主席树"><a href="#带修改操作的主席树" class="headerlink" title="带修改操作的主席树"></a>带修改操作的主席树</h2><h3 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h3><p>和静态主席树的思路类似，但如果要进行修改，就要改O（n）棵树，这样肯定行不通。</p><p>所以我们可以建一棵树状数组，这棵树状数组上的每一个节点都是一棵线段树，这时的修改操作只需要像树状数组一样操作就行，把对应位上的那棵线段树的对应区间修改，查询时再加上就行了。</p><h3 id="传送门-1"><a href="#传送门-1" class="headerlink" title="传送门"></a>传送门</h3><p><a href="https://blog.csdn.net/WilliamSun0122/article/details/77885781" target="_blank" rel="noopener">别人的讲解</a></p><h3 id="模板题-ZOJ-2112"><a href="#模板题-ZOJ-2112" class="headerlink" title="模板题 ZOJ 2112"></a>模板题 ZOJ 2112</h3><p>题意<br>给你n（&lt;=5e4）个数，m（&lt;=1e4）次询问。<br>Q i j k 为问区间[i,j]第k小的数<br>C i t 为把原序列中第i个数变为t</p><h3 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">6e4</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">1e4</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> T[maxn],S[maxn],L[maxn*<span class="number">32</span>],R[maxn*<span class="number">32</span>],sum[maxn*<span class="number">32</span>];</span><br><span class="line"><span class="keyword">int</span> sz[maxn],h[maxn];</span><br><span class="line"><span class="keyword">int</span> ul[maxn],ur[maxn];</span><br><span class="line"><span class="keyword">int</span> tot,num,n,q;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r,k;</span><br><span class="line">    <span class="keyword">bool</span> flag; <span class="comment">//ture代表Q，false代表C</span></span><br><span class="line">&#125;Q[maxm];  <span class="comment">//存储询问</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span>&amp; rt,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    rt = ++tot;</span><br><span class="line">    sum[rt]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l==r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    build(L[rt],l,mid);</span><br><span class="line">    build(R[rt],mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span>&amp; rt,<span class="keyword">int</span> pre,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    rt = ++tot;</span><br><span class="line">    L[rt] = L[pre];</span><br><span class="line">    R[rt] = R[pre];</span><br><span class="line">    sum[rt] = sum[pre]+val;</span><br><span class="line">    <span class="keyword">if</span>(l==r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=mid) update(L[rt],L[pre],l,mid,x,val);</span><br><span class="line">    <span class="keyword">else</span> update(R[rt],R[pre],mid+<span class="number">1</span>,r,x,val);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&amp;(-x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = lower_bound(h+<span class="number">1</span>,h+<span class="number">1</span>+num,sz[x])-h;</span><br><span class="line">    <span class="keyword">while</span>(x&lt;=n)</span><br><span class="line">    &#123;</span><br><span class="line">        update(S[x],S[x],<span class="number">1</span>,num,res,val);</span><br><span class="line">        x += lowbit(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Sum</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">bool</span> flag)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x&gt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(flag) res += sum[L[ur[x]]];</span><br><span class="line">        <span class="keyword">else</span> res += sum[L[ul[x]]];</span><br><span class="line">        x -= lowbit(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> e,<span class="keyword">int</span> ts,<span class="keyword">int</span> te,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r) <span class="keyword">return</span> l;</span><br><span class="line">    <span class="keyword">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> res = Sum(e,<span class="literal">true</span>)-Sum(s,<span class="literal">false</span>)+sum[L[te]]-sum[L[ts]];</span><br><span class="line">    <span class="keyword">if</span>(k&lt;=res)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=e;i;i-=lowbit(i)) ur[i] = L[ur[i]];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=s;i;i-=lowbit(i)) ul[i] = L[ul[i]];</span><br><span class="line">        <span class="keyword">return</span> query(s,e,L[ts],L[te],l,mid,k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=e;i;i-=lowbit(i)) ur[i] = R[ur[i]];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=s;i;i-=lowbit(i)) ul[i] = R[ul[i]];</span><br><span class="line">        <span class="keyword">return</span> query(s,e,R[ts],R[te],mid+<span class="number">1</span>,r,k-res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">char</span> str[<span class="number">5</span>];</span><br><span class="line">        num=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;q);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,sz+i),h[++num]=sz[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=q;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>,str);</span><br><span class="line">            <span class="keyword">if</span>(str[<span class="number">0</span>]==<span class="string">'Q'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;Q[i].l,&amp;Q[i].r,&amp;Q[i].k);</span><br><span class="line">                Q[i].flag=<span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;Q[i].l,&amp;Q[i].r);</span><br><span class="line">                Q[i].flag=<span class="literal">false</span>;</span><br><span class="line">                h[++num]=Q[i].r;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(h+<span class="number">1</span>,h+<span class="number">1</span>+num);</span><br><span class="line">        <span class="keyword">int</span> tmp = unique(h+<span class="number">1</span>,h+<span class="number">1</span>+num)-h<span class="number">-1</span>;</span><br><span class="line">        num = tmp;</span><br><span class="line">        tot=<span class="number">0</span>;</span><br><span class="line">        build(T[<span class="number">0</span>],<span class="number">1</span>,num);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) update(T[i],T[i<span class="number">-1</span>],<span class="number">1</span>,num,lower_bound(h+<span class="number">1</span>,h+<span class="number">1</span>+num,sz[i])-h,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) S[i] = T[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=q;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(Q[i].flag)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=Q[i].r;j;j-=lowbit(j)) ur[j] = S[j];</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=Q[i].l<span class="number">-1</span>;j;j-=lowbit(j)) ul[j] = S[j];</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,h[query(Q[i].l<span class="number">-1</span>,Q[i].r,T[Q[i].l<span class="number">-1</span>],T[Q[i].r],<span class="number">1</span>,num,Q[i].k)]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                add(Q[i].l,<span class="number">-1</span>);</span><br><span class="line">                sz[Q[i].l] = Q[i].r;</span><br><span class="line">                add(Q[i].l,<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Hint&quot;&gt;&lt;a href=&quot;#Hint&quot; class=&quot;headerlink&quot; title=&quot;Hint&quot;&gt;&lt;/a&gt;Hint&lt;/h2&gt;&lt;p&gt;主席树，一个有着高端奢华的名字的数据结构，性质十分优秀的同时也难得一匹ヽ(*。&amp;gt;Д&amp;lt;)o゜&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构" scheme="https://weibolu.online/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="ACM模板" scheme="https://weibolu.online/tags/ACM%E6%A8%A1%E6%9D%BF/"/>
    
      <category term="数据结构" scheme="https://weibolu.online/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>字符串处理5 —— 回文树</title>
    <link href="https://weibolu.online/2019/09/11/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%865%20%E2%80%94%E2%80%94%20%E5%9B%9E%E6%96%87%E6%A0%91/"/>
    <id>https://weibolu.online/2019/09/11/字符串处理5 —— 回文树/</id>
    <published>2019-09-11T02:46:28.000Z</published>
    <updated>2019-09-11T04:20:41.995Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h2><p>回文树，也称为回文自动机，主要用于处理回文字符串类型问题。</p><p>时间复杂度达到O(n*(字符类型总数))，也是十分优秀。</p><a id="more"></a><h2 id="传送门"><a href="#传送门" class="headerlink" title="传送门"></a>传送门</h2><p><a href="https://blog.csdn.net/u013368721/article/details/42100363?readlog" target="_blank" rel="noopener">模板讲解1</a></p><p><a href="https://blog.csdn.net/lwfcgz/article/details/48739051" target="_blank" rel="noopener">模板讲解2</a></p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p>和AC自动机类似利用失配后的查询，可以快速找到下一个回文字符串。</p><p>严格的说回文树并不是一颗树，它其实是两颗树，有着两个树根，分别是空串和-1，这样在其两边拓展字符时就可以表示a、 aa两种，完美的解决了奇数和偶数回文串问题。</p><p>树中每个节点是一个回文子串，节点有两条指向边，一条指向在原回文串基础上向两边拓展相同字符，产生新的回文串，另一点边指向原回文串的最长回文后缀子串（即失配后的查询串）。</p><p>构造时将字符一个一个加入树中，常见的操作时在树上进行dfs，从而来统计某种特征。</p><h3 id="可以解决的问题有："><a href="#可以解决的问题有：" class="headerlink" title="可以解决的问题有："></a>可以解决的问题有：</h3><p>1.求串S前缀0~i内本质不同回文串的个数（两个串长度不同或者长度相同且至少有一个字符不同便是本质不同）</p><p>2.求串S内每一个本质不同回文串出现的次数</p><p>3.求串S内回文串的个数（其实就是1和2结合起来）</p><p>4.求以下标i结尾的回文串的个数</p><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">100005</span> ;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">26</span> ;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Palindromic_Tree</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> next[MAXN][N] ;<span class="comment">///next指针，next指针和字典树类似，指向的串为当前串两端加上同一个字符构成</span></span><br><span class="line">    <span class="keyword">int</span> fail[MAXN] ;<span class="comment">///fail指针，失配后跳转到fail指针指向的节点</span></span><br><span class="line">    <span class="keyword">int</span> cnt[MAXN] ; <span class="comment">///cnt[i]表示节点i表示的本质不同的串的个数（建树时求出的不是完全的，最后count()函数跑一遍以后才是正确的）</span></span><br><span class="line">    <span class="keyword">int</span> num[MAXN] ;<span class="comment">///表示以节点i表示的最长回文串的最右端点为回文串结尾的回文串个数。</span></span><br><span class="line">    <span class="keyword">int</span> len[MAXN] ;<span class="comment">///len[i]表示节点i表示的回文串的长度</span></span><br><span class="line">    <span class="keyword">int</span> S[MAXN] ;<span class="comment">///存放添加的字符</span></span><br><span class="line">    <span class="keyword">int</span> last ;<span class="comment">///指向上一个字符所在的节点，方便下一次add</span></span><br><span class="line">    <span class="keyword">int</span> n ;<span class="comment">///字符数组指针</span></span><br><span class="line">    <span class="keyword">int</span> p ;<span class="comment">///节点指针</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">newnode</span> <span class="params">( <span class="keyword">int</span> l )</span> </span>&#123;<span class="comment">//新建节点</span></span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; N ; ++ i ) next[p][i] = <span class="number">0</span> ;</span><br><span class="line">        cnt[p] = <span class="number">0</span> ;</span><br><span class="line">        num[p] = <span class="number">0</span> ;</span><br><span class="line">        len[p] = l ;</span><br><span class="line">        <span class="keyword">return</span> p ++ ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span> <span class="params">()</span> </span>&#123;<span class="comment">//初始化</span></span><br><span class="line">        p = <span class="number">0</span> ;</span><br><span class="line">        newnode (  <span class="number">0</span> ) ;</span><br><span class="line">        newnode ( <span class="number">-1</span> ) ;</span><br><span class="line">        last = <span class="number">0</span> ;</span><br><span class="line">        n = <span class="number">0</span> ;</span><br><span class="line">        S[n] = <span class="number">-1</span> ;<span class="comment">///开头放一个字符集中没有的字符，减少特判</span></span><br><span class="line">        fail[<span class="number">0</span>] = <span class="number">1</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get_fail</span> <span class="params">( <span class="keyword">int</span> x )</span> </span>&#123;<span class="comment">///和KMP一样，失配后找一个尽量最长的</span></span><br><span class="line">        <span class="keyword">while</span> ( S[n - len[x] - <span class="number">1</span>] != S[n] ) x = fail[x] ;</span><br><span class="line">        <span class="keyword">return</span> x ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span> <span class="params">( <span class="keyword">int</span> c )</span> </span>&#123;</span><br><span class="line">        c -= <span class="string">'a'</span> ;</span><br><span class="line">        S[++ n] = c ;</span><br><span class="line">        <span class="keyword">int</span> cur = get_fail ( last ) ;<span class="comment">///通过上一个回文串找这个回文串的匹配位置</span></span><br><span class="line">        <span class="keyword">if</span> ( !next[cur][c] ) &#123;<span class="comment">///如果这个回文串没有出现过，说明出现了一个新的本质不同的回文串</span></span><br><span class="line">            <span class="keyword">int</span> now = newnode ( len[cur] + <span class="number">2</span> ) ;<span class="comment">///新建节点</span></span><br><span class="line">            fail[now] = next[get_fail ( fail[cur] )][c] ;<span class="comment">///和AC自动机一样建立fail指针，以便失配后跳转</span></span><br><span class="line">            next[cur][c] = now ;</span><br><span class="line">            num[now] = num[fail[now]] + <span class="number">1</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        last = next[cur][c] ;</span><br><span class="line">        cnt[last] ++ ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">count</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = p - <span class="number">1</span> ; i &gt;= <span class="number">0</span> ; -- i ) cnt[fail[i]] += cnt[i] ;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125; ;</span><br></pre></td></tr></table></figure><h2 id="板子题"><a href="#板子题" class="headerlink" title="板子题"></a>板子题</h2><h3 id="计蒜客"><a href="#计蒜客" class="headerlink" title="计蒜客"></a><a href="https://nanti.jisuanke.com/t/41389" target="_blank" rel="noopener">计蒜客</a></h3><p>要求统计所有回文子串中不同字符的数量之和，建树后利用dfs统计即可。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">300005</span> ;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">26</span> ;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Palindromic_Tree</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> next[MAXN][N] ;<span class="comment">//next指针，next指针和字典树类似，指向的串为当前串两端加上同一个字符构成</span></span><br><span class="line"><span class="keyword">int</span> fail[MAXN] ;<span class="comment">//fail指针，失配后跳转到fail指针指向的节点</span></span><br><span class="line"><span class="keyword">int</span> cnt[MAXN] ;</span><br><span class="line"><span class="keyword">int</span> num[MAXN] ;</span><br><span class="line"><span class="keyword">int</span> len[MAXN] ;<span class="comment">//len[i]表示节点i表示的回文串的长度</span></span><br><span class="line"><span class="keyword">int</span> S[MAXN] ;<span class="comment">//存放添加的字符</span></span><br><span class="line"><span class="keyword">int</span> last ;<span class="comment">//指向上一个字符所在的节点，方便下一次add</span></span><br><span class="line"><span class="keyword">int</span> n ;<span class="comment">//字符数组指针</span></span><br><span class="line"><span class="keyword">int</span> p ;<span class="comment">//节点指针</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">newnode</span> <span class="params">( <span class="keyword">int</span> l )</span> </span>&#123;<span class="comment">//新建节点</span></span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; N ; ++ i ) next[p][i] = <span class="number">0</span> ;</span><br><span class="line">cnt[p] = <span class="number">0</span> ;</span><br><span class="line">num[p] = <span class="number">0</span> ;</span><br><span class="line">len[p] = l ;</span><br><span class="line"><span class="keyword">return</span> p ++ ;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span> <span class="params">()</span> </span>&#123;<span class="comment">//初始化</span></span><br><span class="line">p = <span class="number">0</span> ;</span><br><span class="line">newnode (  <span class="number">0</span> ) ;</span><br><span class="line">newnode ( <span class="number">-1</span> ) ;</span><br><span class="line">last = <span class="number">0</span> ;</span><br><span class="line">n = <span class="number">0</span> ;</span><br><span class="line">S[n] = <span class="number">-1</span> ;<span class="comment">//开头放一个字符集中没有的字符，减少特判</span></span><br><span class="line">fail[<span class="number">0</span>] = <span class="number">1</span> ;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_fail</span> <span class="params">( <span class="keyword">int</span> x )</span> </span>&#123;<span class="comment">//和KMP一样，失配后找一个尽量最长的</span></span><br><span class="line"><span class="keyword">while</span> ( S[n - len[x] - <span class="number">1</span>] != S[n] ) x = fail[x] ;</span><br><span class="line"><span class="keyword">return</span> x ;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span> <span class="params">( <span class="keyword">int</span> c )</span> </span>&#123;</span><br><span class="line">c -= <span class="string">'a'</span> ;</span><br><span class="line">S[++ n] = c ;</span><br><span class="line"><span class="keyword">int</span> cur = get_fail ( last ) ;<span class="comment">//通过上一个回文串找这个回文串的匹配位置</span></span><br><span class="line"><span class="keyword">if</span> ( !next[cur][c] ) &#123;<span class="comment">//如果这个回文串没有出现过，说明出现了一个新的本质不同的回文串</span></span><br><span class="line"><span class="keyword">int</span> now = newnode ( len[cur] + <span class="number">2</span> ) ;<span class="comment">//新建节点</span></span><br><span class="line">fail[now] = next[get_fail ( fail[cur] )][c] ;<span class="comment">//和AC自动机一样建立fail指针，以便失配后跳转</span></span><br><span class="line">next[cur][c] = now ;</span><br><span class="line">num[now] = num[fail[now]] + <span class="number">1</span> ;</span><br><span class="line">&#125;</span><br><span class="line">last = next[cur][c] ;</span><br><span class="line">cnt[last] ++ ;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">count</span> <span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = p - <span class="number">1</span> ; i &gt;= <span class="number">0</span> ; -- i ) cnt[fail[i]] += cnt[i] ;</span><br><span class="line"><span class="comment">//父亲累加儿子的cnt，因为如果fail[v]=u，则u一定是v的子回文串！</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;Pali;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[MAXN];</span><br><span class="line"><span class="keyword">int</span> vis[<span class="number">30</span>];</span><br><span class="line">ll ans = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++) <span class="keyword">if</span>(Pali.next[a][i])&#123;</span><br><span class="line">        vis[i] ++;</span><br><span class="line">        <span class="keyword">if</span>(vis[i] == <span class="number">1</span>) num++;</span><br><span class="line">        <span class="keyword">int</span> son = Pali.next[a][i];</span><br><span class="line">        ans += Pali.cnt[son] * num;</span><br><span class="line">        dfs(son, num);</span><br><span class="line">        vis[i]--;</span><br><span class="line">        <span class="keyword">if</span>(vis[i] == <span class="number">0</span>) num--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</span><br><span class="line">    Pali.init();</span><br><span class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span> vis);</span><br><span class="line">    <span class="keyword">int</span> len = <span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        Pali.add(s[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    Pali.count();</span><br><span class="line">    dfs(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    dfs(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Hint&quot;&gt;&lt;a href=&quot;#Hint&quot; class=&quot;headerlink&quot; title=&quot;Hint&quot;&gt;&lt;/a&gt;Hint&lt;/h2&gt;&lt;p&gt;回文树，也称为回文自动机，主要用于处理回文字符串类型问题。&lt;/p&gt;
&lt;p&gt;时间复杂度达到O(n*(字符类型总数))，也是十分优秀。&lt;/p&gt;
    
    </summary>
    
      <category term="字符串处理" scheme="https://weibolu.online/categories/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86/"/>
    
    
      <category term="ACM模板" scheme="https://weibolu.online/tags/ACM%E6%A8%A1%E6%9D%BF/"/>
    
      <category term="字符串处理" scheme="https://weibolu.online/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>字符串处理4 —— 马拉车算法</title>
    <link href="https://weibolu.online/2019/09/08/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%864%20%E2%80%94%E2%80%94%20%E9%A9%AC%E6%8B%89%E8%BD%A6%E7%AE%97%E6%B3%95/"/>
    <id>https://weibolu.online/2019/09/08/字符串处理4 —— 马拉车算法/</id>
    <published>2019-09-08T02:46:28.000Z</published>
    <updated>2019-09-08T13:16:23.897Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h2><p>马拉车（Manacher）算法，用来求字符串中以各字符为中心的最长回文串的长度。</p><p>时间复杂度十分优秀，为O(n)。</p><a id="more"></a><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> ans[maxn];            <span class="comment">//存下各点的最长回文串</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ma</span><span class="params">(<span class="built_in">string</span> ss)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    s.push_back(<span class="string">'$'</span>);</span><br><span class="line">    s.push_back(<span class="string">'#'</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ss.size(); i++) &#123;</span><br><span class="line">        s.push_back(ss[i]);</span><br><span class="line">        s.push_back(<span class="string">'#'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    s.push_back(<span class="string">'@'</span>);</span><br><span class="line">    <span class="keyword">int</span> maxr = <span class="number">0</span>, flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.size(); i++) &#123;</span><br><span class="line">        ans[i] = maxr &gt; i ? min(ans[<span class="number">2</span>*flag-i], maxr-i) : <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(s[i+ans[i]] == s[i-ans[i]]) ans[i]++;</span><br><span class="line">        <span class="keyword">if</span>(i + ans[i] &gt; maxr) &#123;</span><br><span class="line">            maxr = i+ans[i];</span><br><span class="line">            flag = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h2><p>算法思想主要是判断回文区域覆盖的最右侧范围，看看当前要判断的中心是否在这个范围内，然后映射到大中心点的左侧，因为这个子串已经算过，可以借助这个映射的子串判断当前要找的最大回文子串。</p><p>比较巧妙的是，它在字符之间加入特殊字符‘#’，这样就解决了偶串的问题。同时在开头加上特殊字符‘$‘，防止子串越界。</p><h2 id="传送门"><a href="#传送门" class="headerlink" title="传送门"></a>传送门</h2><p><a href="https://mp.weixin.qq.com/s?__biz=MzIzMTE1ODkyNQ==&amp;mid=2649410225&amp;idx=1&amp;sn=ed045e8edc3c49a436a328e5f0f37a55&amp;chksm=f0b60f53c7c18645b4c04a69ad314723cce94ed56994d6f963c2275a2db8d85f973f15f508e4&amp;mpshare=1&amp;scene=23&amp;srcid=1001JCsBlpxgUWjgixasChNQ#rd" target="_blank" rel="noopener">漫画风十分详细</a></p><p><a href="https://blog.csdn.net/bestsort/article/details/81637464" target="_blank" rel="noopener">图解十分强大</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Hint&quot;&gt;&lt;a href=&quot;#Hint&quot; class=&quot;headerlink&quot; title=&quot;Hint&quot;&gt;&lt;/a&gt;Hint&lt;/h2&gt;&lt;p&gt;马拉车（Manacher）算法，用来求字符串中以各字符为中心的最长回文串的长度。&lt;/p&gt;
&lt;p&gt;时间复杂度十分优秀，为O(n)。&lt;/p&gt;
    
    </summary>
    
      <category term="字符串处理" scheme="https://weibolu.online/categories/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86/"/>
    
    
      <category term="ACM模板" scheme="https://weibolu.online/tags/ACM%E6%A8%A1%E6%9D%BF/"/>
    
      <category term="字符串处理" scheme="https://weibolu.online/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>基础算法3 —— 日期推测星期数</title>
    <link href="https://weibolu.online/2019/08/04/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%953%20%E2%80%94%E2%80%94%20%E6%97%A5%E6%9C%9F%E6%8E%A8%E6%B5%8B%E6%98%9F%E6%9C%9F%E6%95%B0/"/>
    <id>https://weibolu.online/2019/08/04/基础算法3 —— 日期推测星期数/</id>
    <published>2019-08-04T00:31:03.000Z</published>
    <updated>2019-08-12T03:02:10.563Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h2><p>蔡勒公式，一个神奇的公式，可以通过日期的具体年月日推测出这天为星期几。</p><a id="more"></a><p>给定日期为yy-mm-dd<br>其中月份若为1月或2月，要记作上一年的13月和14月。</p><p>则其对应星期数为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">int</span> c = yy/<span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> d = yy%<span class="number">100</span>;</span><br><span class="line">week = (c/<span class="number">4</span>) - <span class="number">2</span> * c + (d+d/<span class="number">4</span>) + (<span class="number">13</span> * (mm+<span class="number">1</span>)/<span class="number">5</span>) + dd - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(week &lt; <span class="number">0</span>) week = (week + (-week/<span class="number">7</span>+<span class="number">1</span>) * <span class="number">7</span>)%<span class="number">7</span>;</span><br><span class="line"><span class="keyword">else</span> week %= <span class="number">7</span>;</span><br></pre></td></tr></table></figure><p>注意week可能为负值，这样最终得到的week为0就为周日，为1就为周一，依此类推。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Hint&quot;&gt;&lt;a href=&quot;#Hint&quot; class=&quot;headerlink&quot; title=&quot;Hint&quot;&gt;&lt;/a&gt;Hint&lt;/h2&gt;&lt;p&gt;蔡勒公式，一个神奇的公式，可以通过日期的具体年月日推测出这天为星期几。&lt;/p&gt;
    
    </summary>
    
      <category term="ACM基础算法" scheme="https://weibolu.online/categories/ACM%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="ACM模板" scheme="https://weibolu.online/tags/ACM%E6%A8%A1%E6%9D%BF/"/>
    
  </entry>
  
  <entry>
    <title>图论2 —— 最短路问题</title>
    <link href="https://weibolu.online/2019/07/23/%E5%9B%BE%E8%AE%BA2%20%E2%80%94%E2%80%94%20%E6%9C%80%E7%9F%AD%E8%B7%AF%E9%97%AE%E9%A2%98/"/>
    <id>https://weibolu.online/2019/07/23/图论2 —— 最短路问题/</id>
    <published>2019-07-23T06:12:25.000Z</published>
    <updated>2019-09-04T01:46:23.689Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h2><p>在此记录图论中最短路问题的几种不同解法<br>ps: 本篇博客仅记录算法思想，模板仅供参考。</p><a id="more"></a><h2 id="Dijkstra算法"><a href="#Dijkstra算法" class="headerlink" title="Dijkstra算法"></a>Dijkstra算法</h2><p>求一个图中两个点之间最短距离的最快的一种方法，要求不能有负边。</p><h3 id="原始版本"><a href="#原始版本" class="headerlink" title="原始版本"></a>原始版本</h3><p>时间复杂度：O(n^2)<br>记录所有点到起点的最短路径，每次从未松驰过的点取出距离起点最短的点（此处可以用优先队列优化），并用它来更新到未松驰过的点的距离，进行n-1次松驰后即可求得其余顶点到起点的最短距离，可以用邻接矩阵或者邻接链表实现。</p><h4 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> mapa[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> book[manx], dis[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(book, <span class="number">0</span>, <span class="keyword">sizeof</span> book);</span><br><span class="line">    book[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        dis[i] = mapa[<span class="number">1</span>][i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> min = inf, u;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">2</span>; j &lt;= n; j++) <span class="keyword">if</span>(book[j] == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(dis[j] &lt; min) &#123;</span><br><span class="line">                min = dis[j]; u = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        book[u] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) <span class="keyword">if</span>(book[j] == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(dis[j] &gt; dis[u] + mapa[u][j]) &#123;</span><br><span class="line">                dis[j] = dis[u] + mapa[u][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="堆优化版本"><a href="#堆优化版本" class="headerlink" title="堆优化版本"></a>堆优化版本</h3><p>时间复杂度O(mlogn)<br>利用堆来取出每次距离起点最近的顶点，通过优先队列来实现。</p><h3 id="斐波那契堆优化"><a href="#斐波那契堆优化" class="headerlink" title="斐波那契堆优化"></a>斐波那契堆优化</h3><p>时间复杂度O(m+nlogn)<br>虽然时间复杂度很好看，但很难实现，一般也不会用到。</p><h2 id="Floyd算法"><a href="#Floyd算法" class="headerlink" title="Floyd算法"></a>Floyd算法</h2><p>时间复杂度高达O(n^3)，优点是可以求出图中所有点对的最短路。<br>利用每个点来对每个点对进行松驰。</p><h3 id="模板-1"><a href="#模板-1" class="headerlink" title="模板"></a>模板</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; k++) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(i == k) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i == j || k == j) <span class="keyword">continue</span>;</span><br><span class="line">            dis[i][j] = min(dis[i][j], dis[i][k]+dis[k][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Bellman-ford算法"><a href="#Bellman-ford算法" class="headerlink" title="Bellman-ford算法"></a>Bellman-ford算法</h2><p>时间复杂度为O(mn)，可以找出负环。</p><p>记录所有顶点到达起点的距离，并进行n-1次遍历，对于图中的每条边，如果起点距离加边权小于终点距离，则进行更新。在n-1次遍历后，如果还可以优化，说明存在负环，并且可以找出负环。</p><h3 id="模板-2"><a href="#模板-2" class="headerlink" title="模板"></a>模板</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> st, en, val;</span><br><span class="line">&#125;edges[maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dis[maxn];</span><br><span class="line"><span class="keyword">int</span> st;             <span class="comment">//起点</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span>* Bellman-ford()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dis, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dis);</span><br><span class="line">    dis[st] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(dis[edges[j].st] + edges[j].val &lt; dis[edges[j].en]) &#123;</span><br><span class="line">                dis[edges[j].en] = dis[edges[j].st] + edges[j].val;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SPFA算法"><a href="#SPFA算法" class="headerlink" title="SPFA算法"></a>SPFA算法</h2><p>国人发明出来的一种计算单源最短路的方法，算是BF算法的一种简化版本，代码量较小，时间复杂度为O(km) k一般&lt;=2，最坏情况下达到O(mn),可以用来判断负环。</p><p>思路与dijkstra类似，通过队列实现，每次将从队列中取出一个点，并判断能否优化其它点，如果能优化就将这个点加入队列，注意另外开数组保存节点是否在队列中。同时在记录每个点进入队列的次数，如果大于n次，则说明有负环。</p><h3 id="模板-3"><a href="#模板-3" class="headerlink" title="模板"></a>模板</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> from, to, cost;</span><br><span class="line">    edge()&#123;&#125;</span><br><span class="line">    edge(<span class="keyword">int</span> _from, <span class="keyword">int</span> _to, <span class="keyword">int</span> _cost)&#123;</span><br><span class="line">        from = _from;</span><br><span class="line">        to = _to;</span><br><span class="line">        cost = _cost;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;edge&gt; edges;</span><br><span class="line"><span class="keyword">int</span> rank[maxn], dis[maxn];</span><br><span class="line"><span class="keyword">bool</span> inque[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span></span>&#123;</span><br><span class="line">    edges.push_back(edge(u, v, w));</span><br><span class="line">    <span class="keyword">int</span> m = edges.size();</span><br><span class="line">    G[u].push_back(m<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">spfa</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        dis[i] = INF;</span><br><span class="line">        rank[i] = <span class="number">0</span>;</span><br><span class="line">        inque[i] = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    dis[s] = <span class="number">0</span>;</span><br><span class="line">    rank[s] = <span class="number">1</span>;</span><br><span class="line">    inque[s] = <span class="literal">true</span>;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; que;</span><br><span class="line">    que.push(s);</span><br><span class="line">    <span class="keyword">while</span>(!que.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> u = que.front();</span><br><span class="line">        inque[u] = <span class="literal">false</span>;</span><br><span class="line">        que.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="keyword">int</span>)G[u].size(); i++) &#123;</span><br><span class="line">            edge e = edges[G[u][i]];</span><br><span class="line">            <span class="keyword">if</span>(dis[e.to] &gt; dis[u] + e.cost) &#123;</span><br><span class="line">                dis[e.to] = dis[u] + e.cost;</span><br><span class="line">                <span class="keyword">if</span>(!inque[e.to]) &#123;</span><br><span class="line">                    que.push(e.to);</span><br><span class="line">                    inque[e.to] = <span class="literal">true</span>;</span><br><span class="line">                    rank[e.to]++;</span><br><span class="line">                    <span class="keyword">if</span>(rank[e.to] &gt;= n) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Hint&quot;&gt;&lt;a href=&quot;#Hint&quot; class=&quot;headerlink&quot; title=&quot;Hint&quot;&gt;&lt;/a&gt;Hint&lt;/h2&gt;&lt;p&gt;在此记录图论中最短路问题的几种不同解法&lt;br&gt;ps: 本篇博客仅记录算法思想，模板仅供参考。&lt;/p&gt;
    
    </summary>
    
      <category term="基础图论" scheme="https://weibolu.online/categories/%E5%9F%BA%E7%A1%80%E5%9B%BE%E8%AE%BA/"/>
    
    
      <category term="ACM模板" scheme="https://weibolu.online/tags/ACM%E6%A8%A1%E6%9D%BF/"/>
    
      <category term="基础图论" scheme="https://weibolu.online/tags/%E5%9F%BA%E7%A1%80%E5%9B%BE%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>图论3 —— 最大流问题</title>
    <link href="https://weibolu.online/2019/07/23/%E5%9B%BE%E8%AE%BA3%20%E2%80%94%E2%80%94%20%E6%9C%80%E5%A4%A7%E6%B5%81%E9%97%AE%E9%A2%98/"/>
    <id>https://weibolu.online/2019/07/23/图论3 —— 最大流问题/</id>
    <published>2019-07-23T06:12:25.000Z</published>
    <updated>2019-08-12T03:30:13.992Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="基础图论" scheme="https://weibolu.online/categories/%E5%9F%BA%E7%A1%80%E5%9B%BE%E8%AE%BA/"/>
    
    
      <category term="ACM模板" scheme="https://weibolu.online/tags/ACM%E6%A8%A1%E6%9D%BF/"/>
    
      <category term="基础图论" scheme="https://weibolu.online/tags/%E5%9F%BA%E7%A1%80%E5%9B%BE%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>数论7 —— 快速质因数分解</title>
    <link href="https://weibolu.online/2019/07/21/%E6%95%B0%E8%AE%BA7%20%E2%80%94%E2%80%94%20%E5%BF%AB%E9%80%9F%E8%B4%A8%E5%9B%A0%E6%95%B0%E5%88%86%E8%A7%A3/"/>
    <id>https://weibolu.online/2019/07/21/数论7 —— 快速质因数分解/</id>
    <published>2019-07-21T02:29:25.000Z</published>
    <updated>2019-08-12T03:27:35.095Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h2><p>这一篇要说的就是这个神奇的算法Pollard rho质因数分解<br>一般来说质因数分解用的都是O(n^1/2)的算法，但这个神奇的算法的时间复杂度可以达到O(n^1/4)，这就意味着它可以对一个1e18的数据进行质因数分解，目前学到的算法很少能达到这个时间复杂度，令人惊叹┑(￣Д ￣)┍</p><a id="more"></a><h2 id="算法原理"><a href="#算法原理" class="headerlink" title="算法原理"></a>算法原理</h2><p>首先判断这个数是不是质数，是的话就没有分解的必要了，这里用到的是Miller-Rabin算法，其时间复杂度为O(slog3n)</p><h3 id="Miller-Rabin模板"><a href="#Miller-Rabin模板" class="headerlink" title="Miller-Rabin模板"></a>Miller-Rabin模板</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">65</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> n, x[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">multi</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a, <span class="keyword">long</span> <span class="keyword">long</span> b, <span class="keyword">long</span> <span class="keyword">long</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(b) &#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1L</span>L) ans = (ans+a)%p;</span><br><span class="line">        a = (a+a)%p;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">qpow</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a, <span class="keyword">long</span> <span class="keyword">long</span> b, <span class="keyword">long</span> <span class="keyword">long</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b) &#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1L</span>L) ans = multi(ans, a, p);</span><br><span class="line">        a = multi(a, a, p);</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Miller_Rabin</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">2</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">int</span> s = <span class="number">20</span>, i, t = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> u = n<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(!(u &amp; <span class="number">1</span>)) &#123;</span><br><span class="line">        t++;</span><br><span class="line">        u &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(s--) &#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> a = rand()%(n<span class="number">-2</span>)+<span class="number">2</span>;</span><br><span class="line">        x[<span class="number">0</span>] = qpow(a, u, n);</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= t; i++) &#123;</span><br><span class="line">            x[i] = multi(x[i<span class="number">-1</span>], x[i<span class="number">-1</span>], n);</span><br><span class="line">            <span class="keyword">if</span>(x[i] == <span class="number">1</span> &amp;&amp; x[i<span class="number">-1</span>] != <span class="number">1</span> &amp;&amp; x[i<span class="number">-1</span>] != n<span class="number">-1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(x[t] != <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后这一步就很迷了，我们任取一个数它是n的质因数的概率很低，但是如果我们任取两个数x1和x2，他们差值是n的因数的概率却很大的提高了，这也就是所谓生日悖论（30个人中有两个人的生日在同一天的几率高达50%，60个人中更是高达99%，是不是很神奇(￣︶￣*))）这也就是这个算法的核心思想，通过随机出x1，并由x1产生x2，判断gcd(|x1-x2|, n)是否为1，如果为1就成功找到一个因子，接下来分解|x1-x2|和n/|x1-x2|即可，否则就更换x2知道出现循环，表示x1选择有误，更换x1。</p><h2 id="kuang-bin模板"><a href="#kuang-bin模板" class="headerlink" title="kuang_bin模板"></a>kuang_bin模板</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//****************************************************************</span></span><br><span class="line"><span class="comment">// Miller_Rabin 算法进行素数测试</span></span><br><span class="line"><span class="comment">//速度快，而且可以判断 &lt;2^63的数</span></span><br><span class="line"><span class="comment">//****************************************************************</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> S=<span class="number">20</span>;<span class="comment">//随机算法判定次数，S越大，判错概率越小</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//计算 (a*b)%c.   a,b都是long long的数，直接相乘可能溢出的</span></span><br><span class="line"><span class="comment">//  a,b,c &lt;2^63</span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">mult_mod</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a,<span class="keyword">long</span> <span class="keyword">long</span> b,<span class="keyword">long</span> <span class="keyword">long</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    a%=c;</span><br><span class="line">    b%=c;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ret=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>)&#123;ret+=a;ret%=c;&#125;</span><br><span class="line">        a&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(a&gt;=c)a%=c;</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//计算  x^n %c</span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">pow_mod</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x,<span class="keyword">long</span> <span class="keyword">long</span> n,<span class="keyword">long</span> <span class="keyword">long</span> mod)</span><span class="comment">//x^n%c</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>)<span class="keyword">return</span> x%mod;</span><br><span class="line">    x%=mod;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> tmp=x;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ret=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(n&amp;<span class="number">1</span>) ret=mult_mod(ret,tmp,mod);</span><br><span class="line">        tmp=mult_mod(tmp,tmp,mod);</span><br><span class="line">        n&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//以a为基,n-1=x*2^t      a^(n-1)=1(mod n)  验证n是不是合数</span></span><br><span class="line"><span class="comment">//一定是合数返回true,不一定返回false</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a,<span class="keyword">long</span> <span class="keyword">long</span> n,<span class="keyword">long</span> <span class="keyword">long</span> x,<span class="keyword">long</span> <span class="keyword">long</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ret=pow_mod(a,x,n);</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> last=ret;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=t;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ret=mult_mod(ret,ret,n);</span><br><span class="line">        <span class="keyword">if</span>(ret==<span class="number">1</span>&amp;&amp;last!=<span class="number">1</span>&amp;&amp;last!=n<span class="number">-1</span>) <span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//合数</span></span><br><span class="line">        last=ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ret!=<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Miller_Rabin()算法素数判定</span></span><br><span class="line"><span class="comment">//是素数返回true.(可能是伪素数，但概率极小)</span></span><br><span class="line"><span class="comment">//合数返回false;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Miller_Rabin</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;<span class="number">2</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">2</span>)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span>((n&amp;<span class="number">1</span>)==<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//偶数</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> x=n<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>((x&amp;<span class="number">1</span>)==<span class="number">0</span>)&#123;x&gt;&gt;=<span class="number">1</span>;t++;&#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;S;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> a=rand()%(n<span class="number">-1</span>)+<span class="number">1</span>;<span class="comment">//rand()需要stdlib.h头文件</span></span><br><span class="line">        <span class="keyword">if</span>(check(a,n,x,t))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//合数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//************************************************</span></span><br><span class="line"><span class="comment">//pollard_rho 算法进行质因数分解</span></span><br><span class="line"><span class="comment">//************************************************</span></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> factor[<span class="number">100</span>];<span class="comment">//质因数分解结果（刚返回时是无序的）</span></span><br><span class="line"><span class="keyword">int</span> tol;<span class="comment">//质因数的个数。数组小标从0开始</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">gcd</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a,<span class="keyword">long</span> <span class="keyword">long</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a==<span class="number">0</span>)<span class="keyword">return</span> <span class="number">1</span>;<span class="comment">//???????</span></span><br><span class="line">    <span class="keyword">if</span>(a&lt;<span class="number">0</span>) <span class="keyword">return</span> gcd(-a,b);</span><br><span class="line">    <span class="keyword">while</span>(b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> t=a%b;</span><br><span class="line">        a=b;</span><br><span class="line">        b=t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">Pollard_rho</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x,<span class="keyword">long</span> <span class="keyword">long</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> i=<span class="number">1</span>,k=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> x0=rand()%x;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> y=x0;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        i++;</span><br><span class="line">        x0=(mult_mod(x0,x0,x)+c)%x;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> d=gcd(y-x0,x);</span><br><span class="line">        <span class="keyword">if</span>(d!=<span class="number">1</span>&amp;&amp;d!=x) <span class="keyword">return</span> d;</span><br><span class="line">        <span class="keyword">if</span>(y==x0) <span class="keyword">return</span> x;</span><br><span class="line">        <span class="keyword">if</span>(i==k)&#123;y=x0;k+=k;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//对n进行素因子分解</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">findfac</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Miller_Rabin(n))<span class="comment">//素数</span></span><br><span class="line">    &#123;</span><br><span class="line">        factor[tol++]=n;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> p=n;</span><br><span class="line">    <span class="keyword">while</span>(p&gt;=n)p=Pollard_rho(p,rand()%(n<span class="number">-1</span>)+<span class="number">1</span>);</span><br><span class="line">    findfac(p);</span><br><span class="line">    findfac(n/p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//srand(time(NULL));//需要time.h头文件//POJ上G++不能加这句话</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%I64d"</span>,&amp;n)!=EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        tol=<span class="number">0</span>;</span><br><span class="line">        findfac(n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;tol;i++)<span class="built_in">printf</span>(<span class="string">"%I64d "</span>,factor[i]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        <span class="keyword">if</span>(Miller_Rabin(n))<span class="built_in">printf</span>(<span class="string">"Yes\n"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"No\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Hint&quot;&gt;&lt;a href=&quot;#Hint&quot; class=&quot;headerlink&quot; title=&quot;Hint&quot;&gt;&lt;/a&gt;Hint&lt;/h2&gt;&lt;p&gt;这一篇要说的就是这个神奇的算法Pollard rho质因数分解&lt;br&gt;一般来说质因数分解用的都是O(n^1/2)的算法，但这个神奇的算法的时间复杂度可以达到O(n^1/4)，这就意味着它可以对一个1e18的数据进行质因数分解，目前学到的算法很少能达到这个时间复杂度，令人惊叹┑(￣Д ￣)┍&lt;/p&gt;
    
    </summary>
    
      <category term="基础数论" scheme="https://weibolu.online/categories/%E5%9F%BA%E7%A1%80%E6%95%B0%E8%AE%BA/"/>
    
    
      <category term="ACM模板" scheme="https://weibolu.online/tags/ACM%E6%A8%A1%E6%9D%BF/"/>
    
      <category term="基础数论" scheme="https://weibolu.online/tags/%E5%9F%BA%E7%A1%80%E6%95%B0%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>dp4 —— 数位DP</title>
    <link href="https://weibolu.online/2019/07/17/dp4%20%E2%80%94%E2%80%94%20%E6%95%B0%E4%BD%8DDP/"/>
    <id>https://weibolu.online/2019/07/17/dp4 —— 数位DP/</id>
    <published>2019-07-17T14:44:07.000Z</published>
    <updated>2019-08-12T03:41:33.162Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h2><p>常见用途即求给定范围内满足特定条件的数字（比如求含49的数字），如直接枚举会超时。而数位DP即通过数字每一位数的可能取值来枚举，用数字的一些标志构造DP数组，然后进行记忆化搜索，就可以降低时间复杂度（￣︶￣）↗　。</p><a id="more"></a><h2 id="传送门"><a href="#传送门" class="headerlink" title="传送门"></a>传送门</h2><p>[数位DP详解/blog.csdn.net/wust_zzwh/article/details/52100392)</p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=3652" target="_blank" rel="noopener">HDU3652</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> up[<span class="number">45</span>];</span><br><span class="line">ll dp[<span class="number">15</span>][<span class="number">14</span>][<span class="number">15</span>];          <span class="comment">//根据三个维度构造DP数组</span></span><br><span class="line"><span class="keyword">int</span> len;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> mod, <span class="keyword">int</span> have, <span class="keyword">int</span> lim)</span>     <span class="comment">//记忆花搜索，pos为搜到的位数，mod为当前求模结果，have为搜索13的位数，lim为判断是否超出数据最大界限</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(pos == <span class="number">0</span>) <span class="keyword">return</span> ll(have == <span class="number">2</span> &amp;&amp; mod == <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(!lim &amp;&amp; dp[pos][mod][have] != <span class="number">-1</span>) <span class="keyword">return</span> dp[pos][mod][have];</span><br><span class="line">    <span class="keyword">int</span> tp = lim ? up[pos]:<span class="number">9</span>;</span><br><span class="line">    ll ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= tp; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> modd, havv, limm;</span><br><span class="line">        modd = ((mod*<span class="number">10</span>)%<span class="number">13</span>+i) % <span class="number">13</span>;</span><br><span class="line">        <span class="keyword">if</span>(have == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">1</span>) havv = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> havv = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(have == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">1</span>) havv = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(i == <span class="number">3</span>) havv = <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">else</span> havv = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(have == <span class="number">2</span>) havv = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(lim &amp;&amp; i == up[pos]) limm = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> limm = <span class="number">0</span>;</span><br><span class="line">        ans += dfs(pos<span class="number">-1</span>, modd, havv, limm);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!lim) <span class="keyword">return</span> dp[pos][mod][have] = ans;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dp, <span class="number">-1</span>, <span class="keyword">sizeof</span> dp);</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n &amp;&amp; n) &#123;</span><br><span class="line">        len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(n) &#123;</span><br><span class="line">            up[++len] = n%<span class="number">10</span>;           <span class="comment">//将各个数位分解出来</span></span><br><span class="line">            n = n/<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; dfs(len, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Hint&quot;&gt;&lt;a href=&quot;#Hint&quot; class=&quot;headerlink&quot; title=&quot;Hint&quot;&gt;&lt;/a&gt;Hint&lt;/h2&gt;&lt;p&gt;常见用途即求给定范围内满足特定条件的数字（比如求含49的数字），如直接枚举会超时。而数位DP即通过数字每一位数的可能取值来枚举，用数字的一些标志构造DP数组，然后进行记忆化搜索，就可以降低时间复杂度（￣︶￣）↗　。&lt;/p&gt;
    
    </summary>
    
      <category term="动态规划" scheme="https://weibolu.online/categories/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    
      <category term="DP" scheme="https://weibolu.online/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>图论1 —— 匈牙利算法和KM算法</title>
    <link href="https://weibolu.online/2019/07/16/%E5%9B%BE%E8%AE%BA1%20%E2%80%94%E2%80%94%20%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95%E5%92%8CKM%E7%AE%97%E6%B3%95/"/>
    <id>https://weibolu.online/2019/07/16/图论1 —— 匈牙利算法和KM算法/</id>
    <published>2019-07-16T02:12:25.000Z</published>
    <updated>2019-08-12T02:57:11.633Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h2><h3 id="匈牙利算法"><a href="#匈牙利算法" class="headerlink" title="匈牙利算法"></a>匈牙利算法</h3><p>用来求解二分图的最大匹配，即使匹配中的边数最大；<br>时间复杂度为O(VE)   V为二分图左边的顶点数，E为二分图中边的数目。</p><h3 id="KM算法"><a href="#KM算法" class="headerlink" title="KM算法"></a>KM算法</h3><p>KM算法则是用来求二分图的最佳完美匹配，即给边加上权值后求匹配中权值和的最大值;<br>时间复杂度为O(n^4)可以优化到O(n^3),不过实际上效果相差并不大。</p><p>这两个问题也可以通过网络流来求解，但没有这两个算法容易写。</p><a id="more"></a><h2 id="传送门"><a href="#传送门" class="headerlink" title="传送门"></a>传送门</h2><p>关于这两个算法的讲解也比较多，就从网上找了比较好的解析。<br><a href="https://blog.csdn.net/dengheCSDN/article/details/77619308" target="_blank" rel="noopener">匈牙利算法</a></p><p><a href="https://www.cnblogs.com/Lanly/p/6291214.html" target="_blank" rel="noopener">KM算法</a></p><h3 id="使用技巧"><a href="#使用技巧" class="headerlink" title="使用技巧"></a>使用技巧</h3><p>KM算法中如果给定的二分图不是完全二分图可以将未相连的点相连并将权值置0；</p><p>KM算法中如果求匹配权值的最小值，可以将权值取相反数，求出结果后再取相反数。</p><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><h3 id="匈牙利算法-1"><a href="#匈牙利算法-1" class="headerlink" title="匈牙利算法"></a>匈牙利算法</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">510</span>;</span><br><span class="line"><span class="keyword">int</span> mapa[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> link[maxn], visx[maxn], visy[maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> k, m, n;  <span class="comment">//k表示边数，m和n分别表示两组顶点数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ff</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    visx[x] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(visy[i] == <span class="number">0</span> &amp;&amp; mapa[x][i]) &#123;</span><br><span class="line">            visy[i] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(link[i] == <span class="number">0</span> || ff(link[i])) &#123;</span><br><span class="line">                link[i] = x;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t1, t2;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; k &amp;&amp; k) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; m &gt;&gt; n;</span><br><span class="line">        <span class="built_in">memset</span>(link, <span class="number">0</span>, <span class="keyword">sizeof</span> link);</span><br><span class="line">        <span class="built_in">memset</span>(mapa, <span class="number">0</span>, <span class="keyword">sizeof</span> mapa);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i++) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; t1 &gt;&gt; t2;</span><br><span class="line">            mapa[t1][t2] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">            <span class="built_in">memset</span>(visy, <span class="number">0</span>, <span class="keyword">sizeof</span> visy);</span><br><span class="line">            <span class="keyword">if</span>(ff(i)) ans++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="KM算法O-n-4"><a href="#KM算法O-n-4" class="headerlink" title="KM算法O(n^4)"></a>KM算法O(n^4)</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">305</span>;</span><br><span class="line"><span class="keyword">int</span> w[maxn][maxn];   <span class="comment">//w记录边的权重值</span></span><br><span class="line"><span class="keyword">int</span> line[maxn], visx[maxn], visy[maxn], cx[maxn], cy[maxn];</span><br><span class="line"><span class="keyword">int</span> n, m， ans;       <span class="comment">//m和n分别表示两组顶点的个数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ff</span><span class="params">(<span class="keyword">int</span> x)</span>      <span class="comment">//匈牙利算法的搜索模块</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    visx[x] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(visy[i] == <span class="number">0</span> &amp;&amp; cx[x]+cy[i] == w[x][i]) &#123;</span><br><span class="line">            visy[i] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(line[i] == <span class="number">0</span> || ff(line[i])) &#123;</span><br><span class="line">                line[i] = x;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">km</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> d = inf;</span><br><span class="line">            <span class="built_in">memset</span>(visx, <span class="number">0</span>, <span class="keyword">sizeof</span> visx);</span><br><span class="line">            <span class="built_in">memset</span>(visy, <span class="number">0</span>, <span class="keyword">sizeof</span> visy);</span><br><span class="line">            <span class="keyword">if</span>(ff(i)) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) <span class="keyword">if</span>(visx[j])&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= m; k++) <span class="keyword">if</span>(!visy[k])</span><br><span class="line">                    d = min(d, cx[j]+cy[k]-w[j][k]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(d == inf) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) <span class="keyword">if</span>(visx[j])</span><br><span class="line">                cx[j] -= d;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++) <span class="keyword">if</span>(visy[j])</span><br><span class="line">                cy[j] += d;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">        ans += w[line[i]][i];</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m) &#123;</span><br><span class="line">        <span class="built_in">memset</span>(cx, <span class="number">0</span>, <span class="keyword">sizeof</span> cx);</span><br><span class="line">        <span class="built_in">memset</span>(cy, <span class="number">0</span>, <span class="keyword">sizeof</span> cy);</span><br><span class="line">        <span class="built_in">memset</span>(w, <span class="number">0</span>, <span class="keyword">sizeof</span> w);</span><br><span class="line">        <span class="built_in">memset</span>(line, <span class="number">0</span>, <span class="keyword">sizeof</span> line);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> d = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">                <span class="built_in">cin</span> &gt;&gt; w[i][j];</span><br><span class="line">                d = max(w[i][j], d);</span><br><span class="line">            &#125;</span><br><span class="line">            cx[i] = d;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; km() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="KM算法O-n-3"><a href="#KM算法O-n-3" class="headerlink" title="KM算法O(n^3)"></a>KM算法O(n^3)</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">305</span>;</span><br><span class="line"><span class="keyword">int</span> w[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> line[maxn], visx[maxn], visy[maxn], cx[maxn], cy[maxn];</span><br><span class="line"><span class="keyword">int</span> slack[maxn];  <span class="comment">//优化的关键存下delt的值，便于之后找到最小的delt</span></span><br><span class="line"><span class="keyword">int</span> n, ans, m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ff</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    visx[x] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> delt;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        delt = cx[x] + cy[i] - w[x][i];</span><br><span class="line">        <span class="keyword">if</span>(visy[i] == <span class="number">0</span> &amp;&amp; cx[x]+cy[i] == w[x][i]) &#123;</span><br><span class="line">            visy[i] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(line[i] == <span class="number">0</span> || ff(line[i])) &#123;</span><br><span class="line">                line[i] = x;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(slack[i] &gt; delt)</span><br><span class="line">            slack[i] = delt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">km</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> d = inf;</span><br><span class="line">            <span class="built_in">memset</span>(visx, <span class="number">0</span>, <span class="keyword">sizeof</span> visx);</span><br><span class="line">            <span class="built_in">memset</span>(visy, <span class="number">0</span>, <span class="keyword">sizeof</span> visy);</span><br><span class="line">            <span class="built_in">memset</span>(slack, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> slack);</span><br><span class="line">            <span class="keyword">if</span>(ff(i)) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++) <span class="keyword">if</span>(!visy[j] &amp;&amp; d &gt; slack[j])</span><br><span class="line">                d = slack[j];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) <span class="keyword">if</span>(visx[j])</span><br><span class="line">                cx[j] -= d;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">                <span class="keyword">if</span>(visy[j]) cy[j] += d;</span><br><span class="line">                <span class="keyword">else</span> slack[j] -= d;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">        ans += w[line[i]][i];</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m) &#123;</span><br><span class="line">        <span class="built_in">memset</span>(cx, <span class="number">0</span>, <span class="keyword">sizeof</span> cx);</span><br><span class="line">        <span class="built_in">memset</span>(cy, <span class="number">0</span>, <span class="keyword">sizeof</span> cy);</span><br><span class="line">        <span class="built_in">memset</span>(w, <span class="number">0</span>, <span class="keyword">sizeof</span> w);</span><br><span class="line">        <span class="built_in">memset</span>(line, <span class="number">0</span>, <span class="keyword">sizeof</span> line);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> d = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">                <span class="built_in">cin</span> &gt;&gt; w[i][j];</span><br><span class="line">                d = max(w[i][j], d);</span><br><span class="line">            &#125;</span><br><span class="line">            cx[i] = d;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; km() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Hint&quot;&gt;&lt;a href=&quot;#Hint&quot; class=&quot;headerlink&quot; title=&quot;Hint&quot;&gt;&lt;/a&gt;Hint&lt;/h2&gt;&lt;h3 id=&quot;匈牙利算法&quot;&gt;&lt;a href=&quot;#匈牙利算法&quot; class=&quot;headerlink&quot; title=&quot;匈牙利算法&quot;&gt;&lt;/a&gt;匈牙利算法&lt;/h3&gt;&lt;p&gt;用来求解二分图的最大匹配，即使匹配中的边数最大；&lt;br&gt;时间复杂度为O(VE)   V为二分图左边的顶点数，E为二分图中边的数目。&lt;/p&gt;
&lt;h3 id=&quot;KM算法&quot;&gt;&lt;a href=&quot;#KM算法&quot; class=&quot;headerlink&quot; title=&quot;KM算法&quot;&gt;&lt;/a&gt;KM算法&lt;/h3&gt;&lt;p&gt;KM算法则是用来求二分图的最佳完美匹配，即给边加上权值后求匹配中权值和的最大值;&lt;br&gt;时间复杂度为O(n^4)可以优化到O(n^3),不过实际上效果相差并不大。&lt;/p&gt;
&lt;p&gt;这两个问题也可以通过网络流来求解，但没有这两个算法容易写。&lt;/p&gt;
    
    </summary>
    
      <category term="基础图论" scheme="https://weibolu.online/categories/%E5%9F%BA%E7%A1%80%E5%9B%BE%E8%AE%BA/"/>
    
    
      <category term="ACM模板" scheme="https://weibolu.online/tags/ACM%E6%A8%A1%E6%9D%BF/"/>
    
      <category term="基础图论" scheme="https://weibolu.online/tags/%E5%9F%BA%E7%A1%80%E5%9B%BE%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>dp3 —— LIS与LCS问题</title>
    <link href="https://weibolu.online/2019/06/13/dp3%20%E2%80%94%E2%80%94%20LIS%E4%B8%8ELCS%E9%97%AE%E9%A2%98/"/>
    <id>https://weibolu.online/2019/06/13/dp3 —— LIS与LCS问题/</id>
    <published>2019-06-13T04:44:07.000Z</published>
    <updated>2019-06-26T06:53:50.002Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="动态规划" scheme="https://weibolu.online/categories/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    
      <category term="DP" scheme="https://weibolu.online/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>数据结构5 —— 划分树</title>
    <link href="https://weibolu.online/2019/06/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%845%20%E2%80%94%E2%80%94%20%E5%88%92%E5%88%86%E6%A0%91/"/>
    <id>https://weibolu.online/2019/06/11/数据结构5 —— 划分树/</id>
    <published>2019-06-11T03:46:28.000Z</published>
    <updated>2019-10-25T05:35:32.252Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h2><p>思想与线段树类似，也是一种十分好用的数据结构，可以用于求区间内第k大值。</p><a id="more"></a><h2 id="划分树"><a href="#划分树" class="headerlink" title="划分树"></a>划分树</h2><p>划分树是一种基于线段树的数据结构。主要用于快速求出(在log(n)的时间复杂度内）序列区间的第k大值。<br>　　查找整序列的第k大值往往采用。然而此方法会破坏原序列，并且需要O(n)的时间复杂度。抑或使用二叉平衡树进行维护，此方法每次查找时间复杂度仅为O(logn)。然而此方法丢失了原序列的顺序信息，无法查找出某区间内的第k大值。<br>　　划分树的基本思想就是对于某个区间，把它划分成两个子区间，左边区间的数小于右边区间的数。查找的时候通过记录进入左子树的数的个数，确定下一个查找区间，最后范围缩小到1，就找到了。<br>　　划分树定义为，它的每一个节点保存区间[lft,rht]所有元素，元素顺序与原数组（输入）相同，但是，两个子树的元素为该节点所有元素排序后(rht-lft+1)/2个进入左子树，其余的到右子树，同时维护一个num域，num[i]表示lft-&gt;i这个点有多少个进入了左子树。</p><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">100010</span>;</span><br><span class="line"><span class="keyword">int</span> tree[<span class="number">30</span>][MAXN];<span class="comment">//表示每层每个位置的值</span></span><br><span class="line"><span class="keyword">int</span> sorted[MAXN];<span class="comment">//已经排序的数</span></span><br><span class="line"><span class="keyword">int</span> toleft[<span class="number">30</span>][MAXN];<span class="comment">//toleft[p][i]表示第i层从1到i有多少个数分入左边</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> le,<span class="keyword">int</span> r,<span class="keyword">int</span> dep)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(le==r)<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid=(le+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> same=mid-le+<span class="number">1</span>;<span class="comment">//表示等于中间值而且被分入左边的个数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=le;i&lt;=r;i++)</span><br><span class="line">      <span class="keyword">if</span>(tree[dep][i]&lt;sorted[mid])</span><br><span class="line">         same--;</span><br><span class="line">    <span class="keyword">int</span> lpos=le;</span><br><span class="line">    <span class="keyword">int</span> rpos=mid+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=le;i&lt;=r;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(tree[dep][i]&lt;sorted[mid])<span class="comment">//比中间的数小，分入左边</span></span><br><span class="line">             tree[dep+<span class="number">1</span>][lpos++]=tree[dep][i];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(tree[dep][i]==sorted[mid]&amp;&amp;same&gt;<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            tree[dep+<span class="number">1</span>][lpos++]=tree[dep][i];</span><br><span class="line">            same--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>  <span class="comment">//比中间值大分入右边</span></span><br><span class="line">            tree[dep+<span class="number">1</span>][rpos++]=tree[dep][i];</span><br><span class="line">        toleft[dep][i]=toleft[dep][le<span class="number">-1</span>]+lpos-le;<span class="comment">//从1到i放左边的个数</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    build(le,mid,dep+<span class="number">1</span>);</span><br><span class="line">    build(mid+<span class="number">1</span>,r,dep+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//查询区间第k大的数，[L,R]是大区间，[le,r]是要查询的小区间</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> le,<span class="keyword">int</span> r,<span class="keyword">int</span> dep,<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(le==r)<span class="keyword">return</span> tree[dep][le];</span><br><span class="line">    <span class="keyword">int</span> mid=(L+R)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> cnt=toleft[dep][r]-toleft[dep][le<span class="number">-1</span>];  <span class="comment">//[le,r]中位于左边的个数</span></span><br><span class="line">    <span class="keyword">if</span>(cnt&gt;=k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//L+要查询的区间前被放在左边的个数</span></span><br><span class="line">        <span class="keyword">int</span> newl=L+toleft[dep][le<span class="number">-1</span>]-toleft[dep][L<span class="number">-1</span>];</span><br><span class="line">        <span class="comment">//左端点加上查询区间会被放在左边的个数</span></span><br><span class="line">        <span class="keyword">int</span> newr=newl+cnt<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> query(L,mid,newl,newr,dep+<span class="number">1</span>,k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">         <span class="keyword">int</span> newr=r+toleft[dep][R]-toleft[dep][r];</span><br><span class="line">         <span class="keyword">int</span> newl=newr-(r-le-cnt);</span><br><span class="line">         <span class="keyword">return</span> query(mid+<span class="number">1</span>,R,newl,newr,dep+<span class="number">1</span>,k-cnt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;<span class="built_in">cin</span> &gt;&gt; tree[<span class="number">0</span>][i]; sorted[i] = tree[<span class="number">0</span>][i];&#125;</span><br><span class="line">        sort(sorted+<span class="number">1</span>, sorted+n+<span class="number">1</span>);</span><br><span class="line">        build(<span class="number">1</span>, n, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">int</span> le, r, k;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; le &gt;&gt; r &gt;&gt; k;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; query(<span class="number">1</span>, n, le, r, <span class="number">0</span>, k) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Hint&quot;&gt;&lt;a href=&quot;#Hint&quot; class=&quot;headerlink&quot; title=&quot;Hint&quot;&gt;&lt;/a&gt;Hint&lt;/h2&gt;&lt;p&gt;思想与线段树类似，也是一种十分好用的数据结构，可以用于求区间内第k大值。&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构" scheme="https://weibolu.online/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="ACM模板" scheme="https://weibolu.online/tags/ACM%E6%A8%A1%E6%9D%BF/"/>
    
      <category term="数据结构" scheme="https://weibolu.online/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>ACM技巧3 —— __int128的使用</title>
    <link href="https://weibolu.online/2019/06/10/ACM%E6%8A%80%E5%B7%A73%20%E2%80%94%E2%80%94%20_int128%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://weibolu.online/2019/06/10/ACM技巧3 —— _int128的使用/</id>
    <published>2019-06-10T15:31:28.000Z</published>
    <updated>2019-08-16T14:58:25.093Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h2><p>__int128是128位2进制数据，但要自己写输入输出函数，在此记录下。</p><a id="more"></a><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//输入</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">scan</span><span class="params">(__int128 &amp;x)</span><span class="comment">//输入</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> f = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    <span class="keyword">if</span>((ch = getchar()) == <span class="string">'-'</span>) f = -f;</span><br><span class="line">    <span class="keyword">else</span> x = x*<span class="number">10</span> + ch-<span class="string">'0'</span>;</span><br><span class="line">    <span class="keyword">while</span>((ch = getchar()) &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)</span><br><span class="line">        x = x*<span class="number">10</span> + ch-<span class="string">'0'</span>;</span><br><span class="line">    x *= f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(__int128 x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>), x = -x;</span><br><span class="line">    print(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Hint&quot;&gt;&lt;a href=&quot;#Hint&quot; class=&quot;headerlink&quot; title=&quot;Hint&quot;&gt;&lt;/a&gt;Hint&lt;/h2&gt;&lt;p&gt;__int128是128位2进制数据，但要自己写输入输出函数，在此记录下。&lt;/p&gt;
    
    </summary>
    
      <category term="ACM技巧" scheme="https://weibolu.online/categories/ACM%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="ACM模板" scheme="https://weibolu.online/tags/ACM%E6%A8%A1%E6%9D%BF/"/>
    
  </entry>
  
  <entry>
    <title>数论6 —— 组合数的性质</title>
    <link href="https://weibolu.online/2019/06/05/%E6%95%B0%E8%AE%BA6%20%E2%80%94%E2%80%94%20%E7%BB%84%E5%90%88%E6%95%B0%E7%9A%84%E6%80%A7%E8%B4%A8/"/>
    <id>https://weibolu.online/2019/06/05/数论6 —— 组合数的性质/</id>
    <published>2019-06-05T02:29:25.000Z</published>
    <updated>2019-10-21T16:20:12.567Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h2><p>立志要成为数论小能手的我却在组合数这里跪了。。。</p><a id="more"></a><h2 id="组合数"><a href="#组合数" class="headerlink" title="组合数"></a>组合数</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>即高中排列组合中的组合数：</p><p>C(n, m) = n!/((m!) * (n-m)!)</p><p>同时，组合数也有另一层定义，在杨辉三角中，第n行的第m个就是C(n, m)，从0开始。</p><p>而杨辉三角是一个很重要的dp：dp[i] [j] = dp[i-1] [j-1] + dp[i-1] [j]</p><h2 id="计算"><a href="#计算" class="headerlink" title="计算"></a>计算</h2><p>（1）根据上面的递推公式，我们就可以用一个二维数组打一个表出来，时间复杂度为O($n^2$)。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">10020</span>;</span><br><span class="line"><span class="keyword">int</span> comb[maxn][maxn];</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; maxn; i++) &#123;</span><br><span class="line">comb[i][<span class="number">0</span>] = comb[i][i] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; i; j++) &#123;</span><br><span class="line">comb[i][j] = comb[i<span class="number">-1</span>][j] + comb[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">comb[i][j] %= mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">init();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）直接利用组合数的公式求解，时间复杂度O(n)。</p><p>但是直接求很显然会越界，数值存不下，但是可以利用逆元来处理，求出分母的逆元后就可以直接求出结果了，然后预处理一下阶乘和逆元阶乘即可（如果题目没有取模，可以自己设个很大的模数来算逆元）。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">200000</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = (<span class="keyword">int</span>)<span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> F[N], Finv[N], inv[N];<span class="comment">//F是阶乘，Finv是逆元的阶乘 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    inv[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; N; i ++)&#123;</span><br><span class="line">        inv[i] = (MOD - MOD / i) * <span class="number">1l</span>l * inv[MOD % i] % MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    F[<span class="number">0</span>] = Finv[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; i ++)&#123;</span><br><span class="line">        F[i] = F[i<span class="number">-1</span>] * <span class="number">1l</span>l * i % MOD;</span><br><span class="line">        Finv[i] = Finv[i<span class="number">-1</span>] * <span class="number">1l</span>l * inv[i] % MOD;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">comb</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span>&#123;<span class="comment">//comb(n, m)就是C(n, m) </span></span><br><span class="line">    <span class="keyword">if</span>(m &lt; <span class="number">0</span> || m &gt; n) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> F[n] * <span class="number">1l</span>l * Finv[n - m] % MOD * Finv[m] % MOD;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    init();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="拓展（Lucas公式）"><a href="#拓展（Lucas公式）" class="headerlink" title="拓展（Lucas公式）"></a>拓展（Lucas公式）</h2><p>在n、m很大的时候如何求呢？这时mod一定很小（不然就真的没法算了），然后就可以利用这一点，使用卢卡斯公式：</p><p>C(n, m) % p  =  C(n / p, m / p) * C(n%p, m%p) % p</p><p>实现方法很简单，结合上面的求法，一直递归即可：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LL <span class="title">Lucas</span><span class="params">(LL n, LL m, <span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> m ? Lucas(n/p, m/p, p) * comb(n%p, m%p, p) % p : <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Hint&quot;&gt;&lt;a href=&quot;#Hint&quot; class=&quot;headerlink&quot; title=&quot;Hint&quot;&gt;&lt;/a&gt;Hint&lt;/h2&gt;&lt;p&gt;立志要成为数论小能手的我却在组合数这里跪了。。。&lt;/p&gt;
    
    </summary>
    
      <category term="基础数论" scheme="https://weibolu.online/categories/%E5%9F%BA%E7%A1%80%E6%95%B0%E8%AE%BA/"/>
    
    
      <category term="ACM模板" scheme="https://weibolu.online/tags/ACM%E6%A8%A1%E6%9D%BF/"/>
    
      <category term="基础数论" scheme="https://weibolu.online/tags/%E5%9F%BA%E7%A1%80%E6%95%B0%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>矩阵操作与线性代数2 —— 求矩阵的秩</title>
    <link href="https://weibolu.online/2019/05/19/%E7%9F%A9%E9%98%B5%E6%93%8D%E4%BD%9C%E4%B8%8E%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B02%20%E2%80%94%E2%80%94%20%E6%B1%82%E7%9F%A9%E9%98%B5%E7%9A%84%E7%A7%A9/"/>
    <id>https://weibolu.online/2019/05/19/矩阵操作与线性代数2 —— 求矩阵的秩/</id>
    <published>2019-05-19T00:31:03.000Z</published>
    <updated>2019-08-12T03:05:48.678Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h2><p>线性代数里常见的操作，这里记下它的两种代码实现。</p><a id="more"></a><p>模板题 hdu6507</p><h2 id="模板1"><a href="#模板1" class="headerlink" title="模板1"></a>模板1</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> long long ll</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span> + <span class="number">100</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">50</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> eps = <span class="number">1e-6</span>;</span><br><span class="line"><span class="keyword">int</span> a[N][N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Rank</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, k, r, u;</span><br><span class="line">    <span class="keyword">while</span>(i &lt; n &amp;&amp; j &lt; m) &#123;</span><br><span class="line">        r = i;</span><br><span class="line">        <span class="keyword">for</span>(k = i; k &lt; m; k++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[k][j]) &#123;</span><br><span class="line">                r = k;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(a[r][j]) &#123;</span><br><span class="line">            <span class="keyword">if</span>(r != i) &#123;</span><br><span class="line">                <span class="keyword">for</span>(k = <span class="number">0</span>; k &lt;= n; k++) &#123;</span><br><span class="line">                    swap(a[r][k], a[i][k]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(u = i+<span class="number">1</span>; u &lt; m; u++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(a[u][j]) &#123;</span><br><span class="line">                    <span class="keyword">for</span>(k = i; k &lt;= n; k++) &#123;</span><br><span class="line">                        a[u][k] ^= a[i][k];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ++i;</span><br><span class="line">        &#125;</span><br><span class="line">        ++j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m; </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, min(n*m, max(<span class="number">1</span>, Rank(n, m))*(n+m)));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="模板2（高斯消元）"><a href="#模板2（高斯消元）" class="headerlink" title="模板2（高斯消元）"></a>模板2（高斯消元）</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span> + <span class="number">100</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">50</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> eps = <span class="number">1e-6</span>;</span><br><span class="line"><span class="keyword">int</span> a[N][N];</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">xchgline</span><span class="params">(<span class="keyword">int</span> q, <span class="keyword">int</span> w, <span class="keyword">int</span> e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = e; i &lt;= m; i++) &#123;</span><br><span class="line">        swap(a[q][i], a[w][i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Rank</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> s = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>, j = <span class="number">1</span>; i &lt;= n &amp;&amp; j &lt;= m; i++, j++) &#123;</span><br><span class="line">        <span class="keyword">int</span> chk = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> v = i; v &lt;= n; v++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[v][j] != <span class="number">0</span>) &#123;</span><br><span class="line">                chk = v;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(chk == <span class="number">0</span>) i--;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            xchgline(chk, i, j);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> w = i+<span class="number">1</span>; w &lt;= n; w++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(a[w][j] != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">int</span> g = __gcd(a[w][j], a[i][j]);</span><br><span class="line">                    <span class="keyword">int</span> pa = a[i][j]/g, pb = a[w][j]/g;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> z = j; z &lt;= m; z++) &#123;</span><br><span class="line">                        a[w][z] = a[w][z]*pa-a[i][z]*pb;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            s++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, min(n*m, max(<span class="number">1</span>, Rank(n, m))*(n+m)));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Hint&quot;&gt;&lt;a href=&quot;#Hint&quot; class=&quot;headerlink&quot; title=&quot;Hint&quot;&gt;&lt;/a&gt;Hint&lt;/h2&gt;&lt;p&gt;线性代数里常见的操作，这里记下它的两种代码实现。&lt;/p&gt;
    
    </summary>
    
      <category term="矩阵算法" scheme="https://weibolu.online/categories/%E7%9F%A9%E9%98%B5%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="ACM模板" scheme="https://weibolu.online/tags/ACM%E6%A8%A1%E6%9D%BF/"/>
    
  </entry>
  
  <entry>
    <title>矩阵操作与线性代数1 —— 矩阵快速幂</title>
    <link href="https://weibolu.online/2019/05/18/%E7%9F%A9%E9%98%B5%E6%93%8D%E4%BD%9C%E4%B8%8E%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B01%20%E2%80%94%E2%80%94%20%E7%9F%A9%E9%98%B5%E5%BF%AB%E9%80%9F%E5%B9%82/"/>
    <id>https://weibolu.online/2019/05/18/矩阵操作与线性代数1 —— 矩阵快速幂/</id>
    <published>2019-05-18T00:31:03.000Z</published>
    <updated>2019-08-12T03:04:18.036Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h2><p>在此记录下求矩阵快速幂的模板，其实就是快速幂的思想，只不过通过矩阵来实现了，可以用来快速求解斐波那契数列，也可以用来加速一些迭代公式的计算。<br><a id="more"></a></p><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">15</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">9973</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Mat</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="keyword">int</span> mat[maxn][maxn];</span><br><span class="line">    Mat()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(mat, <span class="number">0</span>, <span class="keyword">sizeof</span> mat);</span><br><span class="line">        n = m = maxn;</span><br><span class="line">    &#125;</span><br><span class="line">    Mat <span class="keyword">operator</span> * (Mat b)</span><br><span class="line">    &#123;</span><br><span class="line">        Mat c;</span><br><span class="line">        c = Mat();</span><br><span class="line">        c.n = n; c.m = b.m;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= b.m; j++) &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= m; k++) &#123;</span><br><span class="line">                    c.mat[i][j] += (mat[i][k]*b.mat[k][j]) % mod;</span><br><span class="line">                    c.mat[i][j] %= mod;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">    Mat <span class="keyword">operator</span> + (Mat b)</span><br><span class="line">    &#123;</span><br><span class="line">        Mat c;</span><br><span class="line">        c.n = n; c.m = m;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">            c.mat[i][j] = mat[i][j] + b.mat[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">in</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        n = x; m = y;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= x; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= y; j++) &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;mat[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">out</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d "</span>, mat[i][j]);</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">Mat <span class="title">quick_pow</span><span class="params">(Mat a, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Mat c;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    c = Mat();</span><br><span class="line">    c.n = a.n; c.m = a.m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= c.n; i++)</span><br><span class="line">        c.mat[i][i] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(k) &#123;</span><br><span class="line">        <span class="keyword">if</span>(k &amp; <span class="number">1</span>) c = c*a;</span><br><span class="line">        a = a*a;</span><br><span class="line">        k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="hint"><a href="#hint" class="headerlink" title="hint"></a>hint</h2><p>A + A^2 + A^3 + A^4 + A^5 + A^6 = (A + A^2 + A^3) + A^3*(A + A^2 + A^3)利用二分的思想划分，再用快速幂求解。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Hint&quot;&gt;&lt;a href=&quot;#Hint&quot; class=&quot;headerlink&quot; title=&quot;Hint&quot;&gt;&lt;/a&gt;Hint&lt;/h2&gt;&lt;p&gt;在此记录下求矩阵快速幂的模板，其实就是快速幂的思想，只不过通过矩阵来实现了，可以用来快速求解斐波那契数列，也可以用来加速一些迭代公式的计算。&lt;br&gt;
    
    </summary>
    
      <category term="矩阵算法" scheme="https://weibolu.online/categories/%E7%9F%A9%E9%98%B5%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="ACM模板" scheme="https://weibolu.online/tags/ACM%E6%A8%A1%E6%9D%BF/"/>
    
  </entry>
  
</feed>
